
Embedded_OS_Lab4_P76091331.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045a8  080045a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080045b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016fc  20000078  08004628  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  08004628  00021774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b82  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000248a  00000000  00000000  00030c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  000330b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00033ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020be1  00000000  00000000  00034c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b944  00000000  00000000  000557f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c57da  00000000  00000000  00061135  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012690f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  0012698c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800442c 	.word	0x0800442c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800442c 	.word	0x0800442c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fab7 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f85b 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8e1 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8b5 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(RedLEDTask,"RedLEDTask",100,NULL,0,NULL);
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2300      	movs	r3, #0
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2264      	movs	r2, #100	; 0x64
 80005a2:	491c      	ldr	r1, [pc, #112]	; (8000614 <main+0x94>)
 80005a4:	481c      	ldr	r0, [pc, #112]	; (8000618 <main+0x98>)
 80005a6:	f002 f98d 	bl	80028c4 <xTaskCreate>
    xTaskCreate(Task1,"Task1",50,NULL,0,NULL);
 80005aa:	2300      	movs	r3, #0
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2232      	movs	r2, #50	; 0x32
 80005b6:	4919      	ldr	r1, [pc, #100]	; (800061c <main+0x9c>)
 80005b8:	4819      	ldr	r0, [pc, #100]	; (8000620 <main+0xa0>)
 80005ba:	f002 f983 	bl	80028c4 <xTaskCreate>
    xTaskCreate(Task2,"Task2",30,NULL,0,NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2300      	movs	r3, #0
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	221e      	movs	r2, #30
 80005ca:	4916      	ldr	r1, [pc, #88]	; (8000624 <main+0xa4>)
 80005cc:	4816      	ldr	r0, [pc, #88]	; (8000628 <main+0xa8>)
 80005ce:	f002 f979 	bl	80028c4 <xTaskCreate>
    xTaskCreate(GreenLEDTask,"GreenLEDTask",130,NULL,0,NULL);
 80005d2:	2300      	movs	r3, #0
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2300      	movs	r3, #0
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	2282      	movs	r2, #130	; 0x82
 80005de:	4913      	ldr	r1, [pc, #76]	; (800062c <main+0xac>)
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <main+0xb0>)
 80005e2:	f002 f96f 	bl	80028c4 <xTaskCreate>
    xTaskCreate(Task3,"Task3",40,NULL,0,NULL);
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2300      	movs	r3, #0
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2228      	movs	r2, #40	; 0x28
 80005f2:	4910      	ldr	r1, [pc, #64]	; (8000634 <main+0xb4>)
 80005f4:	4810      	ldr	r0, [pc, #64]	; (8000638 <main+0xb8>)
 80005f6:	f002 f965 	bl	80028c4 <xTaskCreate>
    xTaskCreate(PrintTask,"PrintTask",130,NULL,0,NULL);
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2282      	movs	r2, #130	; 0x82
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <main+0xbc>)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <main+0xc0>)
 800060a:	f002 f95b 	bl	80028c4 <xTaskCreate>
    vTaskStartScheduler();
 800060e:	f002 fb7f 	bl	8002d10 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x92>
 8000614:	08004444 	.word	0x08004444
 8000618:	08000789 	.word	0x08000789
 800061c:	08004450 	.word	0x08004450
 8000620:	080007c9 	.word	0x080007c9
 8000624:	08004458 	.word	0x08004458
 8000628:	080007d9 	.word	0x080007d9
 800062c:	08004460 	.word	0x08004460
 8000630:	080007a9 	.word	0x080007a9
 8000634:	08004470 	.word	0x08004470
 8000638:	080007e9 	.word	0x080007e9
 800063c:	08004478 	.word	0x08004478
 8000640:	080007f9 	.word	0x080007f9

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fadd 	bl	8003c12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xb4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xb4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xb4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <SystemClock_Config+0xb8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <SystemClock_Config+0xb8>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <SystemClock_Config+0xb8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fcf9 	bl	80010ac <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c0:	f000 f8b8 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ff54 	bl	800158c <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ea:	f000 f8a3 	bl	8000834 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 fb64 	bl	8001e04 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f877 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20001688 	.word	0x20001688
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_GPIO_Init+0x30>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <MX_GPIO_Init+0x30>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_GPIO_Init+0x30>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <RedLEDTask>:

/* USER CODE BEGIN 4 */
void RedLEDTask(void const * argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <RedLEDTask+0x1c>)
 8000796:	f000 fc6d 	bl	8001074 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800079a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079e:	f002 fa83 	bl	8002ca8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007a2:	e7f5      	b.n	8000790 <RedLEDTask+0x8>
 80007a4:	40020c00 	.word	0x40020c00

080007a8 <GreenLEDTask>:
	}
}
void GreenLEDTask(void const * argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <GreenLEDTask+0x1c>)
 80007b6:	f000 fc5d 	bl	8001074 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f002 fa73 	bl	8002ca8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007c2:	e7f5      	b.n	80007b0 <GreenLEDTask+0x8>
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <Task1>:
	}
}
void Task1(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 80007d0:	2000      	movs	r0, #0
 80007d2:	f002 f9db 	bl	8002b8c <vTaskDelete>
 80007d6:	e7fb      	b.n	80007d0 <Task1+0x8>

080007d8 <Task2>:
	}
}
void Task2(void const * argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 80007e0:	2000      	movs	r0, #0
 80007e2:	f002 f9d3 	bl	8002b8c <vTaskDelete>
 80007e6:	e7fb      	b.n	80007e0 <Task2+0x8>

080007e8 <Task3>:
	}
}

void Task3(void const * argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 f9cb 	bl	8002b8c <vTaskDelete>
 80007f6:	e7fb      	b.n	80007f0 <Task3+0x8>

080007f8 <PrintTask>:
	}
}
void PrintTask(void const * argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vPrintFreeList();
 8000800:	f003 f948 	bl	8003a94 <vPrintFreeList>
		vTaskDelay(3000);
 8000804:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000808:	f002 fa4e 	bl	8002ca8 <vTaskDelay>
		vPrintFreeList();
 800080c:	e7f8      	b.n	8000800 <PrintTask+0x8>
	...

08000810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d101      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000822:	f000 f98b 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40001400 	.word	0x40001400

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083a:	e7fe      	b.n	800083a <Error_Handler+0x6>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_UART_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e6:	230c      	movs	r3, #12
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0x8c>)
 8000902:	f000 fa1d 	bl	8000d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40004400 	.word	0x40004400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	2037      	movs	r0, #55	; 0x37
 8000932:	f000 f9db 	bl	8000cec <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000936:	2037      	movs	r0, #55	; 0x37
 8000938:	f000 f9f4 	bl	8000d24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_InitTick+0xa0>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_InitTick+0xa0>)
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_InitTick+0xa0>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 ffde 	bl	8001924 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000968:	f000 ffb4 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 800096c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <HAL_InitTick+0xa4>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_InitTick+0xa8>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_InitTick+0xac>)
 8000980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_InitTick+0xa8>)
 8000984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_InitTick+0xa8>)
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_InitTick+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_InitTick+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <HAL_InitTick+0xa8>)
 800099e:	f000 fff3 	bl	8001988 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_InitTick+0xa8>)
 80009aa:	f001 f822 	bl	80019f2 <HAL_TIM_Base_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	200016c8 	.word	0x200016c8
 80009c8:	40001400 	.word	0x40001400

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM7_IRQHandler+0x10>)
 80009fe:	f001 f81c 	bl	8001a3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200016c8 	.word	0x200016c8

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f003 f8b4 	bl	8003ba8 <__errno>
 8000a40:	4602      	mov	r2, r0
 8000a42:	230c      	movs	r3, #12
 8000a44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20020000 	.word	0x20020000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	20000094 	.word	0x20000094
 8000a74:	20001778 	.word	0x20001778

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SystemInit+0x28>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <SystemInit+0x28>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SystemInit+0x28>)
 8000a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a92:	609a      	str	r2, [r3, #8]
#endif
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aaa:	e003      	b.n	8000ab4 <LoopCopyDataInit>

08000aac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ab2:	3104      	adds	r1, #4

08000ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000abc:	d3f6      	bcc.n	8000aac <CopyDataInit>
  ldr  r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ac0:	e002      	b.n	8000ac8 <LoopFillZerobss>

08000ac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ac4:	f842 3b04 	str.w	r3, [r2], #4

08000ac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000acc:	d3f9      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ace:	f7ff ffd3 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f003 f86f 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fd53 	bl	8000580 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ae0:	080045b0 	.word	0x080045b0
  ldr  r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000aec:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000af0:	20001774 	.word	0x20001774

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f8d8 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fef8 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe86 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20001708 	.word	0x20001708

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20001708 	.word	0x20001708

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4c 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfe:	f7ff ff61 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f7ff ffb1 	bl	8000c70 <NVIC_EncodePriority>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff80 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff54 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	e16b      	b.n	8001034 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	f040 815a 	bne.w	800102e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d00b      	beq.n	8000d9a <HAL_GPIO_Init+0x5a>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8e:	2b11      	cmp	r3, #17
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b12      	cmp	r3, #18
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0xfc>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	d123      	bne.n	8000e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	69b9      	ldr	r1, [r7, #24]
 8000e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0203 	and.w	r2, r3, #3
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80b4 	beq.w	800102e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b5f      	ldr	r3, [pc, #380]	; (8001048 <HAL_GPIO_Init+0x308>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a5e      	ldr	r2, [pc, #376]	; (8001048 <HAL_GPIO_Init+0x308>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b5c      	ldr	r3, [pc, #368]	; (8001048 <HAL_GPIO_Init+0x308>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	; (800104c <HAL_GPIO_Init+0x30c>)
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a51      	ldr	r2, [pc, #324]	; (8001050 <HAL_GPIO_Init+0x310>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d02b      	beq.n	8000f66 <HAL_GPIO_Init+0x226>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a50      	ldr	r2, [pc, #320]	; (8001054 <HAL_GPIO_Init+0x314>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d025      	beq.n	8000f62 <HAL_GPIO_Init+0x222>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	; (8001058 <HAL_GPIO_Init+0x318>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01f      	beq.n	8000f5e <HAL_GPIO_Init+0x21e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_GPIO_Init+0x31c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x21a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_GPIO_Init+0x320>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x216>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x324>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x212>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4b      	ldr	r2, [pc, #300]	; (8001068 <HAL_GPIO_Init+0x328>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x20e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_GPIO_Init+0x32c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x20a>
 8000f46:	2307      	movs	r3, #7
 8000f48:	e00e      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	e00c      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e00a      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e008      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e004      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_Init+0x228>
 8000f66:	2300      	movs	r3, #0
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	f002 0203 	and.w	r2, r2, #3
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	4093      	lsls	r3, r2
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f78:	4934      	ldr	r1, [pc, #208]	; (800104c <HAL_GPIO_Init+0x30c>)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f86:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <HAL_GPIO_Init+0x330>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000faa:	4a31      	ldr	r2, [pc, #196]	; (8001070 <HAL_GPIO_Init+0x330>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <HAL_GPIO_Init+0x330>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_GPIO_Init+0x330>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <HAL_GPIO_Init+0x330>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <HAL_GPIO_Init+0x330>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_GPIO_Init+0x330>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_GPIO_Init+0x330>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3301      	adds	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	f67f ae90 	bls.w	8000d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800103c:	bf00      	nop
 800103e:	3724      	adds	r7, #36	; 0x24
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40013c00 	.word	0x40013c00

08001074 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	401a      	ands	r2, r3
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	429a      	cmp	r2, r3
 800108c:	d104      	bne.n	8001098 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001096:	e002      	b.n	800109e <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001098:	887a      	ldrh	r2, [r7, #2]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	619a      	str	r2, [r3, #24]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e25b      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d075      	beq.n	80011b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ca:	4ba3      	ldr	r3, [pc, #652]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d00c      	beq.n	80010f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	4ba0      	ldr	r3, [pc, #640]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d112      	bne.n	8001108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e2:	4b9d      	ldr	r3, [pc, #628]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ee:	d10b      	bne.n	8001108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	4b99      	ldr	r3, [pc, #612]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d05b      	beq.n	80011b4 <HAL_RCC_OscConfig+0x108>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d157      	bne.n	80011b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e236      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d106      	bne.n	8001120 <HAL_RCC_OscConfig+0x74>
 8001112:	4b91      	ldr	r3, [pc, #580]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a90      	ldr	r2, [pc, #576]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e01d      	b.n	800115c <HAL_RCC_OscConfig+0xb0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x98>
 800112a:	4b8b      	ldr	r3, [pc, #556]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a8a      	ldr	r2, [pc, #552]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a87      	ldr	r2, [pc, #540]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0xb0>
 8001144:	4b84      	ldr	r3, [pc, #528]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a83      	ldr	r2, [pc, #524]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b81      	ldr	r3, [pc, #516]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a80      	ldr	r2, [pc, #512]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fcfe 	bl	8000b64 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fcfa 	bl	8000b64 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1fb      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0xc0>
 800118a:	e014      	b.n	80011b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fcea 	bl	8000b64 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fce6 	bl	8000b64 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1e7      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0xe8>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d063      	beq.n	800128a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c2:	4b65      	ldr	r3, [pc, #404]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00b      	beq.n	80011e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b62      	ldr	r3, [pc, #392]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d11c      	bne.n	8001214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011da:	4b5f      	ldr	r3, [pc, #380]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d116      	bne.n	8001214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x152>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e1bb      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b56      	ldr	r3, [pc, #344]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4952      	ldr	r1, [pc, #328]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	e03a      	b.n	800128a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121c:	4b4f      	ldr	r3, [pc, #316]	; (800135c <HAL_RCC_OscConfig+0x2b0>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001222:	f7ff fc9f 	bl	8000b64 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122a:	f7ff fc9b 	bl	8000b64 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e19c      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	4b46      	ldr	r3, [pc, #280]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b43      	ldr	r3, [pc, #268]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4940      	ldr	r1, [pc, #256]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
 800125c:	e015      	b.n	800128a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_RCC_OscConfig+0x2b0>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fc7e 	bl	8000b64 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fc7a 	bl	8000b64 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e17b      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d030      	beq.n	80012f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d016      	beq.n	80012cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_RCC_OscConfig+0x2b4>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a4:	f7ff fc5e 	bl	8000b64 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc5a 	bl	8000b64 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e15b      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x200>
 80012ca:	e015      	b.n	80012f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_RCC_OscConfig+0x2b4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fc47 	bl	8000b64 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff fc43 	bl	8000b64 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e144      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f0      	bne.n	80012da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a0 	beq.w	8001446 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x2b8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d121      	bne.n	8001386 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_RCC_OscConfig+0x2b8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_RCC_OscConfig+0x2b8>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134e:	f7ff fc09 	bl	8000b64 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	e011      	b.n	800137a <HAL_RCC_OscConfig+0x2ce>
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	42470000 	.word	0x42470000
 8001360:	42470e80 	.word	0x42470e80
 8001364:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001368:	f7ff fbfc 	bl	8000b64 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0fd      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x4d4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x2f0>
 800138e:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	e01c      	b.n	80013d6 <HAL_RCC_OscConfig+0x32a>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x312>
 80013a4:	4b77      	ldr	r3, [pc, #476]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	4a76      	ldr	r2, [pc, #472]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
 80013b0:	4b74      	ldr	r3, [pc, #464]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	4a73      	ldr	r2, [pc, #460]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	; 0x70
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0x32a>
 80013be:	4b71      	ldr	r3, [pc, #452]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	4a70      	ldr	r2, [pc, #448]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ca:	4b6e      	ldr	r3, [pc, #440]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a6d      	ldr	r2, [pc, #436]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d015      	beq.n	800140a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013de:	f7ff fbc1 	bl	8000b64 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fbbd 	bl	8000b64 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0bc      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	4b61      	ldr	r3, [pc, #388]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0ee      	beq.n	80013e6 <HAL_RCC_OscConfig+0x33a>
 8001408:	e014      	b.n	8001434 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fbab 	bl	8000b64 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff fba7 	bl	8000b64 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001420:	4293      	cmp	r3, r2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0a6      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ee      	bne.n	8001412 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d105      	bne.n	8001446 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143a:	4b52      	ldr	r3, [pc, #328]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a51      	ldr	r2, [pc, #324]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 8001440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8092 	beq.w	8001574 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001450:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d05c      	beq.n	8001516 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d141      	bne.n	80014e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001464:	4b48      	ldr	r3, [pc, #288]	; (8001588 <HAL_RCC_OscConfig+0x4dc>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fb7b 	bl	8000b64 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fb77 	bl	8000b64 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e078      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001484:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	019b      	lsls	r3, r3, #6
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	3b01      	subs	r3, #1
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	061b      	lsls	r3, r3, #24
 80014b4:	4933      	ldr	r1, [pc, #204]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_RCC_OscConfig+0x4dc>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb50 	bl	8000b64 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fb4c 	bl	8000b64 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e04d      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x41c>
 80014e6:	e045      	b.n	8001574 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_RCC_OscConfig+0x4dc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fb39 	bl	8000b64 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f6:	f7ff fb35 	bl	8000b64 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e036      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x44a>
 8001514:	e02e      	b.n	8001574 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e029      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_RCC_OscConfig+0x4d8>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	429a      	cmp	r2, r3
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d115      	bne.n	8001570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800154a:	4013      	ands	r3, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001550:	4293      	cmp	r3, r2
 8001552:	d10d      	bne.n	8001570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800155e:	429a      	cmp	r2, r3
 8001560:	d106      	bne.n	8001570 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40007000 	.word	0x40007000
 8001584:	40023800 	.word	0x40023800
 8001588:	42470060 	.word	0x42470060

0800158c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0cc      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d90c      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d044      	beq.n	80016ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d119      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	2b03      	cmp	r3, #3
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e067      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4934      	ldr	r1, [pc, #208]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800167c:	f7ff fa72 	bl	8000b64 <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff fa6e 	bl	8000b64 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e04f      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d20c      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4601      	mov	r1, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	fa21 f303 	lsr.w	r3, r1, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f8f2 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
 800174c:	08004554 	.word	0x08004554
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b04      	cmp	r3, #4
 8001778:	d007      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x32>
 800177a:	2b08      	cmp	r3, #8
 800177c:	d008      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x38>
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 808d 	bne.w	800189e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001786:	60bb      	str	r3, [r7, #8]
       break;
 8001788:	e08c      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178a:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800178c:	60bb      	str	r3, [r7, #8]
      break;
 800178e:	e089      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001790:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001798:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179a:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d023      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	f04f 0400 	mov.w	r4, #0
 80017b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	ea03 0501 	and.w	r5, r3, r1
 80017bc:	ea04 0602 	and.w	r6, r4, r2
 80017c0:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017c2:	fb02 f106 	mul.w	r1, r2, r6
 80017c6:	2200      	movs	r2, #0
 80017c8:	fb02 f205 	mul.w	r2, r2, r5
 80017cc:	440a      	add	r2, r1
 80017ce:	493a      	ldr	r1, [pc, #232]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017d0:	fba5 0101 	umull	r0, r1, r5, r1
 80017d4:	1853      	adds	r3, r2, r1
 80017d6:	4619      	mov	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f04f 0400 	mov.w	r4, #0
 80017de:	461a      	mov	r2, r3
 80017e0:	4623      	mov	r3, r4
 80017e2:	f7fe fd4d 	bl	8000280 <__aeabi_uldivmod>
 80017e6:	4603      	mov	r3, r0
 80017e8:	460c      	mov	r4, r1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e049      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	099b      	lsrs	r3, r3, #6
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	ea03 0501 	and.w	r5, r3, r1
 8001804:	ea04 0602 	and.w	r6, r4, r2
 8001808:	4629      	mov	r1, r5
 800180a:	4632      	mov	r2, r6
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	f04f 0400 	mov.w	r4, #0
 8001814:	0154      	lsls	r4, r2, #5
 8001816:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800181a:	014b      	lsls	r3, r1, #5
 800181c:	4619      	mov	r1, r3
 800181e:	4622      	mov	r2, r4
 8001820:	1b49      	subs	r1, r1, r5
 8001822:	eb62 0206 	sbc.w	r2, r2, r6
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	f04f 0400 	mov.w	r4, #0
 800182e:	0194      	lsls	r4, r2, #6
 8001830:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001834:	018b      	lsls	r3, r1, #6
 8001836:	1a5b      	subs	r3, r3, r1
 8001838:	eb64 0402 	sbc.w	r4, r4, r2
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	00e2      	lsls	r2, r4, #3
 8001846:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800184a:	00d9      	lsls	r1, r3, #3
 800184c:	460b      	mov	r3, r1
 800184e:	4614      	mov	r4, r2
 8001850:	195b      	adds	r3, r3, r5
 8001852:	eb44 0406 	adc.w	r4, r4, r6
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	02a2      	lsls	r2, r4, #10
 8001860:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001864:	0299      	lsls	r1, r3, #10
 8001866:	460b      	mov	r3, r1
 8001868:	4614      	mov	r4, r2
 800186a:	4618      	mov	r0, r3
 800186c:	4621      	mov	r1, r4
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	f7fe fd02 	bl	8000280 <__aeabi_uldivmod>
 800187c:	4603      	mov	r3, r0
 800187e:	460c      	mov	r4, r1
 8001880:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	3301      	adds	r3, #1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	60bb      	str	r3, [r7, #8]
      break;
 800189c:	e002      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018a0:	60bb      	str	r3, [r7, #8]
      break;
 80018a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a4:	68bb      	ldr	r3, [r7, #8]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	017d7840 	.word	0x017d7840

080018bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d8:	f7ff fff0 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018dc:	4601      	mov	r1, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0a9b      	lsrs	r3, r3, #10
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08004564 	.word	0x08004564

080018fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001900:	f7ff ffdc 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 8001904:	4601      	mov	r1, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0b5b      	lsrs	r3, r3, #13
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001912:	5cd3      	ldrb	r3, [r2, r3]
 8001914:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	08004564 	.word	0x08004564

08001924 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	220f      	movs	r2, #15
 8001932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_GetClockConfig+0x5c>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_RCC_GetClockConfig+0x60>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 020f 	and.w	r2, r3, #15
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40023c00 	.word	0x40023c00

08001988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e01d      	b.n	80019d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f815 	bl	80019de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3304      	adds	r3, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f000 f968 	bl	8001c9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	d007      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d122      	bne.n	8001a96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d11b      	bne.n	8001a96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f06f 0202 	mvn.w	r2, #2
 8001a66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8ee 	bl	8001c5e <HAL_TIM_IC_CaptureCallback>
 8001a82:	e005      	b.n	8001a90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8e0 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8f1 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d122      	bne.n	8001aea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d11b      	bne.n	8001aea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0204 	mvn.w	r2, #4
 8001aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8c4 	bl	8001c5e <HAL_TIM_IC_CaptureCallback>
 8001ad6:	e005      	b.n	8001ae4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f8b6 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8c7 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d122      	bne.n	8001b3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d11b      	bne.n	8001b3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f06f 0208 	mvn.w	r2, #8
 8001b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2204      	movs	r2, #4
 8001b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f89a 	bl	8001c5e <HAL_TIM_IC_CaptureCallback>
 8001b2a:	e005      	b.n	8001b38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f88c 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f89d 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d122      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d11b      	bne.n	8001b92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f06f 0210 	mvn.w	r2, #16
 8001b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2208      	movs	r2, #8
 8001b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f870 	bl	8001c5e <HAL_TIM_IC_CaptureCallback>
 8001b7e:	e005      	b.n	8001b8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f862 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f873 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10e      	bne.n	8001bbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f06f 0201 	mvn.w	r2, #1
 8001bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7fe fe29 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d10e      	bne.n	8001bea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	2b80      	cmp	r3, #128	; 0x80
 8001bd8:	d107      	bne.n	8001bea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f903 	bl	8001df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b40      	cmp	r3, #64	; 0x40
 8001bf6:	d10e      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d107      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f838 	bl	8001c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d10e      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d107      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0220 	mvn.w	r2, #32
 8001c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8cd 	bl	8001ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a40      	ldr	r2, [pc, #256]	; (8001db0 <TIM_Base_SetConfig+0x114>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <TIM_Base_SetConfig+0x40>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d00f      	beq.n	8001cdc <TIM_Base_SetConfig+0x40>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <TIM_Base_SetConfig+0x118>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00b      	beq.n	8001cdc <TIM_Base_SetConfig+0x40>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3c      	ldr	r2, [pc, #240]	; (8001db8 <TIM_Base_SetConfig+0x11c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <TIM_Base_SetConfig+0x40>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <TIM_Base_SetConfig+0x120>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d003      	beq.n	8001cdc <TIM_Base_SetConfig+0x40>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3a      	ldr	r2, [pc, #232]	; (8001dc0 <TIM_Base_SetConfig+0x124>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d108      	bne.n	8001cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <TIM_Base_SetConfig+0x114>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02b      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfc:	d027      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a2c      	ldr	r2, [pc, #176]	; (8001db4 <TIM_Base_SetConfig+0x118>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d023      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <TIM_Base_SetConfig+0x11c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a2a      	ldr	r2, [pc, #168]	; (8001dbc <TIM_Base_SetConfig+0x120>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01b      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <TIM_Base_SetConfig+0x124>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d017      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <TIM_Base_SetConfig+0x128>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <TIM_Base_SetConfig+0x12c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00f      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <TIM_Base_SetConfig+0x130>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00b      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <TIM_Base_SetConfig+0x134>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <TIM_Base_SetConfig+0x138>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d003      	beq.n	8001d4e <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <TIM_Base_SetConfig+0x13c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d108      	bne.n	8001d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <TIM_Base_SetConfig+0x114>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <TIM_Base_SetConfig+0xf8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <TIM_Base_SetConfig+0x124>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d103      	bne.n	8001d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	615a      	str	r2, [r3, #20]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40010000 	.word	0x40010000
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	40000c00 	.word	0x40000c00
 8001dc0:	40010400 	.word	0x40010400
 8001dc4:	40014000 	.word	0x40014000
 8001dc8:	40014400 	.word	0x40014400
 8001dcc:	40014800 	.word	0x40014800
 8001dd0:	40001800 	.word	0x40001800
 8001dd4:	40001c00 	.word	0x40001c00
 8001dd8:	40002000 	.word	0x40002000

08001ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e03f      	b.n	8001e96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fd2e 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f90b 	bl	8002064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b088      	sub	sp, #32
 8001ea2:	af02      	add	r7, sp, #8
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	f040 8083 	bne.w	8001fc6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_UART_Transmit+0x2e>
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e07b      	b.n	8001fc8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Transmit+0x40>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e074      	b.n	8001fc8 <HAL_UART_Transmit+0x12a>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2221      	movs	r2, #33	; 0x21
 8001ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fe36 	bl	8000b64 <HAL_GetTick>
 8001ef8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	88fa      	ldrh	r2, [r7, #6]
 8001efe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	88fa      	ldrh	r2, [r7, #6]
 8001f04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f0e:	e042      	b.n	8001f96 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f26:	d122      	bne.n	8001f6e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f84c 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e042      	b.n	8001fc8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f54:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3302      	adds	r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	e017      	b.n	8001f96 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	e013      	b.n	8001f96 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f829 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e01f      	b.n	8001fc8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60ba      	str	r2, [r7, #8]
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1b7      	bne.n	8001f10 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2140      	movs	r1, #64	; 0x40
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f810 	bl	8001fd0 <UART_WaitOnFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e006      	b.n	8001fc8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe0:	e02c      	b.n	800203c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fe8:	d028      	beq.n	800203c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ff0:	f7fe fdb8 	bl	8000b64 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d21d      	bcs.n	800203c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800200e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e00f      	b.n	800205c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4013      	ands	r3, r2
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	429a      	cmp	r2, r3
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	429a      	cmp	r2, r3
 8002058:	d0c3      	beq.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020a6:	f023 030c 	bic.w	r3, r3, #12
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	68f9      	ldr	r1, [r7, #12]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d2:	f040 818b 	bne.w	80023ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4ac1      	ldr	r2, [pc, #772]	; (80023e0 <UART_SetConfig+0x37c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d005      	beq.n	80020ec <UART_SetConfig+0x88>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4abf      	ldr	r2, [pc, #764]	; (80023e4 <UART_SetConfig+0x380>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 80bd 	bne.w	8002266 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020ec:	f7ff fc06 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 80020f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	461d      	mov	r5, r3
 80020f6:	f04f 0600 	mov.w	r6, #0
 80020fa:	46a8      	mov	r8, r5
 80020fc:	46b1      	mov	r9, r6
 80020fe:	eb18 0308 	adds.w	r3, r8, r8
 8002102:	eb49 0409 	adc.w	r4, r9, r9
 8002106:	4698      	mov	r8, r3
 8002108:	46a1      	mov	r9, r4
 800210a:	eb18 0805 	adds.w	r8, r8, r5
 800210e:	eb49 0906 	adc.w	r9, r9, r6
 8002112:	f04f 0100 	mov.w	r1, #0
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800211e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002122:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002126:	4688      	mov	r8, r1
 8002128:	4691      	mov	r9, r2
 800212a:	eb18 0005 	adds.w	r0, r8, r5
 800212e:	eb49 0106 	adc.w	r1, r9, r6
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	461d      	mov	r5, r3
 8002138:	f04f 0600 	mov.w	r6, #0
 800213c:	196b      	adds	r3, r5, r5
 800213e:	eb46 0406 	adc.w	r4, r6, r6
 8002142:	461a      	mov	r2, r3
 8002144:	4623      	mov	r3, r4
 8002146:	f7fe f89b 	bl	8000280 <__aeabi_uldivmod>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	461a      	mov	r2, r3
 8002150:	4ba5      	ldr	r3, [pc, #660]	; (80023e8 <UART_SetConfig+0x384>)
 8002152:	fba3 2302 	umull	r2, r3, r3, r2
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	461d      	mov	r5, r3
 8002160:	f04f 0600 	mov.w	r6, #0
 8002164:	46a9      	mov	r9, r5
 8002166:	46b2      	mov	sl, r6
 8002168:	eb19 0309 	adds.w	r3, r9, r9
 800216c:	eb4a 040a 	adc.w	r4, sl, sl
 8002170:	4699      	mov	r9, r3
 8002172:	46a2      	mov	sl, r4
 8002174:	eb19 0905 	adds.w	r9, r9, r5
 8002178:	eb4a 0a06 	adc.w	sl, sl, r6
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800218c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002190:	4689      	mov	r9, r1
 8002192:	4692      	mov	sl, r2
 8002194:	eb19 0005 	adds.w	r0, r9, r5
 8002198:	eb4a 0106 	adc.w	r1, sl, r6
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	461d      	mov	r5, r3
 80021a2:	f04f 0600 	mov.w	r6, #0
 80021a6:	196b      	adds	r3, r5, r5
 80021a8:	eb46 0406 	adc.w	r4, r6, r6
 80021ac:	461a      	mov	r2, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	f7fe f866 	bl	8000280 <__aeabi_uldivmod>
 80021b4:	4603      	mov	r3, r0
 80021b6:	460c      	mov	r4, r1
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <UART_SetConfig+0x384>)
 80021bc:	fba3 1302 	umull	r1, r3, r3, r2
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	2164      	movs	r1, #100	; 0x64
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	3332      	adds	r3, #50	; 0x32
 80021ce:	4a86      	ldr	r2, [pc, #536]	; (80023e8 <UART_SetConfig+0x384>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021dc:	4498      	add	r8, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	461d      	mov	r5, r3
 80021e2:	f04f 0600 	mov.w	r6, #0
 80021e6:	46a9      	mov	r9, r5
 80021e8:	46b2      	mov	sl, r6
 80021ea:	eb19 0309 	adds.w	r3, r9, r9
 80021ee:	eb4a 040a 	adc.w	r4, sl, sl
 80021f2:	4699      	mov	r9, r3
 80021f4:	46a2      	mov	sl, r4
 80021f6:	eb19 0905 	adds.w	r9, r9, r5
 80021fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800220a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800220e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002212:	4689      	mov	r9, r1
 8002214:	4692      	mov	sl, r2
 8002216:	eb19 0005 	adds.w	r0, r9, r5
 800221a:	eb4a 0106 	adc.w	r1, sl, r6
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	461d      	mov	r5, r3
 8002224:	f04f 0600 	mov.w	r6, #0
 8002228:	196b      	adds	r3, r5, r5
 800222a:	eb46 0406 	adc.w	r4, r6, r6
 800222e:	461a      	mov	r2, r3
 8002230:	4623      	mov	r3, r4
 8002232:	f7fe f825 	bl	8000280 <__aeabi_uldivmod>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	461a      	mov	r2, r3
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <UART_SetConfig+0x384>)
 800223e:	fba3 1302 	umull	r1, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2164      	movs	r1, #100	; 0x64
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	3332      	adds	r3, #50	; 0x32
 8002250:	4a65      	ldr	r2, [pc, #404]	; (80023e8 <UART_SetConfig+0x384>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 0207 	and.w	r2, r3, #7
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4442      	add	r2, r8
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e26f      	b.n	8002746 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002266:	f7ff fb35 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 800226a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	461d      	mov	r5, r3
 8002270:	f04f 0600 	mov.w	r6, #0
 8002274:	46a8      	mov	r8, r5
 8002276:	46b1      	mov	r9, r6
 8002278:	eb18 0308 	adds.w	r3, r8, r8
 800227c:	eb49 0409 	adc.w	r4, r9, r9
 8002280:	4698      	mov	r8, r3
 8002282:	46a1      	mov	r9, r4
 8002284:	eb18 0805 	adds.w	r8, r8, r5
 8002288:	eb49 0906 	adc.w	r9, r9, r6
 800228c:	f04f 0100 	mov.w	r1, #0
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002298:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800229c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022a0:	4688      	mov	r8, r1
 80022a2:	4691      	mov	r9, r2
 80022a4:	eb18 0005 	adds.w	r0, r8, r5
 80022a8:	eb49 0106 	adc.w	r1, r9, r6
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	461d      	mov	r5, r3
 80022b2:	f04f 0600 	mov.w	r6, #0
 80022b6:	196b      	adds	r3, r5, r5
 80022b8:	eb46 0406 	adc.w	r4, r6, r6
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	f7fd ffde 	bl	8000280 <__aeabi_uldivmod>
 80022c4:	4603      	mov	r3, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <UART_SetConfig+0x384>)
 80022cc:	fba3 2302 	umull	r2, r3, r3, r2
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	461d      	mov	r5, r3
 80022da:	f04f 0600 	mov.w	r6, #0
 80022de:	46a9      	mov	r9, r5
 80022e0:	46b2      	mov	sl, r6
 80022e2:	eb19 0309 	adds.w	r3, r9, r9
 80022e6:	eb4a 040a 	adc.w	r4, sl, sl
 80022ea:	4699      	mov	r9, r3
 80022ec:	46a2      	mov	sl, r4
 80022ee:	eb19 0905 	adds.w	r9, r9, r5
 80022f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800230a:	4689      	mov	r9, r1
 800230c:	4692      	mov	sl, r2
 800230e:	eb19 0005 	adds.w	r0, r9, r5
 8002312:	eb4a 0106 	adc.w	r1, sl, r6
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	461d      	mov	r5, r3
 800231c:	f04f 0600 	mov.w	r6, #0
 8002320:	196b      	adds	r3, r5, r5
 8002322:	eb46 0406 	adc.w	r4, r6, r6
 8002326:	461a      	mov	r2, r3
 8002328:	4623      	mov	r3, r4
 800232a:	f7fd ffa9 	bl	8000280 <__aeabi_uldivmod>
 800232e:	4603      	mov	r3, r0
 8002330:	460c      	mov	r4, r1
 8002332:	461a      	mov	r2, r3
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <UART_SetConfig+0x384>)
 8002336:	fba3 1302 	umull	r1, r3, r3, r2
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2164      	movs	r1, #100	; 0x64
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	3332      	adds	r3, #50	; 0x32
 8002348:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <UART_SetConfig+0x384>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002356:	4498      	add	r8, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	461d      	mov	r5, r3
 800235c:	f04f 0600 	mov.w	r6, #0
 8002360:	46a9      	mov	r9, r5
 8002362:	46b2      	mov	sl, r6
 8002364:	eb19 0309 	adds.w	r3, r9, r9
 8002368:	eb4a 040a 	adc.w	r4, sl, sl
 800236c:	4699      	mov	r9, r3
 800236e:	46a2      	mov	sl, r4
 8002370:	eb19 0905 	adds.w	r9, r9, r5
 8002374:	eb4a 0a06 	adc.w	sl, sl, r6
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800238c:	4689      	mov	r9, r1
 800238e:	4692      	mov	sl, r2
 8002390:	eb19 0005 	adds.w	r0, r9, r5
 8002394:	eb4a 0106 	adc.w	r1, sl, r6
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	461d      	mov	r5, r3
 800239e:	f04f 0600 	mov.w	r6, #0
 80023a2:	196b      	adds	r3, r5, r5
 80023a4:	eb46 0406 	adc.w	r4, r6, r6
 80023a8:	461a      	mov	r2, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	f7fd ff68 	bl	8000280 <__aeabi_uldivmod>
 80023b0:	4603      	mov	r3, r0
 80023b2:	460c      	mov	r4, r1
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <UART_SetConfig+0x384>)
 80023b8:	fba3 1302 	umull	r1, r3, r3, r2
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	2164      	movs	r1, #100	; 0x64
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	3332      	adds	r3, #50	; 0x32
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <UART_SetConfig+0x384>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	f003 0207 	and.w	r2, r3, #7
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4442      	add	r2, r8
 80023dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80023de:	e1b2      	b.n	8002746 <UART_SetConfig+0x6e2>
 80023e0:	40011000 	.word	0x40011000
 80023e4:	40011400 	.word	0x40011400
 80023e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4ad7      	ldr	r2, [pc, #860]	; (8002750 <UART_SetConfig+0x6ec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d005      	beq.n	8002402 <UART_SetConfig+0x39e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4ad6      	ldr	r2, [pc, #856]	; (8002754 <UART_SetConfig+0x6f0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	f040 80d1 	bne.w	80025a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002402:	f7ff fa7b 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 8002406:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	469a      	mov	sl, r3
 800240c:	f04f 0b00 	mov.w	fp, #0
 8002410:	46d0      	mov	r8, sl
 8002412:	46d9      	mov	r9, fp
 8002414:	eb18 0308 	adds.w	r3, r8, r8
 8002418:	eb49 0409 	adc.w	r4, r9, r9
 800241c:	4698      	mov	r8, r3
 800241e:	46a1      	mov	r9, r4
 8002420:	eb18 080a 	adds.w	r8, r8, sl
 8002424:	eb49 090b 	adc.w	r9, r9, fp
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002434:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002438:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800243c:	4688      	mov	r8, r1
 800243e:	4691      	mov	r9, r2
 8002440:	eb1a 0508 	adds.w	r5, sl, r8
 8002444:	eb4b 0609 	adc.w	r6, fp, r9
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4619      	mov	r1, r3
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	f04f 0400 	mov.w	r4, #0
 800245a:	0094      	lsls	r4, r2, #2
 800245c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002460:	008b      	lsls	r3, r1, #2
 8002462:	461a      	mov	r2, r3
 8002464:	4623      	mov	r3, r4
 8002466:	4628      	mov	r0, r5
 8002468:	4631      	mov	r1, r6
 800246a:	f7fd ff09 	bl	8000280 <__aeabi_uldivmod>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	461a      	mov	r2, r3
 8002474:	4bb8      	ldr	r3, [pc, #736]	; (8002758 <UART_SetConfig+0x6f4>)
 8002476:	fba3 2302 	umull	r2, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	469b      	mov	fp, r3
 8002484:	f04f 0c00 	mov.w	ip, #0
 8002488:	46d9      	mov	r9, fp
 800248a:	46e2      	mov	sl, ip
 800248c:	eb19 0309 	adds.w	r3, r9, r9
 8002490:	eb4a 040a 	adc.w	r4, sl, sl
 8002494:	4699      	mov	r9, r3
 8002496:	46a2      	mov	sl, r4
 8002498:	eb19 090b 	adds.w	r9, r9, fp
 800249c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024b4:	4689      	mov	r9, r1
 80024b6:	4692      	mov	sl, r2
 80024b8:	eb1b 0509 	adds.w	r5, fp, r9
 80024bc:	eb4c 060a 	adc.w	r6, ip, sl
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	f04f 0400 	mov.w	r4, #0
 80024d2:	0094      	lsls	r4, r2, #2
 80024d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024d8:	008b      	lsls	r3, r1, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	4623      	mov	r3, r4
 80024de:	4628      	mov	r0, r5
 80024e0:	4631      	mov	r1, r6
 80024e2:	f7fd fecd 	bl	8000280 <__aeabi_uldivmod>
 80024e6:	4603      	mov	r3, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b9a      	ldr	r3, [pc, #616]	; (8002758 <UART_SetConfig+0x6f4>)
 80024ee:	fba3 1302 	umull	r1, r3, r3, r2
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2164      	movs	r1, #100	; 0x64
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	3332      	adds	r3, #50	; 0x32
 8002500:	4a95      	ldr	r2, [pc, #596]	; (8002758 <UART_SetConfig+0x6f4>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250c:	4498      	add	r8, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	469b      	mov	fp, r3
 8002512:	f04f 0c00 	mov.w	ip, #0
 8002516:	46d9      	mov	r9, fp
 8002518:	46e2      	mov	sl, ip
 800251a:	eb19 0309 	adds.w	r3, r9, r9
 800251e:	eb4a 040a 	adc.w	r4, sl, sl
 8002522:	4699      	mov	r9, r3
 8002524:	46a2      	mov	sl, r4
 8002526:	eb19 090b 	adds.w	r9, r9, fp
 800252a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800253a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800253e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002542:	4689      	mov	r9, r1
 8002544:	4692      	mov	sl, r2
 8002546:	eb1b 0509 	adds.w	r5, fp, r9
 800254a:	eb4c 060a 	adc.w	r6, ip, sl
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	0094      	lsls	r4, r2, #2
 8002562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002566:	008b      	lsls	r3, r1, #2
 8002568:	461a      	mov	r2, r3
 800256a:	4623      	mov	r3, r4
 800256c:	4628      	mov	r0, r5
 800256e:	4631      	mov	r1, r6
 8002570:	f7fd fe86 	bl	8000280 <__aeabi_uldivmod>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	461a      	mov	r2, r3
 800257a:	4b77      	ldr	r3, [pc, #476]	; (8002758 <UART_SetConfig+0x6f4>)
 800257c:	fba3 1302 	umull	r1, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	2164      	movs	r1, #100	; 0x64
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	3332      	adds	r3, #50	; 0x32
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <UART_SetConfig+0x6f4>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	f003 020f 	and.w	r2, r3, #15
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4442      	add	r2, r8
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	e0d0      	b.n	8002746 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80025a4:	f7ff f996 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 80025a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	469a      	mov	sl, r3
 80025ae:	f04f 0b00 	mov.w	fp, #0
 80025b2:	46d0      	mov	r8, sl
 80025b4:	46d9      	mov	r9, fp
 80025b6:	eb18 0308 	adds.w	r3, r8, r8
 80025ba:	eb49 0409 	adc.w	r4, r9, r9
 80025be:	4698      	mov	r8, r3
 80025c0:	46a1      	mov	r9, r4
 80025c2:	eb18 080a 	adds.w	r8, r8, sl
 80025c6:	eb49 090b 	adc.w	r9, r9, fp
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025de:	4688      	mov	r8, r1
 80025e0:	4691      	mov	r9, r2
 80025e2:	eb1a 0508 	adds.w	r5, sl, r8
 80025e6:	eb4b 0609 	adc.w	r6, fp, r9
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4619      	mov	r1, r3
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	0094      	lsls	r4, r2, #2
 80025fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002602:	008b      	lsls	r3, r1, #2
 8002604:	461a      	mov	r2, r3
 8002606:	4623      	mov	r3, r4
 8002608:	4628      	mov	r0, r5
 800260a:	4631      	mov	r1, r6
 800260c:	f7fd fe38 	bl	8000280 <__aeabi_uldivmod>
 8002610:	4603      	mov	r3, r0
 8002612:	460c      	mov	r4, r1
 8002614:	461a      	mov	r2, r3
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <UART_SetConfig+0x6f4>)
 8002618:	fba3 2302 	umull	r2, r3, r3, r2
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	469b      	mov	fp, r3
 8002626:	f04f 0c00 	mov.w	ip, #0
 800262a:	46d9      	mov	r9, fp
 800262c:	46e2      	mov	sl, ip
 800262e:	eb19 0309 	adds.w	r3, r9, r9
 8002632:	eb4a 040a 	adc.w	r4, sl, sl
 8002636:	4699      	mov	r9, r3
 8002638:	46a2      	mov	sl, r4
 800263a:	eb19 090b 	adds.w	r9, r9, fp
 800263e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800264e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002656:	4689      	mov	r9, r1
 8002658:	4692      	mov	sl, r2
 800265a:	eb1b 0509 	adds.w	r5, fp, r9
 800265e:	eb4c 060a 	adc.w	r6, ip, sl
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	0094      	lsls	r4, r2, #2
 8002676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800267a:	008b      	lsls	r3, r1, #2
 800267c:	461a      	mov	r2, r3
 800267e:	4623      	mov	r3, r4
 8002680:	4628      	mov	r0, r5
 8002682:	4631      	mov	r1, r6
 8002684:	f7fd fdfc 	bl	8000280 <__aeabi_uldivmod>
 8002688:	4603      	mov	r3, r0
 800268a:	460c      	mov	r4, r1
 800268c:	461a      	mov	r2, r3
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <UART_SetConfig+0x6f4>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <UART_SetConfig+0x6f4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ae:	4498      	add	r8, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	469b      	mov	fp, r3
 80026b4:	f04f 0c00 	mov.w	ip, #0
 80026b8:	46d9      	mov	r9, fp
 80026ba:	46e2      	mov	sl, ip
 80026bc:	eb19 0309 	adds.w	r3, r9, r9
 80026c0:	eb4a 040a 	adc.w	r4, sl, sl
 80026c4:	4699      	mov	r9, r3
 80026c6:	46a2      	mov	sl, r4
 80026c8:	eb19 090b 	adds.w	r9, r9, fp
 80026cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026e4:	4689      	mov	r9, r1
 80026e6:	4692      	mov	sl, r2
 80026e8:	eb1b 0509 	adds.w	r5, fp, r9
 80026ec:	eb4c 060a 	adc.w	r6, ip, sl
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	f04f 0400 	mov.w	r4, #0
 8002702:	0094      	lsls	r4, r2, #2
 8002704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002708:	008b      	lsls	r3, r1, #2
 800270a:	461a      	mov	r2, r3
 800270c:	4623      	mov	r3, r4
 800270e:	4628      	mov	r0, r5
 8002710:	4631      	mov	r1, r6
 8002712:	f7fd fdb5 	bl	8000280 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	461a      	mov	r2, r3
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <UART_SetConfig+0x6f4>)
 800271e:	fba3 1302 	umull	r1, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2164      	movs	r1, #100	; 0x64
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	3332      	adds	r3, #50	; 0x32
 8002730:	4a09      	ldr	r2, [pc, #36]	; (8002758 <UART_SetConfig+0x6f4>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4442      	add	r2, r8
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	e7ff      	b.n	8002746 <UART_SetConfig+0x6e2>
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	51eb851f 	.word	0x51eb851f

0800275c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 0208 	add.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002774:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f103 0208 	add.w	r2, r3, #8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0208 	add.w	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	601a      	str	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002814:	d103      	bne.n	800281e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e00c      	b.n	8002838 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3308      	adds	r3, #8
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e002      	b.n	800282c <vListInsert+0x2e>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	d2f6      	bcs.n	8002826 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6892      	ldr	r2, [r2, #8]
 8002886:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6852      	ldr	r2, [r2, #4]
 8002890:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	d103      	bne.n	80028a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	1e5a      	subs	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b090      	sub	sp, #64	; 0x40
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
    char name[20];
    strcpy(name,pcName);
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 f9c2 	bl	8003c64 <strcpy>
    strcat(name,"\n\r");
 80028e0:	f107 0310 	add.w	r3, r7, #16
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fc73 	bl	80001d0 <strlen>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4413      	add	r3, r2
 80028f4:	4a25      	ldr	r2, [pc, #148]	; (800298c <xTaskCreate+0xc8>)
 80028f6:	8811      	ldrh	r1, [r2, #0]
 80028f8:	7892      	ldrb	r2, [r2, #2]
 80028fa:	8019      	strh	r1, [r3, #0]
 80028fc:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2,(uint8_t *)name,strlen(name),0xffff);
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fc64 	bl	80001d0 <strlen>
 8002908:	4603      	mov	r3, r0
 800290a:	b29a      	uxth	r2, r3
 800290c:	f107 0110 	add.w	r1, r7, #16
 8002910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002914:	481e      	ldr	r0, [pc, #120]	; (8002990 <xTaskCreate+0xcc>)
 8002916:	f7ff fac2 	bl	8001e9e <HAL_UART_Transmit>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 ff28 	bl	8003774 <pvPortMalloc>
 8002924:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxStack != NULL )
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <xTaskCreate+0x86>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800292c:	2058      	movs	r0, #88	; 0x58
 800292e:	f000 ff21 	bl	8003774 <pvPortMalloc>
 8002932:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxNewTCB != NULL )
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <xTaskCreate+0x7e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
 8002940:	e005      	b.n	800294e <xTaskCreate+0x8a>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002944:	f001 f804 	bl	8003950 <vPortFree>
 8002948:	e001      	b.n	800294e <xTaskCreate+0x8a>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <xTaskCreate+0xb8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	2300      	movs	r3, #0
 8002958:	9303      	str	r3, [sp, #12]
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f812 	bl	8002994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002972:	f000 f89d 	bl	8002ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002976:	2301      	movs	r3, #1
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
 800297a:	e002      	b.n	8002982 <xTaskCreate+0xbe>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		return xReturn;
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 8002984:	4618      	mov	r0, r3
 8002986:	3730      	adds	r7, #48	; 0x30
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	08004484 	.word	0x08004484
 8002990:	20001688 	.word	0x20001688

08002994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	461a      	mov	r2, r3
 80029ac:	21a5      	movs	r1, #165	; 0xa5
 80029ae:	f001 f930 	bl	8003c12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029bc:	3b01      	subs	r3, #1
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f023 0307 	bic.w	r3, r3, #7
 80029ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e7fe      	b.n	80029e8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01f      	beq.n	8002a30 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	e012      	b.n	8002a1c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	7819      	ldrb	r1, [r3, #0]
 80029fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	3334      	adds	r3, #52	; 0x34
 8002a06:	460a      	mov	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	d9e9      	bls.n	80029f6 <prvInitialiseNewTask+0x62>
 8002a22:	e000      	b.n	8002a26 <prvInitialiseNewTask+0x92>
			{
				break;
 8002a24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a2e:	e003      	b.n	8002a38 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	2b0e      	cmp	r3, #14
 8002a3c:	d901      	bls.n	8002a42 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a3e:	230e      	movs	r3, #14
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a4c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	2200      	movs	r2, #0
 8002a52:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	3304      	adds	r3, #4
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fe9f 	bl	800279c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	3318      	adds	r3, #24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fe9a 	bl	800279c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	f1c3 020f 	rsb	r2, r3, #15
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	2200      	movs	r2, #0
 8002a82:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	68f9      	ldr	r1, [r7, #12]
 8002a90:	69b8      	ldr	r0, [r7, #24]
 8002a92:	f000 fc59 	bl	8003348 <pxPortInitialiseStack>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aa8:	bf00      	nop
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ab8:	f000 fd80 	bl	80035bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <prvAddNewTaskToReadyList+0xc0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	4a2b      	ldr	r2, [pc, #172]	; (8002b70 <prvAddNewTaskToReadyList+0xc0>)
 8002ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <prvAddNewTaskToReadyList+0xc4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ace:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <prvAddNewTaskToReadyList+0xc4>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <prvAddNewTaskToReadyList+0xc0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d110      	bne.n	8002afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002adc:	f000 fb32 	bl	8003144 <prvInitialiseTaskLists>
 8002ae0:	e00d      	b.n	8002afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ae2:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <prvAddNewTaskToReadyList+0xc8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <prvAddNewTaskToReadyList+0xc4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d802      	bhi.n	8002afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002af8:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <prvAddNewTaskToReadyList+0xc4>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002afe:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <prvAddNewTaskToReadyList+0xcc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <prvAddNewTaskToReadyList+0xcc>)
 8002b06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <prvAddNewTaskToReadyList+0xcc>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <prvAddNewTaskToReadyList+0xd0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <prvAddNewTaskToReadyList+0xd0>)
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <prvAddNewTaskToReadyList+0xd4>)
 8002b30:	441a      	add	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3304      	adds	r3, #4
 8002b36:	4619      	mov	r1, r3
 8002b38:	4610      	mov	r0, r2
 8002b3a:	f7ff fe3c 	bl	80027b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b3e:	f000 fd6b 	bl	8003618 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <prvAddNewTaskToReadyList+0xc8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <prvAddNewTaskToReadyList+0xc4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <prvAddNewTaskToReadyList+0xd8>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000238 	.word	0x20000238
 8002b74:	20000098 	.word	0x20000098
 8002b78:	20000244 	.word	0x20000244
 8002b7c:	20000254 	.word	0x20000254
 8002b80:	20000240 	.word	0x20000240
 8002b84:	2000009c 	.word	0x2000009c
 8002b88:	e000ed04 	.word	0xe000ed04

08002b8c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002b94:	f000 fd12 	bl	80035bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <vTaskDelete+0x18>
 8002b9e:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <vTaskDelete+0xf4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	e000      	b.n	8002ba6 <vTaskDelete+0x1a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3304      	adds	r3, #4
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe5f 	bl	8002870 <uxListRemove>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d115      	bne.n	8002be4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4931      	ldr	r1, [pc, #196]	; (8002c84 <vTaskDelete+0xf8>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <vTaskDelete+0x58>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <vTaskDelete+0xfc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4013      	ands	r3, r2
 8002be0:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <vTaskDelete+0xfc>)
 8002be2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3318      	adds	r3, #24
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fe3d 	bl	8002870 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <vTaskDelete+0x100>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <vTaskDelete+0x100>)
 8002bfe:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <vTaskDelete+0xf4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10b      	bne.n	8002c22 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	481f      	ldr	r0, [pc, #124]	; (8002c90 <vTaskDelete+0x104>)
 8002c12:	f7ff fdd0 	bl	80027b6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <vTaskDelete+0x108>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <vTaskDelete+0x108>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e009      	b.n	8002c36 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <vTaskDelete+0x10c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <vTaskDelete+0x10c>)
 8002c2a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 faf5 	bl	800321c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002c32:	f000 fb03 	bl	800323c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002c36:	f000 fcef 	bl	8003618 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <vTaskDelete+0x110>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01a      	beq.n	8002c78 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <vTaskDelete+0xf4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d115      	bne.n	8002c78 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <vTaskDelete+0x114>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <vTaskDelete+0xdc>
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	e7fe      	b.n	8002c66 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <vTaskDelete+0x118>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000098 	.word	0x20000098
 8002c84:	2000009c 	.word	0x2000009c
 8002c88:	20000240 	.word	0x20000240
 8002c8c:	20000254 	.word	0x20000254
 8002c90:	2000020c 	.word	0x2000020c
 8002c94:	20000220 	.word	0x20000220
 8002c98:	20000238 	.word	0x20000238
 8002c9c:	20000244 	.word	0x20000244
 8002ca0:	20000260 	.word	0x20000260
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <vTaskDelay+0x60>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <vTaskDelay+0x2e>
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	e7fe      	b.n	8002cd4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002cd6:	f000 f861 	bl	8002d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 facd 	bl	800327c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ce2:	f000 f869 	bl	8002db8 <xTaskResumeAll>
 8002ce6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <vTaskDelay+0x64>)
 8002cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000260 	.word	0x20000260
 8002d0c:	e000ed04 	.word	0xe000ed04

08002d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <vTaskStartScheduler+0x74>)
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2282      	movs	r2, #130	; 0x82
 8002d22:	4919      	ldr	r1, [pc, #100]	; (8002d88 <vTaskStartScheduler+0x78>)
 8002d24:	4819      	ldr	r0, [pc, #100]	; (8002d8c <vTaskStartScheduler+0x7c>)
 8002d26:	f7ff fdcd 	bl	80028c4 <xTaskCreate>
 8002d2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d115      	bne.n	8002d5e <vTaskStartScheduler+0x4e>
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <vTaskStartScheduler+0x80>)
 8002d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <vTaskStartScheduler+0x84>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <vTaskStartScheduler+0x88>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d58:	f000 fb82 	bl	8003460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d5c:	e00d      	b.n	8002d7a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d64:	d109      	bne.n	8002d7a <vTaskStartScheduler+0x6a>
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	e7fe      	b.n	8002d78 <vTaskStartScheduler+0x68>
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000025c 	.word	0x2000025c
 8002d88:	08004488 	.word	0x08004488
 8002d8c:	08003115 	.word	0x08003115
 8002d90:	20000258 	.word	0x20000258
 8002d94:	20000244 	.word	0x20000244
 8002d98:	2000023c 	.word	0x2000023c

08002d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <vTaskSuspendAll+0x18>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <vTaskSuspendAll+0x18>)
 8002da8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	20000260 	.word	0x20000260

08002db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dc6:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <xTaskResumeAll+0x114>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <xTaskResumeAll+0x2a>
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	e7fe      	b.n	8002de0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002de2:	f000 fbeb 	bl	80035bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <xTaskResumeAll+0x114>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	4a37      	ldr	r2, [pc, #220]	; (8002ecc <xTaskResumeAll+0x114>)
 8002dee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <xTaskResumeAll+0x114>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d161      	bne.n	8002ebc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <xTaskResumeAll+0x118>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05d      	beq.n	8002ebc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e00:	e02e      	b.n	8002e60 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e02:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <xTaskResumeAll+0x11c>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fd2e 	bl	8002870 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fd29 	bl	8002870 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	2201      	movs	r2, #1
 8002e24:	409a      	lsls	r2, r3
 8002e26:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <xTaskResumeAll+0x120>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ed8 <xTaskResumeAll+0x120>)
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <xTaskResumeAll+0x124>)
 8002e3e:	441a      	add	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f7ff fcb5 	bl	80027b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e50:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <xTaskResumeAll+0x128>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <xTaskResumeAll+0x12c>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <xTaskResumeAll+0x11c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1cc      	bne.n	8002e02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e6e:	f000 f9e5 	bl	800323c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <xTaskResumeAll+0x130>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e7e:	f000 f837 	bl	8002ef0 <xTaskIncrementTick>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <xTaskResumeAll+0x12c>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f1      	bne.n	8002e7e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <xTaskResumeAll+0x130>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <xTaskResumeAll+0x12c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <xTaskResumeAll+0x134>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ebc:	f000 fbac 	bl	8003618 <vPortExitCritical>

	return xAlreadyYielded;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000260 	.word	0x20000260
 8002ed0:	20000238 	.word	0x20000238
 8002ed4:	200001f8 	.word	0x200001f8
 8002ed8:	20000240 	.word	0x20000240
 8002edc:	2000009c 	.word	0x2000009c
 8002ee0:	20000098 	.word	0x20000098
 8002ee4:	2000024c 	.word	0x2000024c
 8002ee8:	20000248 	.word	0x20000248
 8002eec:	e000ed04 	.word	0xe000ed04

08002ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002efa:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <xTaskIncrementTick+0x144>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 8087 	bne.w	8003012 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f04:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <xTaskIncrementTick+0x148>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f0c:	4a4a      	ldr	r2, [pc, #296]	; (8003038 <xTaskIncrementTick+0x148>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11f      	bne.n	8002f58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f18:	4b48      	ldr	r3, [pc, #288]	; (800303c <xTaskIncrementTick+0x14c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <xTaskIncrementTick+0x46>
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	e7fe      	b.n	8002f34 <xTaskIncrementTick+0x44>
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <xTaskIncrementTick+0x14c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <xTaskIncrementTick+0x150>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3e      	ldr	r2, [pc, #248]	; (800303c <xTaskIncrementTick+0x14c>)
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4a3e      	ldr	r2, [pc, #248]	; (8003040 <xTaskIncrementTick+0x150>)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <xTaskIncrementTick+0x154>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <xTaskIncrementTick+0x154>)
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	f000 f972 	bl	800323c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <xTaskIncrementTick+0x158>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d348      	bcc.n	8002ff4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f62:	4b36      	ldr	r3, [pc, #216]	; (800303c <xTaskIncrementTick+0x14c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6c:	4b36      	ldr	r3, [pc, #216]	; (8003048 <xTaskIncrementTick+0x158>)
 8002f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f72:	601a      	str	r2, [r3, #0]
					break;
 8002f74:	e03e      	b.n	8002ff4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <xTaskIncrementTick+0x14c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d203      	bcs.n	8002f96 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f8e:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <xTaskIncrementTick+0x158>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f94:	e02e      	b.n	8002ff4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fc68 	bl	8002870 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3318      	adds	r3, #24
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fc5f 	bl	8002870 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	4b24      	ldr	r3, [pc, #144]	; (800304c <xTaskIncrementTick+0x15c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <xTaskIncrementTick+0x15c>)
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <xTaskIncrementTick+0x160>)
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7ff fbeb 	bl	80027b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <xTaskIncrementTick+0x164>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d3b9      	bcc.n	8002f62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff2:	e7b6      	b.n	8002f62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <xTaskIncrementTick+0x164>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	4915      	ldr	r1, [pc, #84]	; (8003050 <xTaskIncrementTick+0x160>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d907      	bls.n	800301c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e004      	b.n	800301c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <xTaskIncrementTick+0x168>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <xTaskIncrementTick+0x168>)
 800301a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <xTaskIncrementTick+0x16c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003028:	697b      	ldr	r3, [r7, #20]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000260 	.word	0x20000260
 8003038:	2000023c 	.word	0x2000023c
 800303c:	200001f0 	.word	0x200001f0
 8003040:	200001f4 	.word	0x200001f4
 8003044:	20000250 	.word	0x20000250
 8003048:	20000258 	.word	0x20000258
 800304c:	20000240 	.word	0x20000240
 8003050:	2000009c 	.word	0x2000009c
 8003054:	20000098 	.word	0x20000098
 8003058:	20000248 	.word	0x20000248
 800305c:	2000024c 	.word	0x2000024c

08003060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <vTaskSwitchContext+0xa0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <vTaskSwitchContext+0xa4>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003074:	e03e      	b.n	80030f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <vTaskSwitchContext+0xa4>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <vTaskSwitchContext+0xa8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800308a:	7afb      	ldrb	r3, [r7, #11]
 800308c:	f1c3 031f 	rsb	r3, r3, #31
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	491e      	ldr	r1, [pc, #120]	; (800310c <vTaskSwitchContext+0xac>)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	e7fe      	b.n	80030b8 <vTaskSwitchContext+0x58>
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <vTaskSwitchContext+0xac>)
 80030c6:	4413      	add	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3308      	adds	r3, #8
 80030dc:	429a      	cmp	r2, r3
 80030de:	d104      	bne.n	80030ea <vTaskSwitchContext+0x8a>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <vTaskSwitchContext+0xb0>)
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	20000260 	.word	0x20000260
 8003104:	2000024c 	.word	0x2000024c
 8003108:	20000240 	.word	0x20000240
 800310c:	2000009c 	.word	0x2000009c
 8003110:	20000098 	.word	0x20000098

08003114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800311c:	f000 f852 	bl	80031c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <prvIdleTask+0x28>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d9f9      	bls.n	800311c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <prvIdleTask+0x2c>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003138:	e7f0      	b.n	800311c <prvIdleTask+0x8>
 800313a:	bf00      	nop
 800313c:	2000009c 	.word	0x2000009c
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	e00c      	b.n	800316a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <prvInitialiseTaskLists+0x60>)
 800315c:	4413      	add	r3, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fafc 	bl	800275c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3301      	adds	r3, #1
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0e      	cmp	r3, #14
 800316e:	d9ef      	bls.n	8003150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003170:	480d      	ldr	r0, [pc, #52]	; (80031a8 <prvInitialiseTaskLists+0x64>)
 8003172:	f7ff faf3 	bl	800275c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003176:	480d      	ldr	r0, [pc, #52]	; (80031ac <prvInitialiseTaskLists+0x68>)
 8003178:	f7ff faf0 	bl	800275c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <prvInitialiseTaskLists+0x6c>)
 800317e:	f7ff faed 	bl	800275c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003182:	480c      	ldr	r0, [pc, #48]	; (80031b4 <prvInitialiseTaskLists+0x70>)
 8003184:	f7ff faea 	bl	800275c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003188:	480b      	ldr	r0, [pc, #44]	; (80031b8 <prvInitialiseTaskLists+0x74>)
 800318a:	f7ff fae7 	bl	800275c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <prvInitialiseTaskLists+0x78>)
 8003190:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <prvInitialiseTaskLists+0x64>)
 8003192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <prvInitialiseTaskLists+0x7c>)
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <prvInitialiseTaskLists+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000009c 	.word	0x2000009c
 80031a8:	200001c8 	.word	0x200001c8
 80031ac:	200001dc 	.word	0x200001dc
 80031b0:	200001f8 	.word	0x200001f8
 80031b4:	2000020c 	.word	0x2000020c
 80031b8:	20000224 	.word	0x20000224
 80031bc:	200001f0 	.word	0x200001f0
 80031c0:	200001f4 	.word	0x200001f4

080031c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031ca:	e019      	b.n	8003200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031cc:	f000 f9f6 	bl	80035bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <prvCheckTasksWaitingTermination+0x4c>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fb47 	bl	8002870 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <prvCheckTasksWaitingTermination+0x50>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <prvCheckTasksWaitingTermination+0x50>)
 80031ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <prvCheckTasksWaitingTermination+0x54>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <prvCheckTasksWaitingTermination+0x54>)
 80031f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031f6:	f000 fa0f 	bl	8003618 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f80e 	bl	800321c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <prvCheckTasksWaitingTermination+0x54>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e1      	bne.n	80031cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2000020c 	.word	0x2000020c
 8003214:	20000238 	.word	0x20000238
 8003218:	20000220 	.word	0x20000220

0800321c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fb91 	bl	8003950 <vPortFree>
			vPortFree( pxTCB );
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fb8e 	bl	8003950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <prvResetNextTaskUnblockTime+0x38>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d104      	bne.n	8003256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <prvResetNextTaskUnblockTime+0x3c>)
 800324e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003254:	e008      	b.n	8003268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <prvResetNextTaskUnblockTime+0x38>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <prvResetNextTaskUnblockTime+0x3c>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	200001f0 	.word	0x200001f0
 8003278:	20000258 	.word	0x20000258

0800327c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3304      	adds	r3, #4
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff faec 	bl	8002870 <uxListRemove>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2201      	movs	r2, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4013      	ands	r3, r2
 80032b2:	4a20      	ldr	r2, [pc, #128]	; (8003334 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032bc:	d10a      	bne.n	80032d4 <prvAddCurrentTaskToDelayedList+0x58>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3304      	adds	r3, #4
 80032ca:	4619      	mov	r1, r3
 80032cc:	481a      	ldr	r0, [pc, #104]	; (8003338 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032ce:	f7ff fa72 	bl	80027b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032d2:	e026      	b.n	8003322 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d209      	bcs.n	8003300 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <prvAddCurrentTaskToDelayedList+0xc0>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f7ff fa80 	bl	80027fe <vListInsert>
}
 80032fe:	e010      	b.n	8003322 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3304      	adds	r3, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f7ff fa76 	bl	80027fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	d202      	bcs.n	8003322 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <prvAddCurrentTaskToDelayedList+0xc8>)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6013      	str	r3, [r2, #0]
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000023c 	.word	0x2000023c
 8003330:	20000098 	.word	0x20000098
 8003334:	20000240 	.word	0x20000240
 8003338:	20000224 	.word	0x20000224
 800333c:	200001f4 	.word	0x200001f4
 8003340:	200001f0 	.word	0x200001f0
 8003344:	20000258 	.word	0x20000258

08003348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3b04      	subs	r3, #4
 8003358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3b04      	subs	r3, #4
 8003366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3b04      	subs	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003378:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <pxPortInitialiseStack+0x64>)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3b14      	subs	r3, #20
 8003382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3b04      	subs	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f06f 0202 	mvn.w	r2, #2
 8003396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3b20      	subs	r3, #32
 800339c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	080033b1 	.word	0x080033b1

080033b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <prvTaskExitError+0x50>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c2:	d009      	beq.n	80033d8 <prvTaskExitError+0x28>
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e7fe      	b.n	80033d6 <prvTaskExitError+0x26>
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80033ea:	bf00      	nop
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0fc      	beq.n	80033ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2000000c 	.word	0x2000000c
	...

08003410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <pxCurrentTCBConst2>)
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	6808      	ldr	r0, [r1, #0]
 8003416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341a:	f380 8809 	msr	PSP, r0
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f380 8811 	msr	BASEPRI, r0
 800342a:	4770      	bx	lr
 800342c:	f3af 8000 	nop.w

08003430 <pxCurrentTCBConst2>:
 8003430:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop

08003438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003438:	4808      	ldr	r0, [pc, #32]	; (800345c <prvPortStartFirstTask+0x24>)
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	6800      	ldr	r0, [r0, #0]
 800343e:	f380 8808 	msr	MSP, r0
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f380 8814 	msr	CONTROL, r0
 800344a:	b662      	cpsie	i
 800344c:	b661      	cpsie	f
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	df00      	svc	0
 8003458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800345a:	bf00      	nop
 800345c:	e000ed08 	.word	0xe000ed08

08003460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003466:	4b4c      	ldr	r3, [pc, #304]	; (8003598 <xPortStartScheduler+0x138>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a4c      	ldr	r2, [pc, #304]	; (800359c <xPortStartScheduler+0x13c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d109      	bne.n	8003484 <xPortStartScheduler+0x24>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e7fe      	b.n	8003482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003484:	4b44      	ldr	r3, [pc, #272]	; (8003598 <xPortStartScheduler+0x138>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a45      	ldr	r2, [pc, #276]	; (80035a0 <xPortStartScheduler+0x140>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d109      	bne.n	80034a2 <xPortStartScheduler+0x42>
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e7fe      	b.n	80034a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034a2:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <xPortStartScheduler+0x144>)
 80034a4:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <xPortStartScheduler+0x148>)
 80034c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <xPortStartScheduler+0x14c>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d0:	e009      	b.n	80034e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <xPortStartScheduler+0x14c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4a34      	ldr	r2, [pc, #208]	; (80035ac <xPortStartScheduler+0x14c>)
 80034da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d0ef      	beq.n	80034d2 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80034f2:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <xPortStartScheduler+0x14c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d009      	beq.n	8003512 <xPortStartScheduler+0xb2>
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e7fe      	b.n	8003510 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <xPortStartScheduler+0x14c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1c3 0307 	rsb	r3, r3, #7
 800351a:	2b04      	cmp	r3, #4
 800351c:	d009      	beq.n	8003532 <xPortStartScheduler+0xd2>
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e7fe      	b.n	8003530 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003532:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <xPortStartScheduler+0x14c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <xPortStartScheduler+0x14c>)
 800353a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <xPortStartScheduler+0x14c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003544:	4a19      	ldr	r2, [pc, #100]	; (80035ac <xPortStartScheduler+0x14c>)
 8003546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <xPortStartScheduler+0x150>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <xPortStartScheduler+0x150>)
 8003556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800355a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <xPortStartScheduler+0x150>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <xPortStartScheduler+0x150>)
 8003562:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003568:	f000 f8d6 	bl	8003718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <xPortStartScheduler+0x154>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003572:	f000 f8f5 	bl	8003760 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <xPortStartScheduler+0x158>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <xPortStartScheduler+0x158>)
 800357c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003580:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003582:	f7ff ff59 	bl	8003438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003586:	f7ff fd6b 	bl	8003060 <vTaskSwitchContext>
	prvTaskExitError();
 800358a:	f7ff ff11 	bl	80033b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	e000ed00 	.word	0xe000ed00
 800359c:	410fc271 	.word	0x410fc271
 80035a0:	410fc270 	.word	0x410fc270
 80035a4:	e000e400 	.word	0xe000e400
 80035a8:	20000264 	.word	0x20000264
 80035ac:	20000268 	.word	0x20000268
 80035b0:	e000ed20 	.word	0xe000ed20
 80035b4:	2000000c 	.word	0x2000000c
 80035b8:	e000ef34 	.word	0xe000ef34

080035bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <vPortEnterCritical+0x54>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <vPortEnterCritical+0x54>)
 80035dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <vPortEnterCritical+0x54>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10e      	bne.n	8003604 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <vPortEnterCritical+0x58>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <vPortEnterCritical+0x48>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	e7fe      	b.n	8003602 <vPortEnterCritical+0x46>
	}
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	2000000c 	.word	0x2000000c
 8003614:	e000ed04 	.word	0xe000ed04

08003618 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <vPortExitCritical+0x4c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <vPortExitCritical+0x22>
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	e7fe      	b.n	8003638 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <vPortExitCritical+0x4c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	4a08      	ldr	r2, [pc, #32]	; (8003664 <vPortExitCritical+0x4c>)
 8003642:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <vPortExitCritical+0x4c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <vPortExitCritical+0x3e>
 800364c:	2300      	movs	r3, #0
 800364e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	2000000c 	.word	0x2000000c
	...

08003670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003670:	f3ef 8009 	mrs	r0, PSP
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <pxCurrentTCBConst>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f01e 0f10 	tst.w	lr, #16
 8003680:	bf08      	it	eq
 8003682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368a:	6010      	str	r0, [r2, #0]
 800368c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003694:	f380 8811 	msr	BASEPRI, r0
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f7ff fcde 	bl	8003060 <vTaskSwitchContext>
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f380 8811 	msr	BASEPRI, r0
 80036ac:	bc09      	pop	{r0, r3}
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	6808      	ldr	r0, [r1, #0]
 80036b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b6:	f01e 0f10 	tst.w	lr, #16
 80036ba:	bf08      	it	eq
 80036bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036c0:	f380 8809 	msr	PSP, r0
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	f3af 8000 	nop.w

080036d0 <pxCurrentTCBConst>:
 80036d0:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop

080036d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80036f0:	f7ff fbfe 	bl	8002ef0 <xTaskIncrementTick>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <SysTick_Handler+0x3c>)
 80036fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <vPortSetupTimerInterrupt+0x34>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <vPortSetupTimerInterrupt+0x38>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <vPortSetupTimerInterrupt+0x3c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <vPortSetupTimerInterrupt+0x40>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	4a09      	ldr	r2, [pc, #36]	; (800375c <vPortSetupTimerInterrupt+0x44>)
 8003736:	3b01      	subs	r3, #1
 8003738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <vPortSetupTimerInterrupt+0x34>)
 800373c:	2207      	movs	r2, #7
 800373e:	601a      	str	r2, [r3, #0]
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010
 8003750:	e000e018 	.word	0xe000e018
 8003754:	20000000 	.word	0x20000000
 8003758:	10624dd3 	.word	0x10624dd3
 800375c:	e000e014 	.word	0xe000e014

08003760 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003760:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003770 <vPortEnableVFP+0x10>
 8003764:	6801      	ldr	r1, [r0, #0]
 8003766:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800376a:	6001      	str	r1, [r0, #0]
 800376c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800376e:	bf00      	nop
 8003770:	e000ed88 	.word	0xe000ed88

08003774 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = ptr;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b0a0      	sub	sp, #128	; 0x80
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
	static BaseType_t xHeapHasBeenInitialised = pdFALSE;
	void *pvReturn = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	66fb      	str	r3, [r7, #108]	; 0x6c
	size_t BlockSize,WantedSize;
	char data[80];
	WantedSize = xWantedSize;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	663b      	str	r3, [r7, #96]	; 0x60
		vTaskSuspendAll();
 8003784:	f7ff fb0a 	bl	8002d9c <vTaskSuspendAll>
		{
			/* If this is the first call to malloc then the heap will require
			initialisation to setup the list of free blocks. */
			if( xHeapHasBeenInitialised == pdFALSE )
 8003788:	4b6b      	ldr	r3, [pc, #428]	; (8003938 <pvPortMalloc+0x1c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <pvPortMalloc+0x26>
			{
				prvHeapInit();
 8003790:	f000 f956 	bl	8003a40 <prvHeapInit>
				xHeapHasBeenInitialised = pdTRUE;
 8003794:	4b68      	ldr	r3, [pc, #416]	; (8003938 <pvPortMalloc+0x1c4>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]
			}

			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 80037a0:	2308      	movs	r3, #8
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	3308      	adds	r3, #8
 80037bc:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8095 	beq.w	80038f0 <pvPortMalloc+0x17c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f241 32f7 	movw	r2, #5111	; 0x13f7
 80037cc:	4293      	cmp	r3, r2
 80037ce:	f200 808f 	bhi.w	80038f0 <pvPortMalloc+0x17c>
			{
				/* Blocks are stored in byte order - traverse the list from the start
				(smallest) block until one of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037d2:	4b5a      	ldr	r3, [pc, #360]	; (800393c <pvPortMalloc+0x1c8>)
 80037d4:	673b      	str	r3, [r7, #112]	; 0x70
				pxBlock = xStart.pxNextFreeBlock;
 80037d6:	4b59      	ldr	r3, [pc, #356]	; (800393c <pvPortMalloc+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	677b      	str	r3, [r7, #116]	; 0x74
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037dc:	e004      	b.n	80037e8 <pvPortMalloc+0x74>
				{
					pxPreviousBlock = pxBlock;
 80037de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e0:	673b      	str	r3, [r7, #112]	; 0x70
					pxBlock = pxBlock->pxNextFreeBlock;
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	677b      	str	r3, [r7, #116]	; 0x74
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d903      	bls.n	80037fa <pvPortMalloc+0x86>
 80037f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f1      	bne.n	80037de <pvPortMalloc+0x6a>
				}

				/* If we found the end marker then a block of adequate size was not found. */
				if( pxBlock != &xEnd )
 80037fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fc:	4a50      	ldr	r2, [pc, #320]	; (8003940 <pvPortMalloc+0x1cc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d076      	beq.n	80038f0 <pvPortMalloc+0x17c>
				{
					/* Return the memory space - jumping over the BlockLink_t structure
					at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2208      	movs	r2, #8
 8003808:	4413      	add	r3, r2
 800380a:	66fb      	str	r3, [r7, #108]	; 0x6c

					/* This block is being returned for use so must be taken out of the
					list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800380c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003812:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2208      	movs	r2, #8
 800381e:	0052      	lsls	r2, r2, #1
 8003820:	4293      	cmp	r3, r2
 8003822:	d95e      	bls.n	80038e2 <pvPortMalloc+0x16e>
					{
						/* This block is to be split into two.  Create a new block
						following the number of bytes requested. The void cast is
						used to prevent byte alignment warnings from the compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	65fb      	str	r3, [r7, #92]	; 0x5c

						/* Calculate the sizes of two blocks split from the single
						block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800382c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	1ad2      	subs	r2, r2, r3
 8003834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003836:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800383e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003840:	667b      	str	r3, [r7, #100]	; 0x64
 8003842:	4b3e      	ldr	r3, [pc, #248]	; (800393c <pvPortMalloc+0x1c8>)
 8003844:	66bb      	str	r3, [r7, #104]	; 0x68
 8003846:	e034      	b.n	80038b2 <pvPortMalloc+0x13e>
 8003848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	441a      	add	r2, r3
 8003856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003858:	429a      	cmp	r2, r3
 800385a:	d111      	bne.n	8003880 <pvPortMalloc+0x10c>
 800385c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	440a      	add	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	667b      	str	r3, [r7, #100]	; 0x64
 8003874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e015      	b.n	80038ac <pvPortMalloc+0x138>
 8003880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	461a      	mov	r2, r3
 8003886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003888:	4413      	add	r3, r2
 800388a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	4293      	cmp	r3, r2
 8003890:	d10c      	bne.n	80038ac <pvPortMalloc+0x138>
 8003892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	441a      	add	r2, r3
 800389e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b4:	4a22      	ldr	r2, [pc, #136]	; (8003940 <pvPortMalloc+0x1cc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d1c6      	bne.n	8003848 <pvPortMalloc+0xd4>
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <pvPortMalloc+0x1c8>)
 80038bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80038be:	e002      	b.n	80038c6 <pvPortMalloc+0x152>
 80038c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d9f5      	bls.n	80038c0 <pvPortMalloc+0x14c>
 80038d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038e0:	601a      	str	r2, [r3, #0]
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038e2:	4b18      	ldr	r3, [pc, #96]	; (8003944 <pvPortMalloc+0x1d0>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	4a15      	ldr	r2, [pc, #84]	; (8003944 <pvPortMalloc+0x1d0>)
 80038ee:	6013      	str	r3, [r2, #0]
				}
			}

			traceMALLOC( pvReturn, xWantedSize );
		}
		( void ) xTaskResumeAll();
 80038f0:	f7ff fa62 	bl	8002db8 <xTaskResumeAll>
				vApplicationMallocFailedHook();
			}
		}
		#endif

	    BlockSize = xWantedSize;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65bb      	str	r3, [r7, #88]	; 0x58
		sprintf(data,"pvReturn:%p heapSTRUCT_SIZE:%0d WantedSize:%0d BlockSize:%0d\n\r",pvReturn,heapSTRUCT_SIZE,WantedSize,BlockSize);
 80038f8:	2308      	movs	r3, #8
 80038fa:	461a      	mov	r2, r3
 80038fc:	f107 0008 	add.w	r0, r7, #8
 8003900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800390c:	490e      	ldr	r1, [pc, #56]	; (8003948 <pvPortMalloc+0x1d4>)
 800390e:	f000 f989 	bl	8003c24 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)data,strlen(data),0xffff);
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fc5a 	bl	80001d0 <strlen>
 800391c:	4603      	mov	r3, r0
 800391e:	b29a      	uxth	r2, r3
 8003920:	f107 0108 	add.w	r1, r7, #8
 8003924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003928:	4808      	ldr	r0, [pc, #32]	; (800394c <pvPortMalloc+0x1d8>)
 800392a:	f7fe fab8 	bl	8001e9e <HAL_UART_Transmit>

		return pvReturn;
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003930:	4618      	mov	r0, r3
 8003932:	3778      	adds	r7, #120	; 0x78
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000167c 	.word	0x2000167c
 800393c:	2000166c 	.word	0x2000166c
 8003940:	20001674 	.word	0x20001674
 8003944:	20000010 	.word	0x20000010
 8003948:	08004490 	.word	0x08004490
 800394c:	20001688 	.word	0x20001688

08003950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d063      	beq.n	8003a2a <vPortFree+0xda>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 8003962:	2308      	movs	r3, #8
 8003964:	425b      	negs	r3, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 8003970:	f7ff fa14 	bl	8002d9c <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <vPortFree+0xe4>)
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e034      	b.n	80039e8 <vPortFree+0x98>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	441a      	add	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	429a      	cmp	r2, r3
 8003990:	d111      	bne.n	80039b6 <vPortFree+0x66>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	440a      	add	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e015      	b.n	80039e2 <vPortFree+0x92>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	461a      	mov	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10c      	bne.n	80039e2 <vPortFree+0x92>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	441a      	add	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <vPortFree+0xe8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d1c6      	bne.n	800397e <vPortFree+0x2e>
 80039f0:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <vPortFree+0xe4>)
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e002      	b.n	80039fc <vPortFree+0xac>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d9f5      	bls.n	80039f6 <vPortFree+0xa6>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <vPortFree+0xec>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <vPortFree+0xec>)
 8003a24:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 8003a26:	f7ff f9c7 	bl	8002db8 <xTaskResumeAll>
    }
}
 8003a2a:	bf00      	nop
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000166c 	.word	0x2000166c
 8003a38:	20001674 	.word	0x20001674
 8003a3c:	20000010 	.word	0x20000010

08003a40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <prvHeapInit+0x48>)
 8003a48:	f023 0307 	bic.w	r3, r3, #7
 8003a4c:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a4e:	4a0f      	ldr	r2, [pc, #60]	; (8003a8c <prvHeapInit+0x4c>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <prvHeapInit+0x4c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <prvHeapInit+0x50>)
 8003a5c:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003a60:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <prvHeapInit+0x50>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003a72:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <prvHeapInit+0x50>)
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000274 	.word	0x20000274
 8003a8c:	2000166c 	.word	0x2000166c
 8003a90:	20001674 	.word	0x20001674

08003a94 <vPrintFreeList>:
	char startaddress[12];
	char endaddress[12];
};
struct data mydata;
void vPrintFreeList( void )
{
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af02      	add	r7, sp, #8
	BlockLink_t *ptr=&xStart;
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <vPrintFreeList+0xf0>)
 8003a9c:	607b      	str	r3, [r7, #4]
	memset(print_list,'\0',sizeof(print_list));
 8003a9e:	2246      	movs	r2, #70	; 0x46
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4839      	ldr	r0, [pc, #228]	; (8003b88 <vPrintFreeList+0xf4>)
 8003aa4:	f000 f8b5 	bl	8003c12 <memset>
	sprintf(print_list,"startAddress  |heapSTRUCT_SIZE  |xBlocksize  |endAddress\n\r");
 8003aa8:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <vPrintFreeList+0xf4>)
 8003aaa:	4a38      	ldr	r2, [pc, #224]	; (8003b8c <vPrintFreeList+0xf8>)
 8003aac:	4614      	mov	r4, r2
 8003aae:	469c      	mov	ip, r3
 8003ab0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003ab4:	4665      	mov	r5, ip
 8003ab6:	4626      	mov	r6, r4
 8003ab8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003aba:	6028      	str	r0, [r5, #0]
 8003abc:	6069      	str	r1, [r5, #4]
 8003abe:	60aa      	str	r2, [r5, #8]
 8003ac0:	60eb      	str	r3, [r5, #12]
 8003ac2:	3410      	adds	r4, #16
 8003ac4:	f10c 0c10 	add.w	ip, ip, #16
 8003ac8:	4574      	cmp	r4, lr
 8003aca:	d1f3      	bne.n	8003ab4 <vPrintFreeList+0x20>
 8003acc:	4662      	mov	r2, ip
 8003ace:	4623      	mov	r3, r4
 8003ad0:	cb03      	ldmia	r3!, {r0, r1}
 8003ad2:	6010      	str	r0, [r2, #0]
 8003ad4:	6051      	str	r1, [r2, #4]
 8003ad6:	8819      	ldrh	r1, [r3, #0]
 8003ad8:	789b      	ldrb	r3, [r3, #2]
 8003ada:	8111      	strh	r1, [r2, #8]
 8003adc:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2,(uint8_t *)print_list,strlen(print_list),0xffff);
 8003ade:	482a      	ldr	r0, [pc, #168]	; (8003b88 <vPrintFreeList+0xf4>)
 8003ae0:	f7fc fb76 	bl	80001d0 <strlen>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aec:	4926      	ldr	r1, [pc, #152]	; (8003b88 <vPrintFreeList+0xf4>)
 8003aee:	4828      	ldr	r0, [pc, #160]	; (8003b90 <vPrintFreeList+0xfc>)
 8003af0:	f7fe f9d5 	bl	8001e9e <HAL_UART_Transmit>
	while(ptr->pxNextFreeBlock!=&xEnd)
 8003af4:	e02a      	b.n	8003b4c <vPrintFreeList+0xb8>
	{
		memset(print_list,'\0',sizeof(print_list));
 8003af6:	2246      	movs	r2, #70	; 0x46
 8003af8:	2100      	movs	r1, #0
 8003afa:	4823      	ldr	r0, [pc, #140]	; (8003b88 <vPrintFreeList+0xf4>)
 8003afc:	f000 f889 	bl	8003c12 <memset>
		mydata.blocksize=ptr->pxNextFreeBlock->xBlockSize;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <vPrintFreeList+0x100>)
 8003b0a:	601a      	str	r2, [r3, #0]
		sprintf(print_list,"%p  %d  %d %p\n\r",ptr->pxNextFreeBlock,8,mydata.blocksize,((BaseType_t)ptr->pxNextFreeBlock)+((BaseType_t)mydata.blocksize));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <vPrintFreeList+0x100>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <vPrintFreeList+0x100>)
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	4402      	add	r2, r0
 8003b20:	9201      	str	r2, [sp, #4]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2308      	movs	r3, #8
 8003b26:	460a      	mov	r2, r1
 8003b28:	491b      	ldr	r1, [pc, #108]	; (8003b98 <vPrintFreeList+0x104>)
 8003b2a:	4817      	ldr	r0, [pc, #92]	; (8003b88 <vPrintFreeList+0xf4>)
 8003b2c:	f000 f87a 	bl	8003c24 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)print_list,strlen(print_list),0xffff);
 8003b30:	4815      	ldr	r0, [pc, #84]	; (8003b88 <vPrintFreeList+0xf4>)
 8003b32:	f7fc fb4d 	bl	80001d0 <strlen>
 8003b36:	4603      	mov	r3, r0
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b3e:	4912      	ldr	r1, [pc, #72]	; (8003b88 <vPrintFreeList+0xf4>)
 8003b40:	4813      	ldr	r0, [pc, #76]	; (8003b90 <vPrintFreeList+0xfc>)
 8003b42:	f7fe f9ac 	bl	8001e9e <HAL_UART_Transmit>
		ptr=ptr->pxNextFreeBlock;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	607b      	str	r3, [r7, #4]
	while(ptr->pxNextFreeBlock!=&xEnd)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <vPrintFreeList+0x108>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d1cf      	bne.n	8003af6 <vPrintFreeList+0x62>
	}
	sprintf(print_list,"configadjusted_heap_size:%d xfreebytesremaining:%d  \n\r",configADJUSTED_HEAP_SIZE,xFreeBytesRemaining);
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <vPrintFreeList+0x10c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003b5e:	4911      	ldr	r1, [pc, #68]	; (8003ba4 <vPrintFreeList+0x110>)
 8003b60:	4809      	ldr	r0, [pc, #36]	; (8003b88 <vPrintFreeList+0xf4>)
 8003b62:	f000 f85f 	bl	8003c24 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)print_list,strlen(print_list),0xffff);
 8003b66:	4808      	ldr	r0, [pc, #32]	; (8003b88 <vPrintFreeList+0xf4>)
 8003b68:	f7fc fb32 	bl	80001d0 <strlen>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <vPrintFreeList+0xf4>)
 8003b76:	4806      	ldr	r0, [pc, #24]	; (8003b90 <vPrintFreeList+0xfc>)
 8003b78:	f7fe f991 	bl	8001e9e <HAL_UART_Transmit>
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b84:	2000166c 	.word	0x2000166c
 8003b88:	20001728 	.word	0x20001728
 8003b8c:	080044d0 	.word	0x080044d0
 8003b90:	20001688 	.word	0x20001688
 8003b94:	2000170c 	.word	0x2000170c
 8003b98:	0800450c 	.word	0x0800450c
 8003b9c:	20001674 	.word	0x20001674
 8003ba0:	20000010 	.word	0x20000010
 8003ba4:	0800451c 	.word	0x0800451c

08003ba8 <__errno>:
 8003ba8:	4b01      	ldr	r3, [pc, #4]	; (8003bb0 <__errno+0x8>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000014 	.word	0x20000014

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4e0d      	ldr	r6, [pc, #52]	; (8003bec <__libc_init_array+0x38>)
 8003bb8:	4c0d      	ldr	r4, [pc, #52]	; (8003bf0 <__libc_init_array+0x3c>)
 8003bba:	1ba4      	subs	r4, r4, r6
 8003bbc:	10a4      	asrs	r4, r4, #2
 8003bbe:	2500      	movs	r5, #0
 8003bc0:	42a5      	cmp	r5, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	4e0b      	ldr	r6, [pc, #44]	; (8003bf4 <__libc_init_array+0x40>)
 8003bc6:	4c0c      	ldr	r4, [pc, #48]	; (8003bf8 <__libc_init_array+0x44>)
 8003bc8:	f000 fc30 	bl	800442c <_init>
 8003bcc:	1ba4      	subs	r4, r4, r6
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	42a5      	cmp	r5, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bdc:	4798      	blx	r3
 8003bde:	3501      	adds	r5, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be6:	4798      	blx	r3
 8003be8:	3501      	adds	r5, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	080045a8 	.word	0x080045a8
 8003bf0:	080045a8 	.word	0x080045a8
 8003bf4:	080045a8 	.word	0x080045a8
 8003bf8:	080045ac 	.word	0x080045ac

08003bfc <memcpy>:
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	1e43      	subs	r3, r0, #1
 8003c00:	440a      	add	r2, r1
 8003c02:	4291      	cmp	r1, r2
 8003c04:	d100      	bne.n	8003c08 <memcpy+0xc>
 8003c06:	bd10      	pop	{r4, pc}
 8003c08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c10:	e7f7      	b.n	8003c02 <memcpy+0x6>

08003c12 <memset>:
 8003c12:	4402      	add	r2, r0
 8003c14:	4603      	mov	r3, r0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d100      	bne.n	8003c1c <memset+0xa>
 8003c1a:	4770      	bx	lr
 8003c1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c20:	e7f9      	b.n	8003c16 <memset+0x4>
	...

08003c24 <siprintf>:
 8003c24:	b40e      	push	{r1, r2, r3}
 8003c26:	b500      	push	{lr}
 8003c28:	b09c      	sub	sp, #112	; 0x70
 8003c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c2c:	9002      	str	r0, [sp, #8]
 8003c2e:	9006      	str	r0, [sp, #24]
 8003c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c34:	4809      	ldr	r0, [pc, #36]	; (8003c5c <siprintf+0x38>)
 8003c36:	9107      	str	r1, [sp, #28]
 8003c38:	9104      	str	r1, [sp, #16]
 8003c3a:	4909      	ldr	r1, [pc, #36]	; (8003c60 <siprintf+0x3c>)
 8003c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c40:	9105      	str	r1, [sp, #20]
 8003c42:	6800      	ldr	r0, [r0, #0]
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	a902      	add	r1, sp, #8
 8003c48:	f000 f86e 	bl	8003d28 <_svfiprintf_r>
 8003c4c:	9b02      	ldr	r3, [sp, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	b01c      	add	sp, #112	; 0x70
 8003c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c58:	b003      	add	sp, #12
 8003c5a:	4770      	bx	lr
 8003c5c:	20000014 	.word	0x20000014
 8003c60:	ffff0208 	.word	0xffff0208

08003c64 <strcpy>:
 8003c64:	4603      	mov	r3, r0
 8003c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c6a:	f803 2b01 	strb.w	r2, [r3], #1
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	d1f9      	bne.n	8003c66 <strcpy+0x2>
 8003c72:	4770      	bx	lr

08003c74 <__ssputs_r>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	688e      	ldr	r6, [r1, #8]
 8003c7a:	429e      	cmp	r6, r3
 8003c7c:	4682      	mov	sl, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	4690      	mov	r8, r2
 8003c82:	4699      	mov	r9, r3
 8003c84:	d837      	bhi.n	8003cf6 <__ssputs_r+0x82>
 8003c86:	898a      	ldrh	r2, [r1, #12]
 8003c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c8c:	d031      	beq.n	8003cf2 <__ssputs_r+0x7e>
 8003c8e:	6825      	ldr	r5, [r4, #0]
 8003c90:	6909      	ldr	r1, [r1, #16]
 8003c92:	1a6f      	subs	r7, r5, r1
 8003c94:	6965      	ldr	r5, [r4, #20]
 8003c96:	2302      	movs	r3, #2
 8003c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003ca0:	f109 0301 	add.w	r3, r9, #1
 8003ca4:	443b      	add	r3, r7
 8003ca6:	429d      	cmp	r5, r3
 8003ca8:	bf38      	it	cc
 8003caa:	461d      	movcc	r5, r3
 8003cac:	0553      	lsls	r3, r2, #21
 8003cae:	d530      	bpl.n	8003d12 <__ssputs_r+0x9e>
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	f000 fb21 	bl	80042f8 <_malloc_r>
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	b950      	cbnz	r0, 8003cd0 <__ssputs_r+0x5c>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	f8ca 3000 	str.w	r3, [sl]
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	463a      	mov	r2, r7
 8003cd2:	6921      	ldr	r1, [r4, #16]
 8003cd4:	f7ff ff92 	bl	8003bfc <memcpy>
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	6126      	str	r6, [r4, #16]
 8003ce6:	6165      	str	r5, [r4, #20]
 8003ce8:	443e      	add	r6, r7
 8003cea:	1bed      	subs	r5, r5, r7
 8003cec:	6026      	str	r6, [r4, #0]
 8003cee:	60a5      	str	r5, [r4, #8]
 8003cf0:	464e      	mov	r6, r9
 8003cf2:	454e      	cmp	r6, r9
 8003cf4:	d900      	bls.n	8003cf8 <__ssputs_r+0x84>
 8003cf6:	464e      	mov	r6, r9
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	f000 fa93 	bl	8004228 <memmove>
 8003d02:	68a3      	ldr	r3, [r4, #8]
 8003d04:	1b9b      	subs	r3, r3, r6
 8003d06:	60a3      	str	r3, [r4, #8]
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	441e      	add	r6, r3
 8003d0c:	6026      	str	r6, [r4, #0]
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e7dc      	b.n	8003ccc <__ssputs_r+0x58>
 8003d12:	462a      	mov	r2, r5
 8003d14:	f000 fb4a 	bl	80043ac <_realloc_r>
 8003d18:	4606      	mov	r6, r0
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d1e2      	bne.n	8003ce4 <__ssputs_r+0x70>
 8003d1e:	6921      	ldr	r1, [r4, #16]
 8003d20:	4650      	mov	r0, sl
 8003d22:	f000 fa9b 	bl	800425c <_free_r>
 8003d26:	e7c8      	b.n	8003cba <__ssputs_r+0x46>

08003d28 <_svfiprintf_r>:
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	898b      	ldrh	r3, [r1, #12]
 8003d30:	061f      	lsls	r7, r3, #24
 8003d32:	b09d      	sub	sp, #116	; 0x74
 8003d34:	4680      	mov	r8, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	4616      	mov	r6, r2
 8003d3a:	d50f      	bpl.n	8003d5c <_svfiprintf_r+0x34>
 8003d3c:	690b      	ldr	r3, [r1, #16]
 8003d3e:	b96b      	cbnz	r3, 8003d5c <_svfiprintf_r+0x34>
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	f000 fad9 	bl	80042f8 <_malloc_r>
 8003d46:	6020      	str	r0, [r4, #0]
 8003d48:	6120      	str	r0, [r4, #16]
 8003d4a:	b928      	cbnz	r0, 8003d58 <_svfiprintf_r+0x30>
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	f8c8 3000 	str.w	r3, [r8]
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d56:	e0c8      	b.n	8003eea <_svfiprintf_r+0x1c2>
 8003d58:	2340      	movs	r3, #64	; 0x40
 8003d5a:	6163      	str	r3, [r4, #20]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d60:	2320      	movs	r3, #32
 8003d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d66:	2330      	movs	r3, #48	; 0x30
 8003d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d6c:	9503      	str	r5, [sp, #12]
 8003d6e:	f04f 0b01 	mov.w	fp, #1
 8003d72:	4637      	mov	r7, r6
 8003d74:	463d      	mov	r5, r7
 8003d76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d7a:	b10b      	cbz	r3, 8003d80 <_svfiprintf_r+0x58>
 8003d7c:	2b25      	cmp	r3, #37	; 0x25
 8003d7e:	d13e      	bne.n	8003dfe <_svfiprintf_r+0xd6>
 8003d80:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d84:	d00b      	beq.n	8003d9e <_svfiprintf_r+0x76>
 8003d86:	4653      	mov	r3, sl
 8003d88:	4632      	mov	r2, r6
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	f7ff ff71 	bl	8003c74 <__ssputs_r>
 8003d92:	3001      	adds	r0, #1
 8003d94:	f000 80a4 	beq.w	8003ee0 <_svfiprintf_r+0x1b8>
 8003d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d9a:	4453      	add	r3, sl
 8003d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9e:	783b      	ldrb	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 809d 	beq.w	8003ee0 <_svfiprintf_r+0x1b8>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003db0:	9304      	str	r3, [sp, #16]
 8003db2:	9307      	str	r3, [sp, #28]
 8003db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003db8:	931a      	str	r3, [sp, #104]	; 0x68
 8003dba:	462f      	mov	r7, r5
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dc2:	4850      	ldr	r0, [pc, #320]	; (8003f04 <_svfiprintf_r+0x1dc>)
 8003dc4:	f7fc fa0c 	bl	80001e0 <memchr>
 8003dc8:	9b04      	ldr	r3, [sp, #16]
 8003dca:	b9d0      	cbnz	r0, 8003e02 <_svfiprintf_r+0xda>
 8003dcc:	06d9      	lsls	r1, r3, #27
 8003dce:	bf44      	itt	mi
 8003dd0:	2220      	movmi	r2, #32
 8003dd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dd6:	071a      	lsls	r2, r3, #28
 8003dd8:	bf44      	itt	mi
 8003dda:	222b      	movmi	r2, #43	; 0x2b
 8003ddc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003de0:	782a      	ldrb	r2, [r5, #0]
 8003de2:	2a2a      	cmp	r2, #42	; 0x2a
 8003de4:	d015      	beq.n	8003e12 <_svfiprintf_r+0xea>
 8003de6:	9a07      	ldr	r2, [sp, #28]
 8003de8:	462f      	mov	r7, r5
 8003dea:	2000      	movs	r0, #0
 8003dec:	250a      	movs	r5, #10
 8003dee:	4639      	mov	r1, r7
 8003df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003df4:	3b30      	subs	r3, #48	; 0x30
 8003df6:	2b09      	cmp	r3, #9
 8003df8:	d94d      	bls.n	8003e96 <_svfiprintf_r+0x16e>
 8003dfa:	b1b8      	cbz	r0, 8003e2c <_svfiprintf_r+0x104>
 8003dfc:	e00f      	b.n	8003e1e <_svfiprintf_r+0xf6>
 8003dfe:	462f      	mov	r7, r5
 8003e00:	e7b8      	b.n	8003d74 <_svfiprintf_r+0x4c>
 8003e02:	4a40      	ldr	r2, [pc, #256]	; (8003f04 <_svfiprintf_r+0x1dc>)
 8003e04:	1a80      	subs	r0, r0, r2
 8003e06:	fa0b f000 	lsl.w	r0, fp, r0
 8003e0a:	4318      	orrs	r0, r3
 8003e0c:	9004      	str	r0, [sp, #16]
 8003e0e:	463d      	mov	r5, r7
 8003e10:	e7d3      	b.n	8003dba <_svfiprintf_r+0x92>
 8003e12:	9a03      	ldr	r2, [sp, #12]
 8003e14:	1d11      	adds	r1, r2, #4
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	9103      	str	r1, [sp, #12]
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	db01      	blt.n	8003e22 <_svfiprintf_r+0xfa>
 8003e1e:	9207      	str	r2, [sp, #28]
 8003e20:	e004      	b.n	8003e2c <_svfiprintf_r+0x104>
 8003e22:	4252      	negs	r2, r2
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	9207      	str	r2, [sp, #28]
 8003e2a:	9304      	str	r3, [sp, #16]
 8003e2c:	783b      	ldrb	r3, [r7, #0]
 8003e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e30:	d10c      	bne.n	8003e4c <_svfiprintf_r+0x124>
 8003e32:	787b      	ldrb	r3, [r7, #1]
 8003e34:	2b2a      	cmp	r3, #42	; 0x2a
 8003e36:	d133      	bne.n	8003ea0 <_svfiprintf_r+0x178>
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	9203      	str	r2, [sp, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bfb8      	it	lt
 8003e44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e48:	3702      	adds	r7, #2
 8003e4a:	9305      	str	r3, [sp, #20]
 8003e4c:	4d2e      	ldr	r5, [pc, #184]	; (8003f08 <_svfiprintf_r+0x1e0>)
 8003e4e:	7839      	ldrb	r1, [r7, #0]
 8003e50:	2203      	movs	r2, #3
 8003e52:	4628      	mov	r0, r5
 8003e54:	f7fc f9c4 	bl	80001e0 <memchr>
 8003e58:	b138      	cbz	r0, 8003e6a <_svfiprintf_r+0x142>
 8003e5a:	2340      	movs	r3, #64	; 0x40
 8003e5c:	1b40      	subs	r0, r0, r5
 8003e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e62:	9b04      	ldr	r3, [sp, #16]
 8003e64:	4303      	orrs	r3, r0
 8003e66:	3701      	adds	r7, #1
 8003e68:	9304      	str	r3, [sp, #16]
 8003e6a:	7839      	ldrb	r1, [r7, #0]
 8003e6c:	4827      	ldr	r0, [pc, #156]	; (8003f0c <_svfiprintf_r+0x1e4>)
 8003e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e72:	2206      	movs	r2, #6
 8003e74:	1c7e      	adds	r6, r7, #1
 8003e76:	f7fc f9b3 	bl	80001e0 <memchr>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d038      	beq.n	8003ef0 <_svfiprintf_r+0x1c8>
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <_svfiprintf_r+0x1e8>)
 8003e80:	bb13      	cbnz	r3, 8003ec8 <_svfiprintf_r+0x1a0>
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	3307      	adds	r3, #7
 8003e86:	f023 0307 	bic.w	r3, r3, #7
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e90:	444b      	add	r3, r9
 8003e92:	9309      	str	r3, [sp, #36]	; 0x24
 8003e94:	e76d      	b.n	8003d72 <_svfiprintf_r+0x4a>
 8003e96:	fb05 3202 	mla	r2, r5, r2, r3
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	460f      	mov	r7, r1
 8003e9e:	e7a6      	b.n	8003dee <_svfiprintf_r+0xc6>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	3701      	adds	r7, #1
 8003ea4:	9305      	str	r3, [sp, #20]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	250a      	movs	r5, #10
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb0:	3a30      	subs	r2, #48	; 0x30
 8003eb2:	2a09      	cmp	r2, #9
 8003eb4:	d903      	bls.n	8003ebe <_svfiprintf_r+0x196>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0c8      	beq.n	8003e4c <_svfiprintf_r+0x124>
 8003eba:	9105      	str	r1, [sp, #20]
 8003ebc:	e7c6      	b.n	8003e4c <_svfiprintf_r+0x124>
 8003ebe:	fb05 2101 	mla	r1, r5, r1, r2
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4607      	mov	r7, r0
 8003ec6:	e7f0      	b.n	8003eaa <_svfiprintf_r+0x182>
 8003ec8:	ab03      	add	r3, sp, #12
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4622      	mov	r2, r4
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <_svfiprintf_r+0x1ec>)
 8003ed0:	a904      	add	r1, sp, #16
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003edc:	4681      	mov	r9, r0
 8003ede:	d1d6      	bne.n	8003e8e <_svfiprintf_r+0x166>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	065b      	lsls	r3, r3, #25
 8003ee4:	f53f af35 	bmi.w	8003d52 <_svfiprintf_r+0x2a>
 8003ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eea:	b01d      	add	sp, #116	; 0x74
 8003eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef0:	ab03      	add	r3, sp, #12
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <_svfiprintf_r+0x1ec>)
 8003ef8:	a904      	add	r1, sp, #16
 8003efa:	4640      	mov	r0, r8
 8003efc:	f000 f882 	bl	8004004 <_printf_i>
 8003f00:	e7ea      	b.n	8003ed8 <_svfiprintf_r+0x1b0>
 8003f02:	bf00      	nop
 8003f04:	0800456c 	.word	0x0800456c
 8003f08:	08004572 	.word	0x08004572
 8003f0c:	08004576 	.word	0x08004576
 8003f10:	00000000 	.word	0x00000000
 8003f14:	08003c75 	.word	0x08003c75

08003f18 <_printf_common>:
 8003f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	4691      	mov	r9, r2
 8003f1e:	461f      	mov	r7, r3
 8003f20:	688a      	ldr	r2, [r1, #8]
 8003f22:	690b      	ldr	r3, [r1, #16]
 8003f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	bfb8      	it	lt
 8003f2c:	4613      	movlt	r3, r2
 8003f2e:	f8c9 3000 	str.w	r3, [r9]
 8003f32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f36:	4606      	mov	r6, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	b112      	cbz	r2, 8003f42 <_printf_common+0x2a>
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f8c9 3000 	str.w	r3, [r9]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	0699      	lsls	r1, r3, #26
 8003f46:	bf42      	ittt	mi
 8003f48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f4c:	3302      	addmi	r3, #2
 8003f4e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f52:	6825      	ldr	r5, [r4, #0]
 8003f54:	f015 0506 	ands.w	r5, r5, #6
 8003f58:	d107      	bne.n	8003f6a <_printf_common+0x52>
 8003f5a:	f104 0a19 	add.w	sl, r4, #25
 8003f5e:	68e3      	ldr	r3, [r4, #12]
 8003f60:	f8d9 2000 	ldr.w	r2, [r9]
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	42ab      	cmp	r3, r5
 8003f68:	dc28      	bgt.n	8003fbc <_printf_common+0xa4>
 8003f6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	3300      	adds	r3, #0
 8003f72:	bf18      	it	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	0692      	lsls	r2, r2, #26
 8003f78:	d42d      	bmi.n	8003fd6 <_printf_common+0xbe>
 8003f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f7e:	4639      	mov	r1, r7
 8003f80:	4630      	mov	r0, r6
 8003f82:	47c0      	blx	r8
 8003f84:	3001      	adds	r0, #1
 8003f86:	d020      	beq.n	8003fca <_printf_common+0xb2>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	68e5      	ldr	r5, [r4, #12]
 8003f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8003f90:	f003 0306 	and.w	r3, r3, #6
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	bf08      	it	eq
 8003f98:	1aad      	subeq	r5, r5, r2
 8003f9a:	68a3      	ldr	r3, [r4, #8]
 8003f9c:	6922      	ldr	r2, [r4, #16]
 8003f9e:	bf0c      	ite	eq
 8003fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fa4:	2500      	movne	r5, #0
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	bfc4      	itt	gt
 8003faa:	1a9b      	subgt	r3, r3, r2
 8003fac:	18ed      	addgt	r5, r5, r3
 8003fae:	f04f 0900 	mov.w	r9, #0
 8003fb2:	341a      	adds	r4, #26
 8003fb4:	454d      	cmp	r5, r9
 8003fb6:	d11a      	bne.n	8003fee <_printf_common+0xd6>
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e008      	b.n	8003fce <_printf_common+0xb6>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4652      	mov	r2, sl
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d103      	bne.n	8003fd2 <_printf_common+0xba>
 8003fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd2:	3501      	adds	r5, #1
 8003fd4:	e7c3      	b.n	8003f5e <_printf_common+0x46>
 8003fd6:	18e1      	adds	r1, r4, r3
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	2030      	movs	r0, #48	; 0x30
 8003fdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fe0:	4422      	add	r2, r4
 8003fe2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fe6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fea:	3302      	adds	r3, #2
 8003fec:	e7c5      	b.n	8003f7a <_printf_common+0x62>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	47c0      	blx	r8
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d0e6      	beq.n	8003fca <_printf_common+0xb2>
 8003ffc:	f109 0901 	add.w	r9, r9, #1
 8004000:	e7d8      	b.n	8003fb4 <_printf_common+0x9c>
	...

08004004 <_printf_i>:
 8004004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004008:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800400c:	460c      	mov	r4, r1
 800400e:	7e09      	ldrb	r1, [r1, #24]
 8004010:	b085      	sub	sp, #20
 8004012:	296e      	cmp	r1, #110	; 0x6e
 8004014:	4617      	mov	r7, r2
 8004016:	4606      	mov	r6, r0
 8004018:	4698      	mov	r8, r3
 800401a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800401c:	f000 80b3 	beq.w	8004186 <_printf_i+0x182>
 8004020:	d822      	bhi.n	8004068 <_printf_i+0x64>
 8004022:	2963      	cmp	r1, #99	; 0x63
 8004024:	d036      	beq.n	8004094 <_printf_i+0x90>
 8004026:	d80a      	bhi.n	800403e <_printf_i+0x3a>
 8004028:	2900      	cmp	r1, #0
 800402a:	f000 80b9 	beq.w	80041a0 <_printf_i+0x19c>
 800402e:	2958      	cmp	r1, #88	; 0x58
 8004030:	f000 8083 	beq.w	800413a <_printf_i+0x136>
 8004034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004038:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800403c:	e032      	b.n	80040a4 <_printf_i+0xa0>
 800403e:	2964      	cmp	r1, #100	; 0x64
 8004040:	d001      	beq.n	8004046 <_printf_i+0x42>
 8004042:	2969      	cmp	r1, #105	; 0x69
 8004044:	d1f6      	bne.n	8004034 <_printf_i+0x30>
 8004046:	6820      	ldr	r0, [r4, #0]
 8004048:	6813      	ldr	r3, [r2, #0]
 800404a:	0605      	lsls	r5, r0, #24
 800404c:	f103 0104 	add.w	r1, r3, #4
 8004050:	d52a      	bpl.n	80040a8 <_printf_i+0xa4>
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6011      	str	r1, [r2, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da03      	bge.n	8004062 <_printf_i+0x5e>
 800405a:	222d      	movs	r2, #45	; 0x2d
 800405c:	425b      	negs	r3, r3
 800405e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004062:	486f      	ldr	r0, [pc, #444]	; (8004220 <_printf_i+0x21c>)
 8004064:	220a      	movs	r2, #10
 8004066:	e039      	b.n	80040dc <_printf_i+0xd8>
 8004068:	2973      	cmp	r1, #115	; 0x73
 800406a:	f000 809d 	beq.w	80041a8 <_printf_i+0x1a4>
 800406e:	d808      	bhi.n	8004082 <_printf_i+0x7e>
 8004070:	296f      	cmp	r1, #111	; 0x6f
 8004072:	d020      	beq.n	80040b6 <_printf_i+0xb2>
 8004074:	2970      	cmp	r1, #112	; 0x70
 8004076:	d1dd      	bne.n	8004034 <_printf_i+0x30>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	f043 0320 	orr.w	r3, r3, #32
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	e003      	b.n	800408a <_printf_i+0x86>
 8004082:	2975      	cmp	r1, #117	; 0x75
 8004084:	d017      	beq.n	80040b6 <_printf_i+0xb2>
 8004086:	2978      	cmp	r1, #120	; 0x78
 8004088:	d1d4      	bne.n	8004034 <_printf_i+0x30>
 800408a:	2378      	movs	r3, #120	; 0x78
 800408c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004090:	4864      	ldr	r0, [pc, #400]	; (8004224 <_printf_i+0x220>)
 8004092:	e055      	b.n	8004140 <_printf_i+0x13c>
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	1d19      	adds	r1, r3, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6011      	str	r1, [r2, #0]
 800409c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040a4:	2301      	movs	r3, #1
 80040a6:	e08c      	b.n	80041c2 <_printf_i+0x1be>
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6011      	str	r1, [r2, #0]
 80040ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040b0:	bf18      	it	ne
 80040b2:	b21b      	sxthne	r3, r3
 80040b4:	e7cf      	b.n	8004056 <_printf_i+0x52>
 80040b6:	6813      	ldr	r3, [r2, #0]
 80040b8:	6825      	ldr	r5, [r4, #0]
 80040ba:	1d18      	adds	r0, r3, #4
 80040bc:	6010      	str	r0, [r2, #0]
 80040be:	0628      	lsls	r0, r5, #24
 80040c0:	d501      	bpl.n	80040c6 <_printf_i+0xc2>
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	e002      	b.n	80040cc <_printf_i+0xc8>
 80040c6:	0668      	lsls	r0, r5, #25
 80040c8:	d5fb      	bpl.n	80040c2 <_printf_i+0xbe>
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	4854      	ldr	r0, [pc, #336]	; (8004220 <_printf_i+0x21c>)
 80040ce:	296f      	cmp	r1, #111	; 0x6f
 80040d0:	bf14      	ite	ne
 80040d2:	220a      	movne	r2, #10
 80040d4:	2208      	moveq	r2, #8
 80040d6:	2100      	movs	r1, #0
 80040d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040dc:	6865      	ldr	r5, [r4, #4]
 80040de:	60a5      	str	r5, [r4, #8]
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	f2c0 8095 	blt.w	8004210 <_printf_i+0x20c>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	f021 0104 	bic.w	r1, r1, #4
 80040ec:	6021      	str	r1, [r4, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d13d      	bne.n	800416e <_printf_i+0x16a>
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	f040 808e 	bne.w	8004214 <_printf_i+0x210>
 80040f8:	4665      	mov	r5, ip
 80040fa:	2a08      	cmp	r2, #8
 80040fc:	d10b      	bne.n	8004116 <_printf_i+0x112>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	07db      	lsls	r3, r3, #31
 8004102:	d508      	bpl.n	8004116 <_printf_i+0x112>
 8004104:	6923      	ldr	r3, [r4, #16]
 8004106:	6862      	ldr	r2, [r4, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	bfde      	ittt	le
 800410c:	2330      	movle	r3, #48	; 0x30
 800410e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004112:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004116:	ebac 0305 	sub.w	r3, ip, r5
 800411a:	6123      	str	r3, [r4, #16]
 800411c:	f8cd 8000 	str.w	r8, [sp]
 8004120:	463b      	mov	r3, r7
 8004122:	aa03      	add	r2, sp, #12
 8004124:	4621      	mov	r1, r4
 8004126:	4630      	mov	r0, r6
 8004128:	f7ff fef6 	bl	8003f18 <_printf_common>
 800412c:	3001      	adds	r0, #1
 800412e:	d14d      	bne.n	80041cc <_printf_i+0x1c8>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004134:	b005      	add	sp, #20
 8004136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800413a:	4839      	ldr	r0, [pc, #228]	; (8004220 <_printf_i+0x21c>)
 800413c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	6821      	ldr	r1, [r4, #0]
 8004144:	1d1d      	adds	r5, r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6015      	str	r5, [r2, #0]
 800414a:	060a      	lsls	r2, r1, #24
 800414c:	d50b      	bpl.n	8004166 <_printf_i+0x162>
 800414e:	07ca      	lsls	r2, r1, #31
 8004150:	bf44      	itt	mi
 8004152:	f041 0120 	orrmi.w	r1, r1, #32
 8004156:	6021      	strmi	r1, [r4, #0]
 8004158:	b91b      	cbnz	r3, 8004162 <_printf_i+0x15e>
 800415a:	6822      	ldr	r2, [r4, #0]
 800415c:	f022 0220 	bic.w	r2, r2, #32
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	2210      	movs	r2, #16
 8004164:	e7b7      	b.n	80040d6 <_printf_i+0xd2>
 8004166:	064d      	lsls	r5, r1, #25
 8004168:	bf48      	it	mi
 800416a:	b29b      	uxthmi	r3, r3
 800416c:	e7ef      	b.n	800414e <_printf_i+0x14a>
 800416e:	4665      	mov	r5, ip
 8004170:	fbb3 f1f2 	udiv	r1, r3, r2
 8004174:	fb02 3311 	mls	r3, r2, r1, r3
 8004178:	5cc3      	ldrb	r3, [r0, r3]
 800417a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800417e:	460b      	mov	r3, r1
 8004180:	2900      	cmp	r1, #0
 8004182:	d1f5      	bne.n	8004170 <_printf_i+0x16c>
 8004184:	e7b9      	b.n	80040fa <_printf_i+0xf6>
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	6825      	ldr	r5, [r4, #0]
 800418a:	6961      	ldr	r1, [r4, #20]
 800418c:	1d18      	adds	r0, r3, #4
 800418e:	6010      	str	r0, [r2, #0]
 8004190:	0628      	lsls	r0, r5, #24
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	d501      	bpl.n	800419a <_printf_i+0x196>
 8004196:	6019      	str	r1, [r3, #0]
 8004198:	e002      	b.n	80041a0 <_printf_i+0x19c>
 800419a:	066a      	lsls	r2, r5, #25
 800419c:	d5fb      	bpl.n	8004196 <_printf_i+0x192>
 800419e:	8019      	strh	r1, [r3, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	4665      	mov	r5, ip
 80041a6:	e7b9      	b.n	800411c <_printf_i+0x118>
 80041a8:	6813      	ldr	r3, [r2, #0]
 80041aa:	1d19      	adds	r1, r3, #4
 80041ac:	6011      	str	r1, [r2, #0]
 80041ae:	681d      	ldr	r5, [r3, #0]
 80041b0:	6862      	ldr	r2, [r4, #4]
 80041b2:	2100      	movs	r1, #0
 80041b4:	4628      	mov	r0, r5
 80041b6:	f7fc f813 	bl	80001e0 <memchr>
 80041ba:	b108      	cbz	r0, 80041c0 <_printf_i+0x1bc>
 80041bc:	1b40      	subs	r0, r0, r5
 80041be:	6060      	str	r0, [r4, #4]
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	2300      	movs	r3, #0
 80041c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ca:	e7a7      	b.n	800411c <_printf_i+0x118>
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	462a      	mov	r2, r5
 80041d0:	4639      	mov	r1, r7
 80041d2:	4630      	mov	r0, r6
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d0aa      	beq.n	8004130 <_printf_i+0x12c>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	079b      	lsls	r3, r3, #30
 80041de:	d413      	bmi.n	8004208 <_printf_i+0x204>
 80041e0:	68e0      	ldr	r0, [r4, #12]
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	4298      	cmp	r0, r3
 80041e6:	bfb8      	it	lt
 80041e8:	4618      	movlt	r0, r3
 80041ea:	e7a3      	b.n	8004134 <_printf_i+0x130>
 80041ec:	2301      	movs	r3, #1
 80041ee:	464a      	mov	r2, r9
 80041f0:	4639      	mov	r1, r7
 80041f2:	4630      	mov	r0, r6
 80041f4:	47c0      	blx	r8
 80041f6:	3001      	adds	r0, #1
 80041f8:	d09a      	beq.n	8004130 <_printf_i+0x12c>
 80041fa:	3501      	adds	r5, #1
 80041fc:	68e3      	ldr	r3, [r4, #12]
 80041fe:	9a03      	ldr	r2, [sp, #12]
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	42ab      	cmp	r3, r5
 8004204:	dcf2      	bgt.n	80041ec <_printf_i+0x1e8>
 8004206:	e7eb      	b.n	80041e0 <_printf_i+0x1dc>
 8004208:	2500      	movs	r5, #0
 800420a:	f104 0919 	add.w	r9, r4, #25
 800420e:	e7f5      	b.n	80041fc <_printf_i+0x1f8>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ac      	bne.n	800416e <_printf_i+0x16a>
 8004214:	7803      	ldrb	r3, [r0, #0]
 8004216:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800421a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800421e:	e76c      	b.n	80040fa <_printf_i+0xf6>
 8004220:	0800457d 	.word	0x0800457d
 8004224:	0800458e 	.word	0x0800458e

08004228 <memmove>:
 8004228:	4288      	cmp	r0, r1
 800422a:	b510      	push	{r4, lr}
 800422c:	eb01 0302 	add.w	r3, r1, r2
 8004230:	d807      	bhi.n	8004242 <memmove+0x1a>
 8004232:	1e42      	subs	r2, r0, #1
 8004234:	4299      	cmp	r1, r3
 8004236:	d00a      	beq.n	800424e <memmove+0x26>
 8004238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800423c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004240:	e7f8      	b.n	8004234 <memmove+0xc>
 8004242:	4283      	cmp	r3, r0
 8004244:	d9f5      	bls.n	8004232 <memmove+0xa>
 8004246:	1881      	adds	r1, r0, r2
 8004248:	1ad2      	subs	r2, r2, r3
 800424a:	42d3      	cmn	r3, r2
 800424c:	d100      	bne.n	8004250 <memmove+0x28>
 800424e:	bd10      	pop	{r4, pc}
 8004250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004254:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004258:	e7f7      	b.n	800424a <memmove+0x22>
	...

0800425c <_free_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4605      	mov	r5, r0
 8004260:	2900      	cmp	r1, #0
 8004262:	d045      	beq.n	80042f0 <_free_r+0x94>
 8004264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004268:	1f0c      	subs	r4, r1, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfb8      	it	lt
 800426e:	18e4      	addlt	r4, r4, r3
 8004270:	f000 f8d2 	bl	8004418 <__malloc_lock>
 8004274:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <_free_r+0x98>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	4610      	mov	r0, r2
 800427a:	b933      	cbnz	r3, 800428a <_free_r+0x2e>
 800427c:	6063      	str	r3, [r4, #4]
 800427e:	6014      	str	r4, [r2, #0]
 8004280:	4628      	mov	r0, r5
 8004282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004286:	f000 b8c8 	b.w	800441a <__malloc_unlock>
 800428a:	42a3      	cmp	r3, r4
 800428c:	d90c      	bls.n	80042a8 <_free_r+0x4c>
 800428e:	6821      	ldr	r1, [r4, #0]
 8004290:	1862      	adds	r2, r4, r1
 8004292:	4293      	cmp	r3, r2
 8004294:	bf04      	itt	eq
 8004296:	681a      	ldreq	r2, [r3, #0]
 8004298:	685b      	ldreq	r3, [r3, #4]
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	bf04      	itt	eq
 800429e:	1852      	addeq	r2, r2, r1
 80042a0:	6022      	streq	r2, [r4, #0]
 80042a2:	6004      	str	r4, [r0, #0]
 80042a4:	e7ec      	b.n	8004280 <_free_r+0x24>
 80042a6:	4613      	mov	r3, r2
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	b10a      	cbz	r2, 80042b0 <_free_r+0x54>
 80042ac:	42a2      	cmp	r2, r4
 80042ae:	d9fa      	bls.n	80042a6 <_free_r+0x4a>
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	1858      	adds	r0, r3, r1
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d10b      	bne.n	80042d0 <_free_r+0x74>
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	4401      	add	r1, r0
 80042bc:	1858      	adds	r0, r3, r1
 80042be:	4282      	cmp	r2, r0
 80042c0:	6019      	str	r1, [r3, #0]
 80042c2:	d1dd      	bne.n	8004280 <_free_r+0x24>
 80042c4:	6810      	ldr	r0, [r2, #0]
 80042c6:	6852      	ldr	r2, [r2, #4]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	4401      	add	r1, r0
 80042cc:	6019      	str	r1, [r3, #0]
 80042ce:	e7d7      	b.n	8004280 <_free_r+0x24>
 80042d0:	d902      	bls.n	80042d8 <_free_r+0x7c>
 80042d2:	230c      	movs	r3, #12
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	e7d3      	b.n	8004280 <_free_r+0x24>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	1821      	adds	r1, r4, r0
 80042dc:	428a      	cmp	r2, r1
 80042de:	bf04      	itt	eq
 80042e0:	6811      	ldreq	r1, [r2, #0]
 80042e2:	6852      	ldreq	r2, [r2, #4]
 80042e4:	6062      	str	r2, [r4, #4]
 80042e6:	bf04      	itt	eq
 80042e8:	1809      	addeq	r1, r1, r0
 80042ea:	6021      	streq	r1, [r4, #0]
 80042ec:	605c      	str	r4, [r3, #4]
 80042ee:	e7c7      	b.n	8004280 <_free_r+0x24>
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
 80042f2:	bf00      	nop
 80042f4:	20001680 	.word	0x20001680

080042f8 <_malloc_r>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	1ccd      	adds	r5, r1, #3
 80042fc:	f025 0503 	bic.w	r5, r5, #3
 8004300:	3508      	adds	r5, #8
 8004302:	2d0c      	cmp	r5, #12
 8004304:	bf38      	it	cc
 8004306:	250c      	movcc	r5, #12
 8004308:	2d00      	cmp	r5, #0
 800430a:	4606      	mov	r6, r0
 800430c:	db01      	blt.n	8004312 <_malloc_r+0x1a>
 800430e:	42a9      	cmp	r1, r5
 8004310:	d903      	bls.n	800431a <_malloc_r+0x22>
 8004312:	230c      	movs	r3, #12
 8004314:	6033      	str	r3, [r6, #0]
 8004316:	2000      	movs	r0, #0
 8004318:	bd70      	pop	{r4, r5, r6, pc}
 800431a:	f000 f87d 	bl	8004418 <__malloc_lock>
 800431e:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <_malloc_r+0xac>)
 8004320:	6814      	ldr	r4, [r2, #0]
 8004322:	4621      	mov	r1, r4
 8004324:	b991      	cbnz	r1, 800434c <_malloc_r+0x54>
 8004326:	4c20      	ldr	r4, [pc, #128]	; (80043a8 <_malloc_r+0xb0>)
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	b91b      	cbnz	r3, 8004334 <_malloc_r+0x3c>
 800432c:	4630      	mov	r0, r6
 800432e:	f000 f863 	bl	80043f8 <_sbrk_r>
 8004332:	6020      	str	r0, [r4, #0]
 8004334:	4629      	mov	r1, r5
 8004336:	4630      	mov	r0, r6
 8004338:	f000 f85e 	bl	80043f8 <_sbrk_r>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d124      	bne.n	800438a <_malloc_r+0x92>
 8004340:	230c      	movs	r3, #12
 8004342:	6033      	str	r3, [r6, #0]
 8004344:	4630      	mov	r0, r6
 8004346:	f000 f868 	bl	800441a <__malloc_unlock>
 800434a:	e7e4      	b.n	8004316 <_malloc_r+0x1e>
 800434c:	680b      	ldr	r3, [r1, #0]
 800434e:	1b5b      	subs	r3, r3, r5
 8004350:	d418      	bmi.n	8004384 <_malloc_r+0x8c>
 8004352:	2b0b      	cmp	r3, #11
 8004354:	d90f      	bls.n	8004376 <_malloc_r+0x7e>
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	50cd      	str	r5, [r1, r3]
 800435a:	18cc      	adds	r4, r1, r3
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f85c 	bl	800441a <__malloc_unlock>
 8004362:	f104 000b 	add.w	r0, r4, #11
 8004366:	1d23      	adds	r3, r4, #4
 8004368:	f020 0007 	bic.w	r0, r0, #7
 800436c:	1ac3      	subs	r3, r0, r3
 800436e:	d0d3      	beq.n	8004318 <_malloc_r+0x20>
 8004370:	425a      	negs	r2, r3
 8004372:	50e2      	str	r2, [r4, r3]
 8004374:	e7d0      	b.n	8004318 <_malloc_r+0x20>
 8004376:	428c      	cmp	r4, r1
 8004378:	684b      	ldr	r3, [r1, #4]
 800437a:	bf16      	itet	ne
 800437c:	6063      	strne	r3, [r4, #4]
 800437e:	6013      	streq	r3, [r2, #0]
 8004380:	460c      	movne	r4, r1
 8004382:	e7eb      	b.n	800435c <_malloc_r+0x64>
 8004384:	460c      	mov	r4, r1
 8004386:	6849      	ldr	r1, [r1, #4]
 8004388:	e7cc      	b.n	8004324 <_malloc_r+0x2c>
 800438a:	1cc4      	adds	r4, r0, #3
 800438c:	f024 0403 	bic.w	r4, r4, #3
 8004390:	42a0      	cmp	r0, r4
 8004392:	d005      	beq.n	80043a0 <_malloc_r+0xa8>
 8004394:	1a21      	subs	r1, r4, r0
 8004396:	4630      	mov	r0, r6
 8004398:	f000 f82e 	bl	80043f8 <_sbrk_r>
 800439c:	3001      	adds	r0, #1
 800439e:	d0cf      	beq.n	8004340 <_malloc_r+0x48>
 80043a0:	6025      	str	r5, [r4, #0]
 80043a2:	e7db      	b.n	800435c <_malloc_r+0x64>
 80043a4:	20001680 	.word	0x20001680
 80043a8:	20001684 	.word	0x20001684

080043ac <_realloc_r>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	4607      	mov	r7, r0
 80043b0:	4614      	mov	r4, r2
 80043b2:	460e      	mov	r6, r1
 80043b4:	b921      	cbnz	r1, 80043c0 <_realloc_r+0x14>
 80043b6:	4611      	mov	r1, r2
 80043b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043bc:	f7ff bf9c 	b.w	80042f8 <_malloc_r>
 80043c0:	b922      	cbnz	r2, 80043cc <_realloc_r+0x20>
 80043c2:	f7ff ff4b 	bl	800425c <_free_r>
 80043c6:	4625      	mov	r5, r4
 80043c8:	4628      	mov	r0, r5
 80043ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043cc:	f000 f826 	bl	800441c <_malloc_usable_size_r>
 80043d0:	42a0      	cmp	r0, r4
 80043d2:	d20f      	bcs.n	80043f4 <_realloc_r+0x48>
 80043d4:	4621      	mov	r1, r4
 80043d6:	4638      	mov	r0, r7
 80043d8:	f7ff ff8e 	bl	80042f8 <_malloc_r>
 80043dc:	4605      	mov	r5, r0
 80043de:	2800      	cmp	r0, #0
 80043e0:	d0f2      	beq.n	80043c8 <_realloc_r+0x1c>
 80043e2:	4631      	mov	r1, r6
 80043e4:	4622      	mov	r2, r4
 80043e6:	f7ff fc09 	bl	8003bfc <memcpy>
 80043ea:	4631      	mov	r1, r6
 80043ec:	4638      	mov	r0, r7
 80043ee:	f7ff ff35 	bl	800425c <_free_r>
 80043f2:	e7e9      	b.n	80043c8 <_realloc_r+0x1c>
 80043f4:	4635      	mov	r5, r6
 80043f6:	e7e7      	b.n	80043c8 <_realloc_r+0x1c>

080043f8 <_sbrk_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4c06      	ldr	r4, [pc, #24]	; (8004414 <_sbrk_r+0x1c>)
 80043fc:	2300      	movs	r3, #0
 80043fe:	4605      	mov	r5, r0
 8004400:	4608      	mov	r0, r1
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	f7fc fb02 	bl	8000a0c <_sbrk>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_sbrk_r+0x1a>
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	b103      	cbz	r3, 8004412 <_sbrk_r+0x1a>
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20001770 	.word	0x20001770

08004418 <__malloc_lock>:
 8004418:	4770      	bx	lr

0800441a <__malloc_unlock>:
 800441a:	4770      	bx	lr

0800441c <_malloc_usable_size_r>:
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f18      	subs	r0, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfbc      	itt	lt
 8004426:	580b      	ldrlt	r3, [r1, r0]
 8004428:	18c0      	addlt	r0, r0, r3
 800442a:	4770      	bx	lr

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
