
Embedded_OS_Lab2_P76091331.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058bc  080058bc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c4  080058c4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080058cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e68  20000014  080058e0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e7c  080058e0  00022e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012300  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000275c  00000000  00000000  00032344  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001058  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00035af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000218ce  00000000  00000000  00036a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c202  00000000  00000000  000582f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1317  00000000  00000000  000644f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013580f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  0013588c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005864 	.word	0x08005864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005864 	.word	0x08005864

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MEMS_Write>:
void orange_blinking();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <MEMS_Write+0x44>)
 80004e6:	f000 ff25 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004ea:	1df9      	adds	r1, r7, #7
 80004ec:	230a      	movs	r3, #10
 80004ee:	2201      	movs	r2, #1
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <MEMS_Write+0x48>)
 80004f2:	f001 fc4f 	bl	8001d94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004f6:	1db9      	adds	r1, r7, #6
 80004f8:	230a      	movs	r3, #10
 80004fa:	2201      	movs	r2, #1
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <MEMS_Write+0x48>)
 80004fe:	f001 fc49 	bl	8001d94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2108      	movs	r1, #8
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <MEMS_Write+0x44>)
 8000508:	f000 ff14 	bl	8001334 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	20012da0 	.word	0x20012da0

0800051c <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	6039      	str	r1, [r7, #0]
 8000526:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800052e:	b2db      	uxtb	r3, r3
 8000530:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <MEMS_Read+0x4c>)
 8000538:	f000 fefc 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 800053c:	1df9      	adds	r1, r7, #7
 800053e:	230a      	movs	r3, #10
 8000540:	2201      	movs	r2, #1
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <MEMS_Read+0x50>)
 8000544:	f001 fc26 	bl	8001d94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000548:	230a      	movs	r3, #10
 800054a:	2201      	movs	r2, #1
 800054c:	6839      	ldr	r1, [r7, #0]
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <MEMS_Read+0x50>)
 8000550:	f001 fd54 	bl	8001ffc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2108      	movs	r1, #8
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <MEMS_Read+0x4c>)
 800055a:	f000 feeb 	bl	8001334 <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	20012da0 	.word	0x20012da0

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fc07 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f857 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 800057e:	f000 f8f5 	bl	800076c <MX_GPIO_Init>
   MX_SPI1_Init();
 8000582:	f000 f8bd 	bl	8000700 <MX_SPI1_Init>
   MEMS_Write(0x21,0x01);
 8000586:	2101      	movs	r1, #1
 8000588:	2021      	movs	r0, #33	; 0x21
 800058a:	f7ff ffa1 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x23,0x48);
 800058e:	2148      	movs	r1, #72	; 0x48
 8000590:	2023      	movs	r0, #35	; 0x23
 8000592:	f7ff ff9d 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x20,0x67);
 8000596:	2167      	movs	r1, #103	; 0x67
 8000598:	2020      	movs	r0, #32
 800059a:	f7ff ff99 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x24,0x00);
 800059e:	2100      	movs	r1, #0
 80005a0:	2024      	movs	r0, #36	; 0x24
 80005a2:	f7ff ff95 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x57,0x55);
 80005a6:	2155      	movs	r1, #85	; 0x55
 80005a8:	2057      	movs	r0, #87	; 0x57
 80005aa:	f7ff ff91 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x40,0x05);
 80005ae:	2105      	movs	r1, #5
 80005b0:	2040      	movs	r0, #64	; 0x40
 80005b2:	f7ff ff8d 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x41,0x11);
 80005b6:	2111      	movs	r1, #17
 80005b8:	2041      	movs	r0, #65	; 0x41
 80005ba:	f7ff ff89 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x59,0xFC);
 80005be:	21fc      	movs	r1, #252	; 0xfc
 80005c0:	2059      	movs	r0, #89	; 0x59
 80005c2:	f7ff ff85 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x5A,0xFC);
 80005c6:	21fc      	movs	r1, #252	; 0xfc
 80005c8:	205a      	movs	r0, #90	; 0x5a
 80005ca:	f7ff ff81 	bl	80004d0 <MEMS_Write>
   MEMS_Write(0x5B,0x01);
 80005ce:	2101      	movs	r1, #1
 80005d0:	205b      	movs	r0, #91	; 0x5b
 80005d2:	f7ff ff7d 	bl	80004d0 <MEMS_Write>
  /* USER CODE BEGIN 2 */

   xSemaphore=xSemaphoreCreateBinary();
 80005d6:	2203      	movs	r2, #3
 80005d8:	2100      	movs	r1, #0
 80005da:	2001      	movs	r0, #1
 80005dc:	f002 fc24 	bl	8002e28 <xQueueGenericCreate>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <main+0xa8>)
 80005e4:	601a      	str	r2, [r3, #0]
   xTaskCreate(green_blinking,"task1",1024,(void *)1,1,NULL);
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2301      	movs	r3, #1
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f4:	4909      	ldr	r1, [pc, #36]	; (800061c <main+0xac>)
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <main+0xb0>)
 80005f8:	f003 fa34 	bl	8003a64 <xTaskCreate>
   xTaskCreate(orange_blinking,"task2",1024,(void *)1,2,NULL);
 80005fc:	2300      	movs	r3, #0
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2302      	movs	r3, #2
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	4906      	ldr	r1, [pc, #24]	; (8000624 <main+0xb4>)
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <main+0xb8>)
 800060e:	f003 fa29 	bl	8003a64 <xTaskCreate>

   vTaskStartScheduler();
 8000612:	f003 fb9f 	bl	8003d54 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0xa6>
 8000618:	20012d9c 	.word	0x20012d9c
 800061c:	0800587c 	.word	0x0800587c
 8000620:	08000a01 	.word	0x08000a01
 8000624:	08005884 	.word	0x08005884
 8000628:	08000a1d 	.word	0x08000a1d

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 f909 	bl	8005852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe8b 	bl	80013cc <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 fa2e 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006c8:	2390      	movs	r3, #144	; 0x90
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f8e4 	bl	80018ac <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 fa17 	bl	8000b1c <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_SPI1_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_SPI1_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI1_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI1_Init+0x64>)
 8000752:	f001 fabb 	bl	8001ccc <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f9de 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20012da0 	.word	0x20012da0
 8000768:	40013000 	.word	0x40013000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b97      	ldr	r3, [pc, #604]	; (80009e4 <MX_GPIO_Init+0x278>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a96      	ldr	r2, [pc, #600]	; (80009e4 <MX_GPIO_Init+0x278>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b94      	ldr	r3, [pc, #592]	; (80009e4 <MX_GPIO_Init+0x278>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b90      	ldr	r3, [pc, #576]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a8f      	ldr	r2, [pc, #572]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b8d      	ldr	r3, [pc, #564]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b89      	ldr	r3, [pc, #548]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a88      	ldr	r2, [pc, #544]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b86      	ldr	r3, [pc, #536]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b82      	ldr	r3, [pc, #520]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a81      	ldr	r2, [pc, #516]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b7f      	ldr	r3, [pc, #508]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b7b      	ldr	r3, [pc, #492]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a7a      	ldr	r2, [pc, #488]	; (80009e4 <MX_GPIO_Init+0x278>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b78      	ldr	r3, [pc, #480]	; (80009e4 <MX_GPIO_Init+0x278>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b74      	ldr	r3, [pc, #464]	; (80009e4 <MX_GPIO_Init+0x278>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a73      	ldr	r2, [pc, #460]	; (80009e4 <MX_GPIO_Init+0x278>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b71      	ldr	r3, [pc, #452]	; (80009e4 <MX_GPIO_Init+0x278>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	486e      	ldr	r0, [pc, #440]	; (80009e8 <MX_GPIO_Init+0x27c>)
 8000830:	f000 fd80 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	486c      	ldr	r0, [pc, #432]	; (80009ec <MX_GPIO_Init+0x280>)
 800083a:	f000 fd7b 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	486a      	ldr	r0, [pc, #424]	; (80009f0 <MX_GPIO_Init+0x284>)
 8000846:	f000 fd75 	bl	8001334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4861      	ldr	r0, [pc, #388]	; (80009e8 <MX_GPIO_Init+0x27c>)
 8000862:	f000 fbb5 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	485b      	ldr	r0, [pc, #364]	; (80009ec <MX_GPIO_Init+0x280>)
 800087e:	f000 fba7 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4853      	ldr	r0, [pc, #332]	; (80009ec <MX_GPIO_Init+0x280>)
 800089e:	f000 fb97 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a2:	2310      	movs	r3, #16
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b2:	2306      	movs	r3, #6
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	484d      	ldr	r0, [pc, #308]	; (80009f4 <MX_GPIO_Init+0x288>)
 80008be:	f000 fb87 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c2:	2304      	movs	r3, #4
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4848      	ldr	r0, [pc, #288]	; (80009f8 <MX_GPIO_Init+0x28c>)
 80008d6:	f000 fb7b 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4840      	ldr	r0, [pc, #256]	; (80009f8 <MX_GPIO_Init+0x28c>)
 80008f8:	f000 fb6a 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000900:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4836      	ldr	r0, [pc, #216]	; (80009f0 <MX_GPIO_Init+0x284>)
 8000916:	f000 fb5b 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800091a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092c:	2306      	movs	r3, #6
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x280>)
 8000938:	f000 fb4a 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800093c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <MX_GPIO_Init+0x288>)
 8000952:	f000 fb3d 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000956:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000968:	230a      	movs	r3, #10
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4820      	ldr	r0, [pc, #128]	; (80009f4 <MX_GPIO_Init+0x288>)
 8000974:	f000 fb2c 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000978:	2320      	movs	r3, #32
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4819      	ldr	r0, [pc, #100]	; (80009f0 <MX_GPIO_Init+0x284>)
 800098c:	f000 fb20 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000990:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a2:	2304      	movs	r3, #4
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_GPIO_Init+0x28c>)
 80009ae:	f000 fb0f 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_GPIO_Init+0x290>)
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <MX_GPIO_Init+0x27c>)
 80009c6:	f000 fb03 	bl	8000fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2106      	movs	r1, #6
 80009ce:	2006      	movs	r0, #6
 80009d0:	f000 fad4 	bl	8000f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009d4:	2006      	movs	r0, #6
 80009d6:	f000 faed 	bl	8000fb4 <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400
 80009fc:	10110000 	.word	0x10110000

08000a00 <green_blinking>:

/* USER CODE BEGIN 4 */
void green_blinking()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	for(;;)
	{
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <green_blinking+0x18>)
 8000a0a:	f000 fcac 	bl	8001366 <HAL_GPIO_TogglePin>
	  vTaskDelay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f003 f96b 	bl	8003cec <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a16:	e7f5      	b.n	8000a04 <green_blinking+0x4>
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <orange_blinking>:
	}
}
void orange_blinking()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	 for(;;)
	 {
	  int8_t data;
	  xSemaphoreTake(xSemaphore,portMAX_DELAY);
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <orange_blinking+0x5c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fd8e 	bl	800354c <xQueueSemaphoreTake>
	  //disable interrupt
	  //MEMS_Write(0x23,0x40);

	  int i=0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
	  for(;i<5;i++)
 8000a34:	e016      	b.n	8000a64 <orange_blinking+0x48>
	  {
	    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <orange_blinking+0x60>)
 8000a3e:	f000 fc79 	bl	8001334 <HAL_GPIO_WritePin>
	    vTaskDelay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f003 f951 	bl	8003cec <vTaskDelay>
	    HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <orange_blinking+0x60>)
 8000a52:	f000 fc6f 	bl	8001334 <HAL_GPIO_WritePin>
	    vTaskDelay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f003 f947 	bl	8003cec <vTaskDelay>
	  for(;i<5;i++)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3301      	adds	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	dde5      	ble.n	8000a36 <orange_blinking+0x1a>
	  }
	  MEMS_Read(0x5f,&data);
 8000a6a:	1cfb      	adds	r3, r7, #3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	205f      	movs	r0, #95	; 0x5f
 8000a70:	f7ff fd54 	bl	800051c <MEMS_Read>
	 {
 8000a74:	e7d5      	b.n	8000a22 <orange_blinking+0x6>
 8000a76:	bf00      	nop
 8000a78:	20012d9c 	.word	0x20012d9c
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <HAL_GPIO_EXTI_Callback>:

	  //MEMS_Write(0x23,0x48);

 }
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   //ISR function
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
	   //MEMS_Write(0x23,0x40);
	   uint8_t data;
       static portBASE_TYPE xHigherPriorityTaskWoken;
       xHigherPriorityTaskWoken=pdFALSE;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
       if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14))
 8000a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a94:	4815      	ldr	r0, [pc, #84]	; (8000aec <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a96:	f000 fc35 	bl	8001304 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <HAL_GPIO_EXTI_Callback+0x2e>
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <HAL_GPIO_EXTI_Callback+0x6c>)
 8000aa8:	f000 fc44 	bl	8001334 <HAL_GPIO_WritePin>
 8000aac:	e005      	b.n	8000aba <HAL_GPIO_EXTI_Callback+0x3a>
       }
       else
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ab6:	f000 fc3d 	bl	8001334 <HAL_GPIO_WritePin>
       }
       //MEMS_Read(0x5f,&data);
       xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	490a      	ldr	r1, [pc, #40]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 fbd0 	bl	8003266 <xQueueGiveFromISR>
       portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_GPIO_EXTI_Callback+0x5e>
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	f3bf 8f4f 	dsb	sy
 8000ada:	f3bf 8f6f 	isb	sy

       //MEMS_Write(0x23,0x48);

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000030 	.word	0x20000030
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	20012d9c 	.word	0x20012d9c
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0a:	f000 f95f 	bl	8000dcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40001000 	.word	0x40001000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <Error_Handler+0x6>

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bce:	23e0      	movs	r3, #224	; 0xe0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bea:	f000 f9f1 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2036      	movs	r0, #54	; 0x36
 8000c1a:	f000 f9af 	bl	8000f7c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c1e:	2036      	movs	r0, #54	; 0x36
 8000c20:	f000 f9c8 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_InitTick+0xa4>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_InitTick+0xa4>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6413      	str	r3, [r2, #64]	; 0x40
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_InitTick+0xa4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	f003 0310 	and.w	r3, r3, #16
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c40:	f107 0210 	add.w	r2, r7, #16
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 f80c 	bl	8001c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c50:	f000 fff6 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8000c54:	4603      	mov	r3, r0
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <HAL_InitTick+0xa8>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	3b01      	subs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <HAL_InitTick+0xb0>)
 8000c6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c8a:	f001 fd73 	bl	8002774 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c96:	f001 fda2 	bl	80027de <HAL_TIM_Base_Start_IT>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	20012df8 	.word	0x20012df8
 8000cb4:	40001000 	.word	0x40001000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fb57 	bl	800139c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM6_DAC_IRQHandler+0x10>)
 8000cfa:	f001 fd94 	bl	8002826 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20012df8 	.word	0x20012df8

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <SystemInit+0x28>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <SystemInit+0x28>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SystemInit+0x28>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d22:	609a      	str	r2, [r3, #8]
#endif
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d3a:	e003      	b.n	8000d44 <LoopCopyDataInit>

08000d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d42:	3104      	adds	r1, #4

08000d44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d4c:	d3f6      	bcc.n	8000d3c <CopyDataInit>
  ldr  r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d50:	e002      	b.n	8000d58 <LoopFillZerobss>

08000d52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d54:	f842 3b04 	str.w	r3, [r2], #4

08000d58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d5c:	d3f9      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5e:	f7ff ffd3 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f004 fd47 	bl	80057f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fc03 	bl	8000570 <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d70:	080058cc 	.word	0x080058cc
  ldr  r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d78:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000d7c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000d80:	20012e7c 	.word	0x20012e7c

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_Init+0x40>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_Init+0x40>)
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_Init+0x40>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f8d8 	bl	8000f66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff ff24 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff feb2 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20012e38 	.word	0x20012e38

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20012e38 	.word	0x20012e38

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8e:	f7ff ff61 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f7ff ffb1 	bl	8000f00 <NVIC_EncodePriority>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff80 	bl	8000eac <__NVIC_SetPriority>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff54 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e16b      	b.n	80012c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 815a 	bne.w	80012be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d00b      	beq.n	800102a <HAL_GPIO_Init+0x5a>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101e:	2b11      	cmp	r3, #17
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b12      	cmp	r3, #18
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0xfc>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b4 	beq.w	80012be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_GPIO_Init+0x308>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5e      	ldr	r2, [pc, #376]	; (80012d8 <HAL_GPIO_Init+0x308>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <HAL_GPIO_Init+0x308>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a5a      	ldr	r2, [pc, #360]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x310>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x314>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_GPIO_Init+0x324>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_GPIO_Init+0x328>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x32c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20a>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4934      	ldr	r1, [pc, #208]	; (80012dc <HAL_GPIO_Init+0x30c>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123a:	4a31      	ldr	r2, [pc, #196]	; (8001300 <HAL_GPIO_Init+0x330>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_GPIO_Init+0x330>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x330>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_GPIO_Init+0x330>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae90 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40021c00 	.word	0x40021c00
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	401a      	ands	r2, r3
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	429a      	cmp	r2, r3
 800137e:	d104      	bne.n	800138a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	041a      	lsls	r2, r3, #16
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001388:	e002      	b.n	8001390 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fb60 	bl	8000a80 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e25b      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d075      	beq.n	80014d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ea:	4ba3      	ldr	r3, [pc, #652]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d00c      	beq.n	8001410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d112      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001402:	4b9d      	ldr	r3, [pc, #628]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800140e:	d10b      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	4b99      	ldr	r3, [pc, #612]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d05b      	beq.n	80014d4 <HAL_RCC_OscConfig+0x108>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d157      	bne.n	80014d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e236      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001430:	d106      	bne.n	8001440 <HAL_RCC_OscConfig+0x74>
 8001432:	4b91      	ldr	r3, [pc, #580]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a90      	ldr	r2, [pc, #576]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x98>
 800144a:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a8a      	ldr	r2, [pc, #552]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001464:	4b84      	ldr	r3, [pc, #528]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a83      	ldr	r2, [pc, #524]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a80      	ldr	r2, [pc, #512]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fcb6 	bl	8000df4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fcb2 	bl	8000df4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1fb      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b76      	ldr	r3, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xc0>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fca2 	bl	8000df4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fc9e 	bl	8000df4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1e7      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0xe8>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d063      	beq.n	80015aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b62      	ldr	r3, [pc, #392]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d11c      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1bb      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b56      	ldr	r3, [pc, #344]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4952      	ldr	r1, [pc, #328]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	e03a      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <HAL_RCC_OscConfig+0x2b0>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fc57 	bl	8000df4 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fc53 	bl	8000df4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e19c      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	4b46      	ldr	r3, [pc, #280]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b43      	ldr	r3, [pc, #268]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4940      	ldr	r1, [pc, #256]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_OscConfig+0x2b0>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fc36 	bl	8000df4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fc32 	bl	8000df4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e17b      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d030      	beq.n	8001618 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d016      	beq.n	80015ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_RCC_OscConfig+0x2b4>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fc16 	bl	8000df4 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc12 	bl	8000df4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e15b      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x200>
 80015ea:	e015      	b.n	8001618 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_RCC_OscConfig+0x2b4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fbff 	bl	8000df4 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fbfb 	bl	8000df4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e144      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a0 	beq.w	8001766 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_OscConfig+0x2b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d121      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_RCC_OscConfig+0x2b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_RCC_OscConfig+0x2b8>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fbc1 	bl	8000df4 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e011      	b.n	800169a <HAL_RCC_OscConfig+0x2ce>
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	42470000 	.word	0x42470000
 8001680:	42470e80 	.word	0x42470e80
 8001684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001688:	f7ff fbb4 	bl	8000df4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e0fd      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_RCC_OscConfig+0x4d4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d106      	bne.n	80016bc <HAL_RCC_OscConfig+0x2f0>
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a7c      	ldr	r2, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	e01c      	b.n	80016f6 <HAL_RCC_OscConfig+0x32a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x312>
 80016c4:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a76      	ldr	r2, [pc, #472]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	4b74      	ldr	r3, [pc, #464]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0x32a>
 80016de:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a70      	ldr	r2, [pc, #448]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	4b6e      	ldr	r3, [pc, #440]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a6d      	ldr	r2, [pc, #436]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d015      	beq.n	800172a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb79 	bl	8000df4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fb75 	bl	8000df4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0bc      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	4b61      	ldr	r3, [pc, #388]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ee      	beq.n	8001706 <HAL_RCC_OscConfig+0x33a>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb63 	bl	8000df4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb5f 	bl	8000df4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0a6      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a51      	ldr	r2, [pc, #324]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8092 	beq.w	8001894 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001770:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d05c      	beq.n	8001836 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d141      	bne.n	8001808 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001784:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <HAL_RCC_OscConfig+0x4dc>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb33 	bl	8000df4 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fb2f 	bl	8000df4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e078      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69da      	ldr	r2, [r3, #28]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	019b      	lsls	r3, r3, #6
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	3b01      	subs	r3, #1
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	4933      	ldr	r1, [pc, #204]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb08 	bl	8000df4 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb04 	bl	8000df4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e04d      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x41c>
 8001806:	e045      	b.n	8001894 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x4dc>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff faf1 	bl	8000df4 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff faed 	bl	8000df4 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e036      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x44a>
 8001834:	e02e      	b.n	8001894 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e029      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_RCC_OscConfig+0x4d8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	429a      	cmp	r2, r3
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d115      	bne.n	8001890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001870:	4293      	cmp	r3, r2
 8001872:	d10d      	bne.n	8001890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	42470060 	.word	0x42470060

080018ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0cc      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d90c      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d044      	beq.n	80019cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001966:	2b03      	cmp	r3, #3
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e067      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff fa2a 	bl	8000df4 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff fa26 	bl	8000df4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e04f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d20c      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 f821 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a36:	4601      	mov	r1, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	fa21 f303 	lsr.w	r3, r1, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8d6 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	080058a4 	.word	0x080058a4
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a8e:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d007      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x32>
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d008      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x38>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 80b4 	bne.w	8001c0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001aa6:	60bb      	str	r3, [r7, #8]
       break;
 8001aa8:	e0b3      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001aac:	60bb      	str	r3, [r7, #8]
      break;
 8001aae:	e0b0      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aba:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d04a      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b55      	ldr	r3, [pc, #340]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	f04f 0400 	mov.w	r4, #0
 8001ad0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	ea03 0501 	and.w	r5, r3, r1
 8001adc:	ea04 0602 	and.w	r6, r4, r2
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	4632      	mov	r2, r6
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	f04f 0400 	mov.w	r4, #0
 8001aec:	0154      	lsls	r4, r2, #5
 8001aee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001af2:	014b      	lsls	r3, r1, #5
 8001af4:	4619      	mov	r1, r3
 8001af6:	4622      	mov	r2, r4
 8001af8:	1b49      	subs	r1, r1, r5
 8001afa:	eb62 0206 	sbc.w	r2, r2, r6
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	f04f 0400 	mov.w	r4, #0
 8001b06:	0194      	lsls	r4, r2, #6
 8001b08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b0c:	018b      	lsls	r3, r1, #6
 8001b0e:	1a5b      	subs	r3, r3, r1
 8001b10:	eb64 0402 	sbc.w	r4, r4, r2
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	00e2      	lsls	r2, r4, #3
 8001b1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b22:	00d9      	lsls	r1, r3, #3
 8001b24:	460b      	mov	r3, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	195b      	adds	r3, r3, r5
 8001b2a:	eb44 0406 	adc.w	r4, r4, r6
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	0262      	lsls	r2, r4, #9
 8001b38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b3c:	0259      	lsls	r1, r3, #9
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4614      	mov	r4, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	4621      	mov	r1, r4
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f04f 0400 	mov.w	r4, #0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	f7fe fb3e 	bl	80001d0 <__aeabi_uldivmod>
 8001b54:	4603      	mov	r3, r0
 8001b56:	460c      	mov	r4, r1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e049      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	099b      	lsrs	r3, r3, #6
 8001b62:	f04f 0400 	mov.w	r4, #0
 8001b66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	ea03 0501 	and.w	r5, r3, r1
 8001b72:	ea04 0602 	and.w	r6, r4, r2
 8001b76:	4629      	mov	r1, r5
 8001b78:	4632      	mov	r2, r6
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	f04f 0400 	mov.w	r4, #0
 8001b82:	0154      	lsls	r4, r2, #5
 8001b84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b88:	014b      	lsls	r3, r1, #5
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	1b49      	subs	r1, r1, r5
 8001b90:	eb62 0206 	sbc.w	r2, r2, r6
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	f04f 0400 	mov.w	r4, #0
 8001b9c:	0194      	lsls	r4, r2, #6
 8001b9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ba2:	018b      	lsls	r3, r1, #6
 8001ba4:	1a5b      	subs	r3, r3, r1
 8001ba6:	eb64 0402 	sbc.w	r4, r4, r2
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	00e2      	lsls	r2, r4, #3
 8001bb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bb8:	00d9      	lsls	r1, r3, #3
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	195b      	adds	r3, r3, r5
 8001bc0:	eb44 0406 	adc.w	r4, r4, r6
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	02a2      	lsls	r2, r4, #10
 8001bce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bd2:	0299      	lsls	r1, r3, #10
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	4621      	mov	r1, r4
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f04f 0400 	mov.w	r4, #0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4623      	mov	r3, r4
 8001be6:	f7fe faf3 	bl	80001d0 <__aeabi_uldivmod>
 8001bea:	4603      	mov	r3, r0
 8001bec:	460c      	mov	r4, r1
 8001bee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	60bb      	str	r3, [r7, #8]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c0e:	60bb      	str	r3, [r7, #8]
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	68bb      	ldr	r3, [r7, #8]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	007a1200 	.word	0x007a1200

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c48:	4601      	mov	r1, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a9b      	lsrs	r3, r3, #10
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080058b4 	.word	0x080058b4

08001c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220f      	movs	r2, #15
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_RCC_GetClockConfig+0x60>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e056      	b.n	8001d8c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe ff3b 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	ea42 0103 	orr.w	r1, r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	0c1b      	lsrs	r3, r3, #16
 8001d5c:	f003 0104 	and.w	r1, r3, #4
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_SPI_Transmit+0x22>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e11e      	b.n	8001ff4 <HAL_SPI_Transmit+0x260>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dbe:	f7ff f819 	bl	8000df4 <HAL_GetTick>
 8001dc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d002      	beq.n	8001dda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dd8:	e103      	b.n	8001fe2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_SPI_Transmit+0x52>
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dea:	e0fa      	b.n	8001fe2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	88fa      	ldrh	r2, [r7, #6]
 8001e0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e32:	d107      	bne.n	8001e44 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	2b40      	cmp	r3, #64	; 0x40
 8001e50:	d007      	beq.n	8001e62 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e6a:	d14b      	bne.n	8001f04 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_SPI_Transmit+0xe6>
 8001e74:	8afb      	ldrh	r3, [r7, #22]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d13e      	bne.n	8001ef8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	1c9a      	adds	r2, r3, #2
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e9e:	e02b      	b.n	8001ef8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d112      	bne.n	8001ed4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	1c9a      	adds	r2, r3, #2
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ed2:	e011      	b.n	8001ef8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed4:	f7fe ff8e 	bl	8000df4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d803      	bhi.n	8001eec <HAL_SPI_Transmit+0x158>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eea:	d102      	bne.n	8001ef2 <HAL_SPI_Transmit+0x15e>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ef6:	e074      	b.n	8001fe2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ce      	bne.n	8001ea0 <HAL_SPI_Transmit+0x10c>
 8001f02:	e04c      	b.n	8001f9e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_SPI_Transmit+0x17e>
 8001f0c:	8afb      	ldrh	r3, [r7, #22]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d140      	bne.n	8001f94 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f38:	e02c      	b.n	8001f94 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d113      	bne.n	8001f70 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	330c      	adds	r3, #12
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f6e:	e011      	b.n	8001f94 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f70:	f7fe ff40 	bl	8000df4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d803      	bhi.n	8001f88 <HAL_SPI_Transmit+0x1f4>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f86:	d102      	bne.n	8001f8e <HAL_SPI_Transmit+0x1fa>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f92:	e026      	b.n	8001fe2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1cd      	bne.n	8001f3a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	6839      	ldr	r1, [r7, #0]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fba4 	bl	80026f0 <SPI_EndRxTxTransaction>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10a      	bne.n	8001fd2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	77fb      	strb	r3, [r7, #31]
 8001fde:	e000      	b.n	8001fe2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001fe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002018:	d112      	bne.n	8002040 <HAL_SPI_Receive+0x44>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2204      	movs	r2, #4
 8002026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f8e9 	bl	800220e <HAL_SPI_TransmitReceive>
 800203c:	4603      	mov	r3, r0
 800203e:	e0e2      	b.n	8002206 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_SPI_Receive+0x52>
 800204a:	2302      	movs	r3, #2
 800204c:	e0db      	b.n	8002206 <HAL_SPI_Receive+0x20a>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002056:	f7fe fecd 	bl	8000df4 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d002      	beq.n	800206e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002068:	2302      	movs	r3, #2
 800206a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800206c:	e0c2      	b.n	80021f4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_SPI_Receive+0x7e>
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800207e:	e0b9      	b.n	80021f4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2204      	movs	r2, #4
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	88fa      	ldrh	r2, [r7, #6]
 800209e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c6:	d107      	bne.n	80020d8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d007      	beq.n	80020f6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d162      	bne.n	80021c4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020fe:	e02e      	b.n	800215e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d115      	bne.n	800213a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f103 020c 	add.w	r2, r3, #12
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002138:	e011      	b.n	800215e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800213a:	f7fe fe5b 	bl	8000df4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d803      	bhi.n	8002152 <HAL_SPI_Receive+0x156>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002150:	d102      	bne.n	8002158 <HAL_SPI_Receive+0x15c>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800215c:	e04a      	b.n	80021f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1cb      	bne.n	8002100 <HAL_SPI_Receive+0x104>
 8002168:	e031      	b.n	80021ce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d113      	bne.n	80021a0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	b292      	uxth	r2, r2
 8002184:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	1c9a      	adds	r2, r3, #2
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800219e:	e011      	b.n	80021c4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a0:	f7fe fe28 	bl	8000df4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d803      	bhi.n	80021b8 <HAL_SPI_Receive+0x1bc>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b6:	d102      	bne.n	80021be <HAL_SPI_Receive+0x1c2>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021c2:	e017      	b.n	80021f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1cd      	bne.n	800216a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa27 	bl	8002626 <SPI_EndRxTransaction>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
 80021f0:	e000      	b.n	80021f4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80021f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002204:	7dfb      	ldrb	r3, [r7, #23]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b08c      	sub	sp, #48	; 0x30
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800221c:	2301      	movs	r3, #1
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x26>
 8002230:	2302      	movs	r3, #2
 8002232:	e18a      	b.n	800254a <HAL_SPI_TransmitReceive+0x33c>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800223c:	f7fe fdda 	bl	8000df4 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800225a:	2b01      	cmp	r3, #1
 800225c:	d00f      	beq.n	800227e <HAL_SPI_TransmitReceive+0x70>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002264:	d107      	bne.n	8002276 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_SPI_TransmitReceive+0x68>
 800226e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002272:	2b04      	cmp	r3, #4
 8002274:	d003      	beq.n	800227e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002276:	2302      	movs	r3, #2
 8002278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800227c:	e15b      	b.n	8002536 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_SPI_TransmitReceive+0x82>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_SPI_TransmitReceive+0x82>
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d103      	bne.n	8002298 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002296:	e14e      	b.n	8002536 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d003      	beq.n	80022ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2205      	movs	r2, #5
 80022a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	887a      	ldrh	r2, [r7, #2]
 80022c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	887a      	ldrh	r2, [r7, #2]
 80022ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d007      	beq.n	8002300 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002308:	d178      	bne.n	80023fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_SPI_TransmitReceive+0x10a>
 8002312:	8b7b      	ldrh	r3, [r7, #26]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d166      	bne.n	80023e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	881a      	ldrh	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	1c9a      	adds	r2, r3, #2
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800233c:	e053      	b.n	80023e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d11b      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x176>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_SPI_TransmitReceive+0x176>
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	2b01      	cmp	r3, #1
 800235a:	d113      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	1c9a      	adds	r2, r3, #2
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d119      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x1b8>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d014      	beq.n	80023c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	b292      	uxth	r2, r2
 80023a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	1c9a      	adds	r2, r3, #2
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023c2:	2301      	movs	r3, #1
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023c6:	f7fe fd15 	bl	8000df4 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d807      	bhi.n	80023e6 <HAL_SPI_TransmitReceive+0x1d8>
 80023d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023dc:	d003      	beq.n	80023e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023e4:	e0a7      	b.n	8002536 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1a6      	bne.n	800233e <HAL_SPI_TransmitReceive+0x130>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1a1      	bne.n	800233e <HAL_SPI_TransmitReceive+0x130>
 80023fa:	e07c      	b.n	80024f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_SPI_TransmitReceive+0x1fc>
 8002404:	8b7b      	ldrh	r3, [r7, #26]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d16b      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002430:	e057      	b.n	80024e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d11c      	bne.n	800247a <HAL_SPI_TransmitReceive+0x26c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d017      	beq.n	800247a <HAL_SPI_TransmitReceive+0x26c>
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d114      	bne.n	800247a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d119      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x2ae>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d014      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024b8:	2301      	movs	r3, #1
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024bc:	f7fe fc9a 	bl	8000df4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d803      	bhi.n	80024d4 <HAL_SPI_TransmitReceive+0x2c6>
 80024cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d2:	d102      	bne.n	80024da <HAL_SPI_TransmitReceive+0x2cc>
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024e0:	e029      	b.n	8002536 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1a2      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x224>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d19d      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f8f8 	bl	80026f0 <SPI_EndRxTxTransaction>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002512:	e010      	b.n	8002536 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	e000      	b.n	8002536 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002534:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800254a:	4618      	mov	r0, r3
 800254c:	3730      	adds	r7, #48	; 0x30
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4613      	mov	r3, r2
 8002560:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002562:	e04c      	b.n	80025fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256a:	d048      	beq.n	80025fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800256c:	f7fe fc42 	bl	8000df4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d902      	bls.n	8002582 <SPI_WaitFlagStateUntilTimeout+0x30>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d13d      	bne.n	80025fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259a:	d111      	bne.n	80025c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a4:	d004      	beq.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d107      	bne.n	80025c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c8:	d10f      	bne.n	80025ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e00f      	b.n	800261e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	429a      	cmp	r2, r3
 800261a:	d1a3      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af02      	add	r7, sp, #8
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800263a:	d111      	bne.n	8002660 <SPI_EndRxTransaction+0x3a>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002644:	d004      	beq.n	8002650 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264e:	d107      	bne.n	8002660 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002668:	d12a      	bne.n	80026c0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d012      	beq.n	800269a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff ff67 	bl	8002552 <SPI_WaitFlagStateUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d02d      	beq.n	80026e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e026      	b.n	80026e8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2101      	movs	r1, #1
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff ff54 	bl	8002552 <SPI_WaitFlagStateUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01a      	beq.n	80026e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e013      	b.n	80026e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	2101      	movs	r1, #1
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff ff41 	bl	8002552 <SPI_WaitFlagStateUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e000      	b.n	80026e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <SPI_EndRxTxTransaction+0x7c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <SPI_EndRxTxTransaction+0x80>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0d5b      	lsrs	r3, r3, #21
 8002708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800271a:	d112      	bne.n	8002742 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff ff13 	bl	8002552 <SPI_WaitFlagStateUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e00f      	b.n	8002762 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3b01      	subs	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d0f2      	beq.n	8002742 <SPI_EndRxTxTransaction+0x52>
 800275c:	e000      	b.n	8002760 <SPI_EndRxTxTransaction+0x70>
        break;
 800275e:	bf00      	nop
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000
 8002770:	165e9f81 	.word	0x165e9f81

08002774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e01d      	b.n	80027c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f815 	bl	80027ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 f968 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d007      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d122      	bne.n	8002882 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d11b      	bne.n	8002882 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f06f 0202 	mvn.w	r2, #2
 8002852:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f8ee 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 800286e:	e005      	b.n	800287c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f8e0 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f8f1 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d122      	bne.n	80028d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b04      	cmp	r3, #4
 800289c:	d11b      	bne.n	80028d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f06f 0204 	mvn.w	r2, #4
 80028a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f8c4 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 80028c2:	e005      	b.n	80028d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f8b6 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f8c7 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d122      	bne.n	800292a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d11b      	bne.n	800292a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f06f 0208 	mvn.w	r2, #8
 80028fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2204      	movs	r2, #4
 8002900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f89a 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 8002916:	e005      	b.n	8002924 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f88c 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f89d 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	d122      	bne.n	800297e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b10      	cmp	r3, #16
 8002944:	d11b      	bne.n	800297e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0210 	mvn.w	r2, #16
 800294e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2208      	movs	r2, #8
 8002954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f870 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 800296a:	e005      	b.n	8002978 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f862 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f873 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10e      	bne.n	80029aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f06f 0201 	mvn.w	r2, #1
 80029a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe f8a7 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d10e      	bne.n	80029d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b80      	cmp	r3, #128	; 0x80
 80029c4:	d107      	bne.n	80029d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f903 	bl	8002bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d10e      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d107      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f838 	bl	8002a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d10e      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d107      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0220 	mvn.w	r2, #32
 8002a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f8cd 	bl	8002bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <TIM_Base_SetConfig+0x114>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d00f      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3d      	ldr	r2, [pc, #244]	; (8002ba0 <TIM_Base_SetConfig+0x118>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00b      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3c      	ldr	r2, [pc, #240]	; (8002ba4 <TIM_Base_SetConfig+0x11c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d007      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <TIM_Base_SetConfig+0x120>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <TIM_Base_SetConfig+0x124>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d108      	bne.n	8002ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <TIM_Base_SetConfig+0x114>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02b      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d027      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <TIM_Base_SetConfig+0x118>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d023      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2b      	ldr	r2, [pc, #172]	; (8002ba4 <TIM_Base_SetConfig+0x11c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01f      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <TIM_Base_SetConfig+0x120>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01b      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a29      	ldr	r2, [pc, #164]	; (8002bac <TIM_Base_SetConfig+0x124>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d017      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <TIM_Base_SetConfig+0x128>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a27      	ldr	r2, [pc, #156]	; (8002bb4 <TIM_Base_SetConfig+0x12c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <TIM_Base_SetConfig+0x130>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <TIM_Base_SetConfig+0x134>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <TIM_Base_SetConfig+0x138>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a23      	ldr	r2, [pc, #140]	; (8002bc4 <TIM_Base_SetConfig+0x13c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <TIM_Base_SetConfig+0x114>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <TIM_Base_SetConfig+0xf8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <TIM_Base_SetConfig+0x124>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d103      	bne.n	8002b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	615a      	str	r2, [r3, #20]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40010400 	.word	0x40010400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800
 8002bbc:	40001800 	.word	0x40001800
 8002bc0:	40001c00 	.word	0x40001c00
 8002bc4:	40002000 	.word	0x40002000

08002bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f103 0208 	add.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c08:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f103 0208 	add.w	r2, r3, #8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f103 0208 	add.w	r2, r3, #8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca8:	d103      	bne.n	8002cb2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e00c      	b.n	8002ccc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e002      	b.n	8002cc0 <vListInsert+0x2e>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d2f6      	bcs.n	8002cba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6892      	ldr	r2, [r2, #8]
 8002d1a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6852      	ldr	r2, [r2, #4]
 8002d24:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d103      	bne.n	8002d38 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1e5a      	subs	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	e7fe      	b.n	8002d7e <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002d80:	f002 fa26 	bl	80051d0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	441a      	add	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	3b01      	subs	r3, #1
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	441a      	add	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	22ff      	movs	r2, #255	; 0xff
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d114      	bne.n	8002e00 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01a      	beq.n	8002e14 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3310      	adds	r3, #16
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 fa10 	bl	8004208 <xTaskRemoveFromEventList>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <xQueueGenericReset+0xcc>)
 8002df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	e009      	b.n	8002e14 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3310      	adds	r3, #16
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fef3 	bl	8002bf0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3324      	adds	r3, #36	; 0x24
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff feee 	bl	8002bf0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002e14:	f002 fa0a 	bl	800522c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <xQueueGenericCreate+0x28>
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	e7fe      	b.n	8002e4e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <xQueueGenericCreate+0x46>
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d101      	bne.n	8002e72 <xQueueGenericCreate+0x4a>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <xQueueGenericCreate+0x4c>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <xQueueGenericCreate+0x64>
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e7fe      	b.n	8002e8a <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002e92:	d909      	bls.n	8002ea8 <xQueueGenericCreate+0x80>
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e7fe      	b.n	8002ea6 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	3350      	adds	r3, #80	; 0x50
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 faa9 	bl	8005404 <pvPortMalloc>
 8002eb2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3350      	adds	r3, #80	; 0x50
 8002ec2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f805 	bl	8002ee0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
    }
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3728      	adds	r7, #40	; 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e002      	b.n	8002f02 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f0e:	2101      	movs	r1, #1
 8002f10:	69b8      	ldr	r0, [r7, #24]
 8002f12:	f7ff ff21 	bl	8002d58 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08e      	sub	sp, #56	; 0x38
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <xQueueGenericSend+0x30>
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f56:	e7fe      	b.n	8002f56 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <xQueueGenericSend+0x3e>
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <xQueueGenericSend+0x42>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <xQueueGenericSend+0x44>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <xQueueGenericSend+0x5c>
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	e7fe      	b.n	8002f82 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d103      	bne.n	8002f92 <xQueueGenericSend+0x6a>
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <xQueueGenericSend+0x6e>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <xQueueGenericSend+0x70>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <xQueueGenericSend+0x88>
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	e7fe      	b.n	8002fae <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fb0:	f001 fac2 	bl	8004538 <xTaskGetSchedulerState>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <xQueueGenericSend+0x98>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <xQueueGenericSend+0x9c>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <xQueueGenericSend+0x9e>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <xQueueGenericSend+0xb6>
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e7fe      	b.n	8002fdc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fde:	f002 f8f7 	bl	80051d0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <xQueueGenericSend+0xcc>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d129      	bne.n	8003048 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ffa:	f000 fbc7 	bl	800378c <prvCopyDataToQueue>
 8002ffe:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	4618      	mov	r0, r3
 800300e:	f001 f8fb 	bl	8004208 <xTaskRemoveFromEventList>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003018:	4b3f      	ldr	r3, [pc, #252]	; (8003118 <xQueueGenericSend+0x1f0>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	e00a      	b.n	8003040 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <xQueueGenericSend+0x1f0>)
 8003032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003040:	f002 f8f4 	bl	800522c <vPortExitCritical>
                return pdPASS;
 8003044:	2301      	movs	r3, #1
 8003046:	e063      	b.n	8003110 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800304e:	f002 f8ed 	bl	800522c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003052:	2300      	movs	r3, #0
 8003054:	e05c      	b.n	8003110 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4618      	mov	r0, r3
 8003062:	f001 f933 	bl	80042cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003066:	2301      	movs	r3, #1
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800306a:	f002 f8df 	bl	800522c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800306e:	f000 fec1 	bl	8003df4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003072:	f002 f8ad 	bl	80051d0 <vPortEnterCritical>
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800307c:	b25b      	sxtb	r3, r3
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003082:	d103      	bne.n	800308c <xQueueGenericSend+0x164>
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003092:	b25b      	sxtb	r3, r3
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003098:	d103      	bne.n	80030a2 <xQueueGenericSend+0x17a>
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a2:	f002 f8c3 	bl	800522c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030a6:	1d3a      	adds	r2, r7, #4
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 f922 	bl	80042f8 <xTaskCheckForTimeOut>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d124      	bne.n	8003104 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030bc:	f000 fc5e 	bl	800397c <prvIsQueueFull>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d018      	beq.n	80030f8 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	3310      	adds	r3, #16
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f84c 	bl	800416c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80030d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d6:	f000 fbe9 	bl	80038ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80030da:	f000 fe99 	bl	8003e10 <xTaskResumeAll>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f af7c 	bne.w	8002fde <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <xQueueGenericSend+0x1f0>)
 80030e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	e772      	b.n	8002fde <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80030f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030fa:	f000 fbd7 	bl	80038ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030fe:	f000 fe87 	bl	8003e10 <xTaskResumeAll>
 8003102:	e76c      	b.n	8002fde <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003106:	f000 fbd1 	bl	80038ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800310a:	f000 fe81 	bl	8003e10 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800310e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003110:	4618      	mov	r0, r3
 8003112:	3738      	adds	r7, #56	; 0x38
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	; 0x40
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <xQueueGenericSendFromISR+0x2c>
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
 8003146:	e7fe      	b.n	8003146 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <xQueueGenericSendFromISR+0x3a>
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <xQueueGenericSendFromISR+0x3e>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <xQueueGenericSendFromISR+0x40>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <xQueueGenericSendFromISR+0x58>
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	e7fe      	b.n	8003172 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d103      	bne.n	8003182 <xQueueGenericSendFromISR+0x66>
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <xQueueGenericSendFromISR+0x6a>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueGenericSendFromISR+0x6c>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <xQueueGenericSendFromISR+0x84>
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	e7fe      	b.n	800319e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031a0:	f002 f8f2 	bl	8005388 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80031a4:	f3ef 8211 	mrs	r2, BASEPRI
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	61fa      	str	r2, [r7, #28]
 80031ba:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80031bc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031be:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <xQueueGenericSendFromISR+0xb6>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d13d      	bne.n	800324e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031e8:	f000 fad0 	bl	800378c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80031ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f4:	d112      	bne.n	800321c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d024      	beq.n	8003248 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	3324      	adds	r3, #36	; 0x24
 8003202:	4618      	mov	r0, r3
 8003204:	f001 f800 	bl	8004208 <xTaskRemoveFromEventList>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01c      	beq.n	8003248 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d019      	beq.n	8003248 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e015      	b.n	8003248 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800321c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003220:	2b7f      	cmp	r3, #127	; 0x7f
 8003222:	d109      	bne.n	8003238 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e7fe      	b.n	8003236 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003238:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800323c:	3301      	adds	r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	b25a      	sxtb	r2, r3
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003248:	2301      	movs	r3, #1
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800324c:	e001      	b.n	8003252 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800324e:	2300      	movs	r3, #0
 8003250:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800325e:	4618      	mov	r0, r3
 8003260:	3740      	adds	r7, #64	; 0x40
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b08e      	sub	sp, #56	; 0x38
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <xQueueGiveFromISR+0x28>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	e7fe      	b.n	800328c <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <xQueueGiveFromISR+0x44>
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e7fe      	b.n	80032a8 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <xQueueGiveFromISR+0x54>
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <xQueueGiveFromISR+0x58>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <xQueueGiveFromISR+0x5a>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <xQueueGiveFromISR+0x72>
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	e7fe      	b.n	80032d6 <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032d8:	f002 f856 	bl	8005388 <vPortValidateInterruptPriority>
        __asm volatile
 80032dc:	f3ef 8211 	mrs	r2, BASEPRI
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	617a      	str	r2, [r7, #20]
 80032f2:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80032f4:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003304:	429a      	cmp	r2, r3
 8003306:	d239      	bcs.n	800337c <xQueueGiveFromISR+0x116>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800331a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003322:	d112      	bne.n	800334a <xQueueGiveFromISR+0xe4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d024      	beq.n	8003376 <xQueueGiveFromISR+0x110>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	3324      	adds	r3, #36	; 0x24
 8003330:	4618      	mov	r0, r3
 8003332:	f000 ff69 	bl	8004208 <xTaskRemoveFromEventList>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <xQueueGiveFromISR+0x110>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d019      	beq.n	8003376 <xQueueGiveFromISR+0x110>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e015      	b.n	8003376 <xQueueGiveFromISR+0x110>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800334a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800334e:	2b7f      	cmp	r3, #127	; 0x7f
 8003350:	d109      	bne.n	8003366 <xQueueGiveFromISR+0x100>
        __asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e7fe      	b.n	8003364 <xQueueGiveFromISR+0xfe>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800336a:	3301      	adds	r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	b25a      	sxtb	r2, r3
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003376:	2301      	movs	r3, #1
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
 800337a:	e001      	b.n	8003380 <xQueueGiveFromISR+0x11a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800337c:	2300      	movs	r3, #0
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800338c:	4618      	mov	r0, r3
 800338e:	3738      	adds	r7, #56	; 0x38
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <xQueueReceive+0x2e>
        __asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	e7fe      	b.n	80033c0 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <xQueueReceive+0x3c>
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <xQueueReceive+0x40>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <xQueueReceive+0x42>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <xQueueReceive+0x5a>
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	e7fe      	b.n	80033ec <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ee:	f001 f8a3 	bl	8004538 <xTaskGetSchedulerState>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <xQueueReceive+0x6a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <xQueueReceive+0x6e>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <xQueueReceive+0x70>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <xQueueReceive+0x88>
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e7fe      	b.n	800341a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800341c:	f001 fed8 	bl	80051d0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01f      	beq.n	800346c <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003430:	f000 fa16 	bl	8003860 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1e5a      	subs	r2, r3, #1
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00f      	beq.n	8003464 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	3310      	adds	r3, #16
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fedd 	bl	8004208 <xTaskRemoveFromEventList>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003454:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <xQueueReceive+0x1b4>)
 8003456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003464:	f001 fee2 	bl	800522c <vPortExitCritical>
                return pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	e069      	b.n	8003540 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003472:	f001 fedb 	bl	800522c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003476:	2300      	movs	r3, #0
 8003478:	e062      	b.n	8003540 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	4618      	mov	r0, r3
 8003486:	f000 ff21 	bl	80042cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800348e:	f001 fecd 	bl	800522c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003492:	f000 fcaf 	bl	8003df4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003496:	f001 fe9b 	bl	80051d0 <vPortEnterCritical>
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a6:	d103      	bne.n	80034b0 <xQueueReceive+0x11c>
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034bc:	d103      	bne.n	80034c6 <xQueueReceive+0x132>
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c6:	f001 feb1 	bl	800522c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ca:	1d3a      	adds	r2, r7, #4
 80034cc:	f107 0310 	add.w	r3, r7, #16
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 ff10 	bl	80042f8 <xTaskCheckForTimeOut>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d123      	bne.n	8003526 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034e0:	f000 fa36 	bl	8003950 <prvIsQueueEmpty>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	3324      	adds	r3, #36	; 0x24
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe3a 	bl	800416c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80034f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034fa:	f000 f9d7 	bl	80038ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80034fe:	f000 fc87 	bl	8003e10 <xTaskResumeAll>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d189      	bne.n	800341c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <xQueueReceive+0x1b4>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	e780      	b.n	800341c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800351a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800351c:	f000 f9c6 	bl	80038ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003520:	f000 fc76 	bl	8003e10 <xTaskResumeAll>
 8003524:	e77a      	b.n	800341c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003528:	f000 f9c0 	bl	80038ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800352c:	f000 fc70 	bl	8003e10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003532:	f000 fa0d 	bl	8003950 <prvIsQueueEmpty>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f43f af6f 	beq.w	800341c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800353e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003540:	4618      	mov	r0, r3
 8003542:	3730      	adds	r7, #48	; 0x30
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08e      	sub	sp, #56	; 0x38
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800355e:	2300      	movs	r3, #0
 8003560:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <xQueueSemaphoreTake+0x30>
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	e7fe      	b.n	800357a <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <xQueueSemaphoreTake+0x4c>
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e7fe      	b.n	8003596 <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003598:	f000 ffce 	bl	8004538 <xTaskGetSchedulerState>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <xQueueSemaphoreTake+0x5c>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <xQueueSemaphoreTake+0x60>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <xQueueSemaphoreTake+0x62>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <xQueueSemaphoreTake+0x7a>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e7fe      	b.n	80035c4 <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80035c6:	f001 fe03 	bl	80051d0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d024      	beq.n	8003620 <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	1e5a      	subs	r2, r3, #1
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <xQueueSemaphoreTake+0xa4>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80035e6:	f001 f93f 	bl	8004868 <pvTaskIncrementMutexHeldCount>
 80035ea:	4602      	mov	r2, r0
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00f      	beq.n	8003618 <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	3310      	adds	r3, #16
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fe03 	bl	8004208 <xTaskRemoveFromEventList>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <xQueueSemaphoreTake+0x20c>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003618:	f001 fe08 	bl	800522c <vPortExitCritical>
                return pdPASS;
 800361c:	2301      	movs	r3, #1
 800361e:	e096      	b.n	800374e <xQueueSemaphoreTake+0x202>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d110      	bne.n	8003648 <xQueueSemaphoreTake+0xfc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <xQueueSemaphoreTake+0xf4>
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e7fe      	b.n	800363e <xQueueSemaphoreTake+0xf2>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003640:	f001 fdf4 	bl	800522c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003644:	2300      	movs	r3, #0
 8003646:	e082      	b.n	800374e <xQueueSemaphoreTake+0x202>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <xQueueSemaphoreTake+0x110>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800364e:	f107 030c 	add.w	r3, r7, #12
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fe3a 	bl	80042cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800365c:	f001 fde6 	bl	800522c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003660:	f000 fbc8 	bl	8003df4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003664:	f001 fdb4 	bl	80051d0 <vPortEnterCritical>
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800366e:	b25b      	sxtb	r3, r3
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003674:	d103      	bne.n	800367e <xQueueSemaphoreTake+0x132>
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003684:	b25b      	sxtb	r3, r3
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368a:	d103      	bne.n	8003694 <xQueueSemaphoreTake+0x148>
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003694:	f001 fdca 	bl	800522c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003698:	463a      	mov	r2, r7
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fe29 	bl	80042f8 <xTaskCheckForTimeOut>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d132      	bne.n	8003712 <xQueueSemaphoreTake+0x1c6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036ae:	f000 f94f 	bl	8003950 <prvIsQueueEmpty>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d026      	beq.n	8003706 <xQueueSemaphoreTake+0x1ba>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <xQueueSemaphoreTake+0x188>
                        {
                            taskENTER_CRITICAL();
 80036c0:	f001 fd86 	bl	80051d0 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 ff53 	bl	8004574 <xTaskPriorityInherit>
 80036ce:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80036d0:	f001 fdac 	bl	800522c <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fd45 	bl	800416c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80036e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036e4:	f000 f8e2 	bl	80038ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80036e8:	f000 fb92 	bl	8003e10 <xTaskResumeAll>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f47f af69 	bne.w	80035c6 <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <xQueueSemaphoreTake+0x20c>)
 80036f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	e75f      	b.n	80035c6 <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003708:	f000 f8d0 	bl	80038ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800370c:	f000 fb80 	bl	8003e10 <xTaskResumeAll>
 8003710:	e759      	b.n	80035c6 <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003714:	f000 f8ca 	bl	80038ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003718:	f000 fb7a 	bl	8003e10 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800371c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800371e:	f000 f917 	bl	8003950 <prvIsQueueEmpty>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	f43f af4e 	beq.w	80035c6 <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <xQueueSemaphoreTake+0x200>
                        {
                            taskENTER_CRITICAL();
 8003730:	f001 fd4e 	bl	80051d0 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003736:	f000 f811 	bl	800375c <prvGetDisinheritPriorityAfterTimeout>
 800373a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f804 	bl	8004750 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003748:	f001 fd70 	bl	800522c <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800374c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800374e:	4618      	mov	r0, r3
 8003750:	3738      	adds	r7, #56	; 0x38
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1c3 0305 	rsb	r3, r3, #5
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e001      	b.n	800377e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800377e:	68fb      	ldr	r3, [r7, #12]
    }
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10d      	bne.n	80037c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d14d      	bne.n	800384e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 ff52 	bl	8004660 <xTaskPriorityDisinherit>
 80037bc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	e043      	b.n	800384e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d119      	bne.n	8003800 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6858      	ldr	r0, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	461a      	mov	r2, r3
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	f002 f830 	bl	800583c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	441a      	add	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d32b      	bcc.n	800384e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	e026      	b.n	800384e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68d8      	ldr	r0, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	461a      	mov	r2, r3
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	f002 f816 	bl	800583c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	425b      	negs	r3, r3
 800381a:	441a      	add	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d207      	bcs.n	800383c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	425b      	negs	r3, r3
 8003836:	441a      	add	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d105      	bne.n	800384e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3b01      	subs	r3, #1
 800384c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003856:	697b      	ldr	r3, [r7, #20]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	441a      	add	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	429a      	cmp	r2, r3
 800388a:	d303      	bcc.n	8003894 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68d9      	ldr	r1, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	461a      	mov	r2, r3
 800389e:	6838      	ldr	r0, [r7, #0]
 80038a0:	f001 ffcc 	bl	800583c <memcpy>
    }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80038b4:	f001 fc8c 	bl	80051d0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038c0:	e011      	b.n	80038e6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3324      	adds	r3, #36	; 0x24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fc9a 	bl	8004208 <xTaskRemoveFromEventList>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80038da:	f000 fd71 	bl	80043c0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	dce9      	bgt.n	80038c2 <prvUnlockQueue+0x16>
 80038ee:	e000      	b.n	80038f2 <prvUnlockQueue+0x46>
                        break;
 80038f0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	22ff      	movs	r2, #255	; 0xff
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80038fa:	f001 fc97 	bl	800522c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80038fe:	f001 fc67 	bl	80051d0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003908:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800390a:	e011      	b.n	8003930 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d012      	beq.n	800393a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3310      	adds	r3, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fc75 	bl	8004208 <xTaskRemoveFromEventList>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003924:	f000 fd4c 	bl	80043c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003928:	7bbb      	ldrb	r3, [r7, #14]
 800392a:	3b01      	subs	r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003934:	2b00      	cmp	r3, #0
 8003936:	dce9      	bgt.n	800390c <prvUnlockQueue+0x60>
 8003938:	e000      	b.n	800393c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800393a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003944:	f001 fc72 	bl	800522c <vPortExitCritical>
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003958:	f001 fc3a 	bl	80051d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003964:	2301      	movs	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e001      	b.n	800396e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800396e:	f001 fc5d 	bl	800522c <vPortExitCritical>

    return xReturn;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003984:	f001 fc24 	bl	80051d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	429a      	cmp	r2, r3
 8003992:	d102      	bne.n	800399a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003994:	2301      	movs	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e001      	b.n	800399e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800399e:	f001 fc45 	bl	800522c <vPortExitCritical>

    return xReturn;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e014      	b.n	80039e6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039bc:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <vQueueAddToRegistry+0x4c>)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039c8:	490b      	ldr	r1, [pc, #44]	; (80039f8 <vQueueAddToRegistry+0x4c>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <vQueueAddToRegistry+0x4c>)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80039de:	e005      	b.n	80039ec <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b07      	cmp	r3, #7
 80039ea:	d9e7      	bls.n	80039bc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	20012e3c 	.word	0x20012e3c

080039fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003a0c:	f001 fbe0 	bl	80051d0 <vPortEnterCritical>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a16:	b25b      	sxtb	r3, r3
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a1c:	d103      	bne.n	8003a26 <vQueueWaitForMessageRestricted+0x2a>
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a32:	d103      	bne.n	8003a3c <vQueueWaitForMessageRestricted+0x40>
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a3c:	f001 fbf6 	bl	800522c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3324      	adds	r3, #36	; 0x24
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fbaf 	bl	80041b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7ff ff28 	bl	80038ac <prvUnlockQueue>
    }
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	; 0x30
 8003a68:	af04      	add	r7, sp, #16
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fcc3 	bl	8005404 <pvPortMalloc>
 8003a7e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00e      	beq.n	8003aa4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a86:	2058      	movs	r0, #88	; 0x58
 8003a88:	f001 fcbc 	bl	8005404 <pvPortMalloc>
 8003a8c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
 8003a9a:	e005      	b.n	8003aa8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f001 fd8d 	bl	80055bc <vPortFree>
 8003aa2:	e001      	b.n	8003aa8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d013      	beq.n	8003ad6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9303      	str	r3, [sp, #12]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	9302      	str	r3, [sp, #8]
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f80e 	bl	8003ae6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003aca:	69f8      	ldr	r0, [r7, #28]
 8003acc:	f000 f8a0 	bl	8003c10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e002      	b.n	8003adc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ada:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003adc:	69bb      	ldr	r3, [r7, #24]
    }
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b088      	sub	sp, #32
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	461a      	mov	r2, r3
 8003afe:	21a5      	movs	r1, #165	; 0xa5
 8003b00:	f001 fea7 	bl	8005852 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f023 0307 	bic.w	r3, r3, #7
 8003b1c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <prvInitialiseNewTask+0x56>
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e7fe      	b.n	8003b3a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01f      	beq.n	8003b82 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e012      	b.n	8003b6e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	7819      	ldrb	r1, [r3, #0]
 8003b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	3334      	adds	r3, #52	; 0x34
 8003b58:	460a      	mov	r2, r1
 8003b5a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d006      	beq.n	8003b76 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b09      	cmp	r3, #9
 8003b72:	d9e9      	bls.n	8003b48 <prvInitialiseNewTask+0x62>
 8003b74:	e000      	b.n	8003b78 <prvInitialiseNewTask+0x92>
            {
                break;
 8003b76:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b80:	e003      	b.n	8003b8a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d901      	bls.n	8003b94 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b90:	2304      	movs	r3, #4
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff f840 	bl	8002c30 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	3318      	adds	r3, #24
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff f83b 	bl	8002c30 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bbe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	f1c3 0205 	rsb	r2, r3, #5
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	3350      	adds	r3, #80	; 0x50
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 fe3a 	bl	8005852 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	3354      	adds	r3, #84	; 0x54
 8003be2:	2201      	movs	r2, #1
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 fe33 	bl	8005852 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	69b8      	ldr	r0, [r7, #24]
 8003bf2:	f001 f9c1 	bl	8004f78 <pxPortInitialiseStack>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c06:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c08:	bf00      	nop
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003c18:	f001 fada 	bl	80051d0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003c1c:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <prvAddNewTaskToReadyList+0xc0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <prvAddNewTaskToReadyList+0xc0>)
 8003c24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003c26:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <prvAddNewTaskToReadyList+0xc4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <prvAddNewTaskToReadyList+0xc4>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <prvAddNewTaskToReadyList+0xc0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d110      	bne.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003c3c:	f000 fbe4 	bl	8004408 <prvInitialiseTaskLists>
 8003c40:	e00d      	b.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003c42:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <prvAddNewTaskToReadyList+0xc8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c4a:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <prvAddNewTaskToReadyList+0xc4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d802      	bhi.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <prvAddNewTaskToReadyList+0xc4>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <prvAddNewTaskToReadyList+0xcc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <prvAddNewTaskToReadyList+0xcc>)
 8003c66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <prvAddNewTaskToReadyList+0xcc>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <prvAddNewTaskToReadyList+0xd0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <prvAddNewTaskToReadyList+0xd0>)
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <prvAddNewTaskToReadyList+0xd4>)
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f7fe ffd6 	bl	8002c4a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003c9e:	f001 fac5 	bl	800522c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <prvAddNewTaskToReadyList+0xc8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00e      	beq.n	8003cc8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <prvAddNewTaskToReadyList+0xc4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d207      	bcs.n	8003cc8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <prvAddNewTaskToReadyList+0xd8>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	2000010c 	.word	0x2000010c
 8003cd4:	20000034 	.word	0x20000034
 8003cd8:	20000118 	.word	0x20000118
 8003cdc:	20000128 	.word	0x20000128
 8003ce0:	20000114 	.word	0x20000114
 8003ce4:	20000038 	.word	0x20000038
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <vTaskDelay+0x60>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <vTaskDelay+0x2e>
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	e7fe      	b.n	8003d18 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8003d1a:	f000 f86b 	bl	8003df4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d1e:	2100      	movs	r1, #0
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fdb5 	bl	8004890 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003d26:	f000 f873 	bl	8003e10 <xTaskResumeAll>
 8003d2a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <vTaskDelay+0x64>)
 8003d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000134 	.word	0x20000134
 8003d50:	e000ed04 	.word	0xe000ed04

08003d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003d5a:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <vTaskStartScheduler+0x84>)
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2300      	movs	r3, #0
 8003d64:	2282      	movs	r2, #130	; 0x82
 8003d66:	491d      	ldr	r1, [pc, #116]	; (8003ddc <vTaskStartScheduler+0x88>)
 8003d68:	481d      	ldr	r0, [pc, #116]	; (8003de0 <vTaskStartScheduler+0x8c>)
 8003d6a:	f7ff fe7b 	bl	8003a64 <xTaskCreate>
 8003d6e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d102      	bne.n	8003d7c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003d76:	f000 fdf1 	bl	800495c <xTimerCreateTimerTask>
 8003d7a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d115      	bne.n	8003dae <vTaskStartScheduler+0x5a>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <vTaskStartScheduler+0x90>)
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d9a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <vTaskStartScheduler+0x94>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <vTaskStartScheduler+0x98>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003da8:	f001 f974 	bl	8005094 <xPortStartScheduler>
 8003dac:	e00d      	b.n	8003dca <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db4:	d109      	bne.n	8003dca <vTaskStartScheduler+0x76>
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	e7fe      	b.n	8003dc8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <vTaskStartScheduler+0x9c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000130 	.word	0x20000130
 8003ddc:	0800588c 	.word	0x0800588c
 8003de0:	080043d9 	.word	0x080043d9
 8003de4:	2000012c 	.word	0x2000012c
 8003de8:	20000118 	.word	0x20000118
 8003dec:	20000110 	.word	0x20000110
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <vTaskSuspendAll+0x18>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	4a03      	ldr	r2, [pc, #12]	; (8003e0c <vTaskSuspendAll+0x18>)
 8003e00:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000134 	.word	0x20000134

08003e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <xTaskResumeAll+0x2a>
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	e7fe      	b.n	8003e38 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003e3a:	f001 f9c9 	bl	80051d0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e46:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <xTaskResumeAll+0x114>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d161      	bne.n	8003f14 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e50:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <xTaskResumeAll+0x118>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05d      	beq.n	8003f14 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e58:	e02e      	b.n	8003eb8 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3318      	adds	r3, #24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe ff4c 	bl	8002d04 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe ff47 	bl	8002d04 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <xTaskResumeAll+0x120>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <xTaskResumeAll+0x120>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <xTaskResumeAll+0x124>)
 8003e96:	441a      	add	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7fe fed3 	bl	8002c4a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <xTaskResumeAll+0x128>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <xTaskResumeAll+0x12c>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1cc      	bne.n	8003e5a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003ec6:	f000 fb1b 	bl	8004500 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <xTaskResumeAll+0x130>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d010      	beq.n	8003ef8 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003ed6:	f000 f847 	bl	8003f68 <xTaskIncrementTick>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <xTaskResumeAll+0x12c>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f1      	bne.n	8003ed6 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <xTaskResumeAll+0x130>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <xTaskResumeAll+0x12c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <xTaskResumeAll+0x134>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003f14:	f001 f98a 	bl	800522c <vPortExitCritical>

    return xAlreadyYielded;
 8003f18:	68bb      	ldr	r3, [r7, #8]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000134 	.word	0x20000134
 8003f28:	2000010c 	.word	0x2000010c
 8003f2c:	200000cc 	.word	0x200000cc
 8003f30:	20000114 	.word	0x20000114
 8003f34:	20000038 	.word	0x20000038
 8003f38:	20000034 	.word	0x20000034
 8003f3c:	20000120 	.word	0x20000120
 8003f40:	2000011c 	.word	0x2000011c
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <xTaskGetTickCount+0x1c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003f54:	687b      	ldr	r3, [r7, #4]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000110 	.word	0x20000110

08003f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f72:	4b46      	ldr	r3, [pc, #280]	; (800408c <xTaskIncrementTick+0x124>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d17e      	bne.n	8004078 <xTaskIncrementTick+0x110>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f7a:	4b45      	ldr	r3, [pc, #276]	; (8004090 <xTaskIncrementTick+0x128>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003f82:	4a43      	ldr	r2, [pc, #268]	; (8004090 <xTaskIncrementTick+0x128>)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d11f      	bne.n	8003fce <xTaskIncrementTick+0x66>
        {
            taskSWITCH_DELAYED_LISTS();
 8003f8e:	4b41      	ldr	r3, [pc, #260]	; (8004094 <xTaskIncrementTick+0x12c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <xTaskIncrementTick+0x44>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	e7fe      	b.n	8003faa <xTaskIncrementTick+0x42>
 8003fac:	4b39      	ldr	r3, [pc, #228]	; (8004094 <xTaskIncrementTick+0x12c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <xTaskIncrementTick+0x130>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a37      	ldr	r2, [pc, #220]	; (8004094 <xTaskIncrementTick+0x12c>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4a37      	ldr	r2, [pc, #220]	; (8004098 <xTaskIncrementTick+0x130>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <xTaskIncrementTick+0x134>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a35      	ldr	r2, [pc, #212]	; (800409c <xTaskIncrementTick+0x134>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	f000 fa99 	bl	8004500 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003fce:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <xTaskIncrementTick+0x138>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d348      	bcc.n	800406a <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd8:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <xTaskIncrementTick+0x12c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <xTaskIncrementTick+0x84>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <xTaskIncrementTick+0x138>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe8:	601a      	str	r2, [r3, #0]
                    break;
 8003fea:	e03e      	b.n	800406a <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fec:	4b29      	ldr	r3, [pc, #164]	; (8004094 <xTaskIncrementTick+0x12c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d203      	bcs.n	800400c <xTaskIncrementTick+0xa4>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004004:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <xTaskIncrementTick+0x138>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800400a:	e02e      	b.n	800406a <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3304      	adds	r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fe77 	bl	8002d04 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <xTaskIncrementTick+0xc0>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3318      	adds	r3, #24
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fe6e 	bl	8002d04 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <xTaskIncrementTick+0x13c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <xTaskIncrementTick+0x13c>)
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <xTaskIncrementTick+0x140>)
 8004048:	441a      	add	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7fe fdfa 	bl	8002c4a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <xTaskIncrementTick+0x144>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	429a      	cmp	r2, r3
 8004062:	d3b9      	bcc.n	8003fd8 <xTaskIncrementTick+0x70>
                            {
                                xSwitchRequired = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004068:	e7b6      	b.n	8003fd8 <xTaskIncrementTick+0x70>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <xTaskIncrementTick+0x148>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <xTaskIncrementTick+0x11a>
                {
                    xSwitchRequired = pdTRUE;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e004      	b.n	8004082 <xTaskIncrementTick+0x11a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <xTaskIncrementTick+0x14c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <xTaskIncrementTick+0x14c>)
 8004080:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004082:	697b      	ldr	r3, [r7, #20]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000134 	.word	0x20000134
 8004090:	20000110 	.word	0x20000110
 8004094:	200000c4 	.word	0x200000c4
 8004098:	200000c8 	.word	0x200000c8
 800409c:	20000124 	.word	0x20000124
 80040a0:	2000012c 	.word	0x2000012c
 80040a4:	20000114 	.word	0x20000114
 80040a8:	20000038 	.word	0x20000038
 80040ac:	20000034 	.word	0x20000034
 80040b0:	20000120 	.word	0x20000120
 80040b4:	2000011c 	.word	0x2000011c

080040b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <vTaskSwitchContext+0xa0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80040c6:	4b25      	ldr	r3, [pc, #148]	; (800415c <vTaskSwitchContext+0xa4>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80040cc:	e03e      	b.n	800414c <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <vTaskSwitchContext+0xa4>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d4:	4b22      	ldr	r3, [pc, #136]	; (8004160 <vTaskSwitchContext+0xa8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80040e2:	7afb      	ldrb	r3, [r7, #11]
 80040e4:	f1c3 031f 	rsb	r3, r3, #31
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	491e      	ldr	r1, [pc, #120]	; (8004164 <vTaskSwitchContext+0xac>)
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <vTaskSwitchContext+0x5a>
        __asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	e7fe      	b.n	8004110 <vTaskSwitchContext+0x58>
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4a11      	ldr	r2, [pc, #68]	; (8004164 <vTaskSwitchContext+0xac>)
 800411e:	4413      	add	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	605a      	str	r2, [r3, #4]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3308      	adds	r3, #8
 8004134:	429a      	cmp	r2, r3
 8004136:	d104      	bne.n	8004142 <vTaskSwitchContext+0x8a>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a07      	ldr	r2, [pc, #28]	; (8004168 <vTaskSwitchContext+0xb0>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000134 	.word	0x20000134
 800415c:	20000120 	.word	0x20000120
 8004160:	20000114 	.word	0x20000114
 8004164:	20000038 	.word	0x20000038
 8004168:	20000034 	.word	0x20000034

0800416c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <vTaskPlaceOnEventList+0x24>
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e7fe      	b.n	800418e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <vTaskPlaceOnEventList+0x44>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3318      	adds	r3, #24
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fe fd7a 	bl	8002c92 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800419e:	2101      	movs	r1, #1
 80041a0:	6838      	ldr	r0, [r7, #0]
 80041a2:	f000 fb75 	bl	8004890 <prvAddCurrentTaskToDelayedList>
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000034 	.word	0x20000034

080041b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <vTaskPlaceOnEventListRestricted+0x26>
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e7fe      	b.n	80041d8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <vTaskPlaceOnEventListRestricted+0x50>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3318      	adds	r3, #24
 80041e0:	4619      	mov	r1, r3
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7fe fd31 	bl	8002c4a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	68b8      	ldr	r0, [r7, #8]
 80041f8:	f000 fb4a 	bl	8004890 <prvAddCurrentTaskToDelayedList>
    }
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000034 	.word	0x20000034

08004208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <xTaskRemoveFromEventList+0x2a>
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e7fe      	b.n	8004230 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3318      	adds	r3, #24
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fd64 	bl	8002d04 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <xTaskRemoveFromEventList+0xac>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11c      	bne.n	800427e <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fd5b 	bl	8002d04 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	2201      	movs	r2, #1
 8004254:	409a      	lsls	r2, r3
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <xTaskRemoveFromEventList+0xb0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <xTaskRemoveFromEventList+0xb0>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <xTaskRemoveFromEventList+0xb4>)
 800426e:	441a      	add	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fe fce7 	bl	8002c4a <vListInsertEnd>
 800427c:	e005      	b.n	800428a <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	3318      	adds	r3, #24
 8004282:	4619      	mov	r1, r3
 8004284:	480e      	ldr	r0, [pc, #56]	; (80042c0 <xTaskRemoveFromEventList+0xb8>)
 8004286:	f7fe fce0 	bl	8002c4a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <xTaskRemoveFromEventList+0xbc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	429a      	cmp	r2, r3
 8004296:	d905      	bls.n	80042a4 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <xTaskRemoveFromEventList+0xc0>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e001      	b.n	80042a8 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80042a8:	697b      	ldr	r3, [r7, #20]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000134 	.word	0x20000134
 80042b8:	20000114 	.word	0x20000114
 80042bc:	20000038 	.word	0x20000038
 80042c0:	200000cc 	.word	0x200000cc
 80042c4:	20000034 	.word	0x20000034
 80042c8:	20000120 	.word	0x20000120

080042cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <vTaskInternalSetTimeOutState+0x24>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <vTaskInternalSetTimeOutState+0x28>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	20000124 	.word	0x20000124
 80042f4:	20000110 	.word	0x20000110

080042f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <xTaskCheckForTimeOut+0x24>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	e7fe      	b.n	800431a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <xTaskCheckForTimeOut+0x3e>
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e7fe      	b.n	8004334 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004336:	f000 ff4b 	bl	80051d0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <xTaskCheckForTimeOut+0xc0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004352:	d102      	bne.n	800435a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e026      	b.n	80043a8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <xTaskCheckForTimeOut+0xc4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d00a      	beq.n	800437c <xTaskCheckForTimeOut+0x84>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d305      	bcc.n	800437c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e015      	b.n	80043a8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	429a      	cmp	r2, r3
 8004384:	d20b      	bcs.n	800439e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	1ad2      	subs	r2, r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ff9a 	bl	80042cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e004      	b.n	80043a8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80043a8:	f000 ff40 	bl	800522c <vPortExitCritical>

    return xReturn;
 80043ac:	69fb      	ldr	r3, [r7, #28]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000110 	.word	0x20000110
 80043bc:	20000124 	.word	0x20000124

080043c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <vTaskMissedYield+0x14>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	20000120 	.word	0x20000120

080043d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80043e0:	f000 f852 	bl	8004488 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <prvIdleTask+0x28>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d9f9      	bls.n	80043e0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <prvIdleTask+0x2c>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80043fc:	e7f0      	b.n	80043e0 <prvIdleTask+0x8>
 80043fe:	bf00      	nop
 8004400:	20000038 	.word	0x20000038
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	e00c      	b.n	800442e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4a12      	ldr	r2, [pc, #72]	; (8004468 <prvInitialiseTaskLists+0x60>)
 8004420:	4413      	add	r3, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fbe4 	bl	8002bf0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3301      	adds	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d9ef      	bls.n	8004414 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004434:	480d      	ldr	r0, [pc, #52]	; (800446c <prvInitialiseTaskLists+0x64>)
 8004436:	f7fe fbdb 	bl	8002bf0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800443a:	480d      	ldr	r0, [pc, #52]	; (8004470 <prvInitialiseTaskLists+0x68>)
 800443c:	f7fe fbd8 	bl	8002bf0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004440:	480c      	ldr	r0, [pc, #48]	; (8004474 <prvInitialiseTaskLists+0x6c>)
 8004442:	f7fe fbd5 	bl	8002bf0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004446:	480c      	ldr	r0, [pc, #48]	; (8004478 <prvInitialiseTaskLists+0x70>)
 8004448:	f7fe fbd2 	bl	8002bf0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800444c:	480b      	ldr	r0, [pc, #44]	; (800447c <prvInitialiseTaskLists+0x74>)
 800444e:	f7fe fbcf 	bl	8002bf0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <prvInitialiseTaskLists+0x78>)
 8004454:	4a05      	ldr	r2, [pc, #20]	; (800446c <prvInitialiseTaskLists+0x64>)
 8004456:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <prvInitialiseTaskLists+0x7c>)
 800445a:	4a05      	ldr	r2, [pc, #20]	; (8004470 <prvInitialiseTaskLists+0x68>)
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000038 	.word	0x20000038
 800446c:	2000009c 	.word	0x2000009c
 8004470:	200000b0 	.word	0x200000b0
 8004474:	200000cc 	.word	0x200000cc
 8004478:	200000e0 	.word	0x200000e0
 800447c:	200000f8 	.word	0x200000f8
 8004480:	200000c4 	.word	0x200000c4
 8004484:	200000c8 	.word	0x200000c8

08004488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800448e:	e019      	b.n	80044c4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004490:	f000 fe9e 	bl	80051d0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <prvCheckTasksWaitingTermination+0x4c>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fc2f 	bl	8002d04 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <prvCheckTasksWaitingTermination+0x50>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <prvCheckTasksWaitingTermination+0x50>)
 80044ae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <prvCheckTasksWaitingTermination+0x54>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <prvCheckTasksWaitingTermination+0x54>)
 80044b8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80044ba:	f000 feb7 	bl	800522c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f80e 	bl	80044e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <prvCheckTasksWaitingTermination+0x54>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e1      	bne.n	8004490 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	200000e0 	.word	0x200000e0
 80044d8:	2000010c 	.word	0x2000010c
 80044dc:	200000f4 	.word	0x200000f4

080044e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f865 	bl	80055bc <vPortFree>
                vPortFree( pxTCB );
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 f862 	bl	80055bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004504:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <prvResetNextTaskUnblockTime+0x30>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d104      	bne.n	8004518 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <prvResetNextTaskUnblockTime+0x34>)
 8004510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004514:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004516:	e005      	b.n	8004524 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <prvResetNextTaskUnblockTime+0x30>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a04      	ldr	r2, [pc, #16]	; (8004534 <prvResetNextTaskUnblockTime+0x34>)
 8004522:	6013      	str	r3, [r2, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	200000c4 	.word	0x200000c4
 8004534:	2000012c 	.word	0x2000012c

08004538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <xTaskGetSchedulerState+0x34>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004546:	2301      	movs	r3, #1
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	e008      	b.n	800455e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <xTaskGetSchedulerState+0x38>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004554:	2302      	movs	r3, #2
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	e001      	b.n	800455e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800455e:	687b      	ldr	r3, [r7, #4]
    }
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000118 	.word	0x20000118
 8004570:	20000134 	.word	0x20000134

08004574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d05e      	beq.n	8004648 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <xTaskPriorityInherit+0xe0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d24e      	bcs.n	8004636 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	db06      	blt.n	80045ae <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a0:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <xTaskPriorityInherit+0xe0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f1c3 0205 	rsb	r2, r3, #5
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6959      	ldr	r1, [r3, #20]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a26      	ldr	r2, [pc, #152]	; (8004658 <xTaskPriorityInherit+0xe4>)
 80045c0:	4413      	add	r3, r2
 80045c2:	4299      	cmp	r1, r3
 80045c4:	d12f      	bne.n	8004626 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fb9a 	bl	8002d04 <uxListRemove>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	2201      	movs	r2, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43da      	mvns	r2, r3
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <xTaskPriorityInherit+0xe8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4013      	ands	r3, r2
 80045e8:	4a1c      	ldr	r2, [pc, #112]	; (800465c <xTaskPriorityInherit+0xe8>)
 80045ea:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <xTaskPriorityInherit+0xe0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	2201      	movs	r2, #1
 80045fc:	409a      	lsls	r2, r3
 80045fe:	4b17      	ldr	r3, [pc, #92]	; (800465c <xTaskPriorityInherit+0xe8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <xTaskPriorityInherit+0xe8>)
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4a10      	ldr	r2, [pc, #64]	; (8004658 <xTaskPriorityInherit+0xe4>)
 8004616:	441a      	add	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7fe fb13 	bl	8002c4a <vListInsertEnd>
 8004624:	e004      	b.n	8004630 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <xTaskPriorityInherit+0xe0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e008      	b.n	8004648 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <xTaskPriorityInherit+0xe0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d201      	bcs.n	8004648 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004648:	68fb      	ldr	r3, [r7, #12]
    }
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000034 	.word	0x20000034
 8004658:	20000038 	.word	0x20000038
 800465c:	20000114 	.word	0x20000114

08004660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d061      	beq.n	800473a <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004676:	4b33      	ldr	r3, [pc, #204]	; (8004744 <xTaskPriorityDisinherit+0xe4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	429a      	cmp	r2, r3
 800467e:	d009      	beq.n	8004694 <xTaskPriorityDisinherit+0x34>
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e7fe      	b.n	8004692 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <xTaskPriorityDisinherit+0x50>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	e7fe      	b.n	80046ae <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	1e5a      	subs	r2, r3, #1
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d039      	beq.n	800473a <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d135      	bne.n	800473a <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fb16 	bl	8002d04 <uxListRemove>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	2201      	movs	r2, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43da      	mvns	r2, r3
 80046ea:	4b17      	ldr	r3, [pc, #92]	; (8004748 <xTaskPriorityDisinherit+0xe8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4013      	ands	r3, r2
 80046f0:	4a15      	ldr	r2, [pc, #84]	; (8004748 <xTaskPriorityDisinherit+0xe8>)
 80046f2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f1c3 0205 	rsb	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <xTaskPriorityDisinherit+0xe8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	4a0c      	ldr	r2, [pc, #48]	; (8004748 <xTaskPriorityDisinherit+0xe8>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <xTaskPriorityDisinherit+0xec>)
 8004728:	441a      	add	r2, r3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fe fa8a 	bl	8002c4a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800473a:	697b      	ldr	r3, [r7, #20]
    }
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000034 	.word	0x20000034
 8004748:	20000114 	.word	0x20000114
 800474c:	20000038 	.word	0x20000038

08004750 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800475e:	2301      	movs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d075      	beq.n	8004854 <vTaskPriorityDisinheritAfterTimeout+0x104>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e7fe      	b.n	8004782 <vTaskPriorityDisinheritAfterTimeout+0x32>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d902      	bls.n	8004794 <vTaskPriorityDisinheritAfterTimeout+0x44>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e002      	b.n	800479a <vTaskPriorityDisinheritAfterTimeout+0x4a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004798:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d057      	beq.n	8004854 <vTaskPriorityDisinheritAfterTimeout+0x104>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d152      	bne.n	8004854 <vTaskPriorityDisinheritAfterTimeout+0x104>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80047ae:	4b2b      	ldr	r3, [pc, #172]	; (800485c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d109      	bne.n	80047cc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	e7fe      	b.n	80047ca <vTaskPriorityDisinheritAfterTimeout+0x7a>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db04      	blt.n	80047ea <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f1c3 0205 	rsb	r2, r3, #5
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	6959      	ldr	r1, [r3, #20]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4a19      	ldr	r2, [pc, #100]	; (8004860 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80047fa:	4413      	add	r3, r2
 80047fc:	4299      	cmp	r1, r3
 80047fe:	d129      	bne.n	8004854 <vTaskPriorityDisinheritAfterTimeout+0x104>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fa7d 	bl	8002d04 <uxListRemove>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <vTaskPriorityDisinheritAfterTimeout+0xd6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	2201      	movs	r2, #1
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43da      	mvns	r2, r3
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4013      	ands	r3, r2
 8004822:	4a10      	ldr	r2, [pc, #64]	; (8004864 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004824:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	2201      	movs	r2, #1
 800482c:	409a      	lsls	r2, r3
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4a06      	ldr	r2, [pc, #24]	; (8004860 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004846:	441a      	add	r2, r3
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f7fe f9fb 	bl	8002c4a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004854:	bf00      	nop
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000034 	.word	0x20000034
 8004860:	20000038 	.word	0x20000038
 8004864:	20000114 	.word	0x20000114

08004868 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <pvTaskIncrementMutexHeldCount+0x24>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <pvTaskIncrementMutexHeldCount+0x24>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800487a:	3201      	adds	r2, #1
 800487c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800487e:	4b03      	ldr	r3, [pc, #12]	; (800488c <pvTaskIncrementMutexHeldCount+0x24>)
 8004880:	681b      	ldr	r3, [r3, #0]
    }
 8004882:	4618      	mov	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000034 	.word	0x20000034

08004890 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <prvAddCurrentTaskToDelayedList+0xb0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fa2c 	bl	8002d04 <uxListRemove>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048b2:	4b24      	ldr	r3, [pc, #144]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	2201      	movs	r2, #1
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43da      	mvns	r2, r3
 80048c0:	4b21      	ldr	r3, [pc, #132]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4013      	ands	r3, r2
 80048c6:	4a20      	ldr	r2, [pc, #128]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d0:	d10a      	bne.n	80048e8 <prvAddCurrentTaskToDelayedList+0x58>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	481a      	ldr	r0, [pc, #104]	; (800494c <prvAddCurrentTaskToDelayedList+0xbc>)
 80048e2:	f7fe f9b2 	bl	8002c4a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80048e6:	e026      	b.n	8004936 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d209      	bcs.n	8004914 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fe f9c0 	bl	8002c92 <vListInsert>
}
 8004912:	e010      	b.n	8004936 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3304      	adds	r3, #4
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f7fe f9b6 	bl	8002c92 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	d202      	bcs.n	8004936 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000110 	.word	0x20000110
 8004944:	20000034 	.word	0x20000034
 8004948:	20000114 	.word	0x20000114
 800494c:	200000f8 	.word	0x200000f8
 8004950:	200000c8 	.word	0x200000c8
 8004954:	200000c4 	.word	0x200000c4
 8004958:	2000012c 	.word	0x2000012c

0800495c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004966:	f000 fad1 	bl	8004f0c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <xTimerCreateTimerTask+0x54>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <xTimerCreateTimerTask+0x58>)
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	2302      	movs	r3, #2
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004980:	490d      	ldr	r1, [pc, #52]	; (80049b8 <xTimerCreateTimerTask+0x5c>)
 8004982:	480e      	ldr	r0, [pc, #56]	; (80049bc <xTimerCreateTimerTask+0x60>)
 8004984:	f7ff f86e 	bl	8003a64 <xTaskCreate>
 8004988:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <xTimerCreateTimerTask+0x48>
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	e7fe      	b.n	80049a2 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80049a4:	687b      	ldr	r3, [r7, #4]
    }
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000168 	.word	0x20000168
 80049b4:	2000016c 	.word	0x2000016c
 80049b8:	08005894 	.word	0x08005894
 80049bc:	08004af1 	.word	0x08004af1

080049c0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <xTimerGenericCommand+0x2c>
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	e7fe      	b.n	80049ea <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <xTimerGenericCommand+0x94>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02a      	beq.n	8004a4a <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	dc18      	bgt.n	8004a38 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a06:	f7ff fd97 	bl	8004538 <xTaskGetSchedulerState>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d109      	bne.n	8004a24 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <xTimerGenericCommand+0x94>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	f107 0114 	add.w	r1, r7, #20
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1c:	f7fe fa84 	bl	8002f28 <xQueueGenericSend>
 8004a20:	6278      	str	r0, [r7, #36]	; 0x24
 8004a22:	e012      	b.n	8004a4a <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <xTimerGenericCommand+0x94>)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	f107 0114 	add.w	r1, r7, #20
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f7fe fa7a 	bl	8002f28 <xQueueGenericSend>
 8004a34:	6278      	str	r0, [r7, #36]	; 0x24
 8004a36:	e008      	b.n	8004a4a <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <xTimerGenericCommand+0x94>)
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	f107 0114 	add.w	r1, r7, #20
 8004a40:	2300      	movs	r3, #0
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	f7fe fb6a 	bl	800311c <xQueueGenericSendFromISR>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3728      	adds	r7, #40	; 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000168 	.word	0x20000168

08004a58 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <prvProcessExpiredTimer+0x94>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe f947 	bl	8002d04 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d021      	beq.n	8004ac8 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	18d1      	adds	r1, r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	6978      	ldr	r0, [r7, #20]
 8004a92:	f000 f8d1 	bl	8004c38 <prvInsertTimerInActiveList>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01e      	beq.n	8004ada <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff8a 	bl	80049c0 <xTimerGenericCommand>
 8004aac:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d112      	bne.n	8004ada <prvProcessExpiredTimer+0x82>
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	e7fe      	b.n	8004ac6 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	6978      	ldr	r0, [r7, #20]
 8004ae0:	4798      	blx	r3
    }
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000160 	.word	0x20000160

08004af0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f857 	bl	8004bb0 <prvGetNextExpireTime>
 8004b02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4619      	mov	r1, r3
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f803 	bl	8004b14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b0e:	f000 f8d5 	bl	8004cbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b12:	e7f1      	b.n	8004af8 <prvTimerTask+0x8>

08004b14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b1e:	f7ff f969 	bl	8003df4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f866 	bl	8004bf8 <prvSampleTimeNow>
 8004b2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d130      	bne.n	8004b96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <prvProcessTimerOrBlockTask+0x3c>
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d806      	bhi.n	8004b50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b42:	f7ff f965 	bl	8003e10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff85 	bl	8004a58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b4e:	e024      	b.n	8004b9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <prvProcessTimerOrBlockTask+0x90>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <prvProcessTimerOrBlockTask+0x50>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <prvProcessTimerOrBlockTask+0x52>
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <prvProcessTimerOrBlockTask+0x94>)
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	4619      	mov	r1, r3
 8004b76:	f7fe ff41 	bl	80039fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004b7a:	f7ff f949 	bl	8003e10 <xTaskResumeAll>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <prvProcessTimerOrBlockTask+0x98>)
 8004b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	f3bf 8f6f 	isb	sy
    }
 8004b94:	e001      	b.n	8004b9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004b96:	f7ff f93b 	bl	8003e10 <xTaskResumeAll>
    }
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000164 	.word	0x20000164
 8004ba8:	20000168 	.word	0x20000168
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <prvGetNextExpireTime+0x44>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <prvGetNextExpireTime+0x16>
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	e000      	b.n	8004bc8 <prvGetNextExpireTime+0x18>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <prvGetNextExpireTime+0x44>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e001      	b.n	8004be4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004be4:	68fb      	ldr	r3, [r7, #12]
    }
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000160 	.word	0x20000160

08004bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c00:	f7ff f9a2 	bl	8003f48 <xTaskGetTickCount>
 8004c04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <prvSampleTimeNow+0x3c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d205      	bcs.n	8004c1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c10:	f000 f918 	bl	8004e44 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e002      	b.n	8004c22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c22:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <prvSampleTimeNow+0x3c>)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c28:	68fb      	ldr	r3, [r7, #12]
    }
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000170 	.word	0x20000170

08004c38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d812      	bhi.n	8004c84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	1ad2      	subs	r2, r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d302      	bcc.n	8004c72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e01b      	b.n	8004caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c72:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <prvInsertTimerInActiveList+0x7c>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f7fe f808 	bl	8002c92 <vListInsert>
 8004c82:	e012      	b.n	8004caa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d206      	bcs.n	8004c9a <prvInsertTimerInActiveList+0x62>
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e007      	b.n	8004caa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <prvInsertTimerInActiveList+0x80>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7fd fff4 	bl	8002c92 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004caa:	697b      	ldr	r3, [r7, #20]
    }
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000164 	.word	0x20000164
 8004cb8:	20000160 	.word	0x20000160

08004cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08c      	sub	sp, #48	; 0x30
 8004cc0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cc2:	e0ac      	b.n	8004e1e <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f2c0 80a8 	blt.w	8004e1c <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe f811 	bl	8002d04 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff87 	bl	8004bf8 <prvSampleTimeNow>
 8004cea:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b09      	cmp	r3, #9
 8004cf0:	f200 8095 	bhi.w	8004e1e <prvProcessReceivedCommands+0x162>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <prvProcessReceivedCommands+0x40>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d97 	.word	0x08004d97
 8004d0c:	08004dab 	.word	0x08004dab
 8004d10:	08004df3 	.word	0x08004df3
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004d97 	.word	0x08004d97
 8004d20:	08004dab 	.word	0x08004dab
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	18d1      	adds	r1, r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d44:	f7ff ff78 	bl	8004c38 <prvInsertTimerInActiveList>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d067      	beq.n	8004e1e <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d54:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05c      	beq.n	8004e1e <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	2100      	movs	r1, #0
 8004d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d76:	f7ff fe23 	bl	80049c0 <xTimerGenericCommand>
 8004d7a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d14d      	bne.n	8004e1e <prvProcessReceivedCommands+0x162>
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e7fe      	b.n	8004d94 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004da8:	e039      	b.n	8004e1e <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <prvProcessReceivedCommands+0x122>
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e7fe      	b.n	8004ddc <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	18d1      	adds	r1, r2, r3
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	6a3a      	ldr	r2, [r7, #32]
 8004dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dec:	f7ff ff24 	bl	8004c38 <prvInsertTimerInActiveList>
                        break;
 8004df0:	e015      	b.n	8004e1e <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8004e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e02:	f000 fbdb 	bl	80055bc <vPortFree>
 8004e06:	e00a      	b.n	8004e1e <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e1a:	e000      	b.n	8004e1e <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004e1c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <prvProcessReceivedCommands+0x184>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f107 0108 	add.w	r1, r7, #8
 8004e26:	2200      	movs	r2, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe fab3 	bl	8003394 <xQueueReceive>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f af47 	bne.w	8004cc4 <prvProcessReceivedCommands+0x8>
        }
    }
 8004e36:	bf00      	nop
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000168 	.word	0x20000168

08004e44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e4a:	e047      	b.n	8004edc <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e4c:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <prvSwitchTimerLists+0xc0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e56:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <prvSwitchTimerLists+0xc0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fd ff4d 	bl	8002d04 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02d      	beq.n	8004edc <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d90e      	bls.n	8004eb0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e9e:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <prvSwitchTimerLists+0xc0>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7fd fef2 	bl	8002c92 <vListInsert>
 8004eae:	e015      	b.n	8004edc <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	2100      	movs	r1, #0
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fd80 	bl	80049c0 <xTimerGenericCommand>
 8004ec0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <prvSwitchTimerLists+0x98>
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	e7fe      	b.n	8004eda <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <prvSwitchTimerLists+0xc0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1b2      	bne.n	8004e4c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <prvSwitchTimerLists+0xc0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <prvSwitchTimerLists+0xc4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <prvSwitchTimerLists+0xc0>)
 8004ef2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ef4:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <prvSwitchTimerLists+0xc4>)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	6013      	str	r3, [r2, #0]
    }
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000160 	.word	0x20000160
 8004f08:	20000164 	.word	0x20000164

08004f0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004f10:	f000 f95e 	bl	80051d0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004f14:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <prvCheckForValidListAndQueue+0x54>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d11d      	bne.n	8004f58 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004f1c:	4811      	ldr	r0, [pc, #68]	; (8004f64 <prvCheckForValidListAndQueue+0x58>)
 8004f1e:	f7fd fe67 	bl	8002bf0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004f22:	4811      	ldr	r0, [pc, #68]	; (8004f68 <prvCheckForValidListAndQueue+0x5c>)
 8004f24:	f7fd fe64 	bl	8002bf0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <prvCheckForValidListAndQueue+0x60>)
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <prvCheckForValidListAndQueue+0x58>)
 8004f2c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <prvCheckForValidListAndQueue+0x64>)
 8004f30:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <prvCheckForValidListAndQueue+0x5c>)
 8004f32:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f34:	2200      	movs	r2, #0
 8004f36:	210c      	movs	r1, #12
 8004f38:	200a      	movs	r0, #10
 8004f3a:	f7fd ff75 	bl	8002e28 <xQueueGenericCreate>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <prvCheckForValidListAndQueue+0x54>)
 8004f42:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <prvCheckForValidListAndQueue+0x54>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <prvCheckForValidListAndQueue+0x54>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4908      	ldr	r1, [pc, #32]	; (8004f74 <prvCheckForValidListAndQueue+0x68>)
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fd2a 	bl	80039ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f58:	f000 f968 	bl	800522c <vPortExitCritical>
    }
 8004f5c:	bf00      	nop
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000168 	.word	0x20000168
 8004f64:	20000138 	.word	0x20000138
 8004f68:	2000014c 	.word	0x2000014c
 8004f6c:	20000160 	.word	0x20000160
 8004f70:	20000164 	.word	0x20000164
 8004f74:	0800589c 	.word	0x0800589c

08004f78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3b04      	subs	r3, #4
 8004f88:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3b04      	subs	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f023 0201 	bic.w	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3b04      	subs	r3, #4
 8004fa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004fa8:	4a0c      	ldr	r2, [pc, #48]	; (8004fdc <pxPortInitialiseStack+0x64>)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3b14      	subs	r3, #20
 8004fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f06f 0202 	mvn.w	r2, #2
 8004fc6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3b20      	subs	r3, #32
 8004fcc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004fce:	68fb      	ldr	r3, [r7, #12]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	08004fe1 	.word	0x08004fe1

08004fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <prvTaskExitError+0x50>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff2:	d009      	beq.n	8005008 <prvTaskExitError+0x28>
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e7fe      	b.n	8005006 <prvTaskExitError+0x26>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800501a:	bf00      	nop
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0fc      	beq.n	800501c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000010 	.word	0x20000010
	...

08005040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <pxCurrentTCBConst2>)
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	6808      	ldr	r0, [r1, #0]
 8005046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504a:	f380 8809 	msr	PSP, r0
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8811 	msr	BASEPRI, r0
 800505a:	4770      	bx	lr
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst2>:
 8005060:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005068:	4808      	ldr	r0, [pc, #32]	; (800508c <prvPortStartFirstTask+0x24>)
 800506a:	6800      	ldr	r0, [r0, #0]
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	f380 8808 	msr	MSP, r0
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8814 	msr	CONTROL, r0
 800507a:	b662      	cpsie	i
 800507c:	b661      	cpsie	f
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	df00      	svc	0
 8005088:	bf00      	nop
 800508a:	0000      	.short	0x0000
 800508c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop

08005094 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800509a:	4b44      	ldr	r3, [pc, #272]	; (80051ac <xPortStartScheduler+0x118>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a44      	ldr	r2, [pc, #272]	; (80051b0 <xPortStartScheduler+0x11c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d109      	bne.n	80050b8 <xPortStartScheduler+0x24>
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e7fe      	b.n	80050b6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050b8:	4b3c      	ldr	r3, [pc, #240]	; (80051ac <xPortStartScheduler+0x118>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <xPortStartScheduler+0x120>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d109      	bne.n	80050d6 <xPortStartScheduler+0x42>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e7fe      	b.n	80050d4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <xPortStartScheduler+0x124>)
 80050d8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	22ff      	movs	r2, #255	; 0xff
 80050e6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	4b30      	ldr	r3, [pc, #192]	; (80051bc <xPortStartScheduler+0x128>)
 80050fc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050fe:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <xPortStartScheduler+0x12c>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005104:	e009      	b.n	800511a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005106:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <xPortStartScheduler+0x12c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3b01      	subs	r3, #1
 800510c:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <xPortStartScheduler+0x12c>)
 800510e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	b2db      	uxtb	r3, r3
 8005118:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005122:	2b80      	cmp	r3, #128	; 0x80
 8005124:	d0ef      	beq.n	8005106 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005126:	4b26      	ldr	r3, [pc, #152]	; (80051c0 <xPortStartScheduler+0x12c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f1c3 0307 	rsb	r3, r3, #7
 800512e:	2b04      	cmp	r3, #4
 8005130:	d009      	beq.n	8005146 <xPortStartScheduler+0xb2>
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	e7fe      	b.n	8005144 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005146:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <xPortStartScheduler+0x12c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <xPortStartScheduler+0x12c>)
 800514e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <xPortStartScheduler+0x12c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <xPortStartScheduler+0x12c>)
 800515a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <xPortStartScheduler+0x130>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <xPortStartScheduler+0x130>)
 800516a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800516e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <xPortStartScheduler+0x130>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <xPortStartScheduler+0x130>)
 8005176:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800517a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800517c:	f000 f8d4 	bl	8005328 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <xPortStartScheduler+0x134>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005186:	f000 f8f3 	bl	8005370 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800518a:	4b10      	ldr	r3, [pc, #64]	; (80051cc <xPortStartScheduler+0x138>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a0f      	ldr	r2, [pc, #60]	; (80051cc <xPortStartScheduler+0x138>)
 8005190:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005194:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005196:	f7ff ff67 	bl	8005068 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800519a:	f7fe ff8d 	bl	80040b8 <vTaskSwitchContext>
    prvTaskExitError();
 800519e:	f7ff ff1f 	bl	8004fe0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	e000ed00 	.word	0xe000ed00
 80051b0:	410fc271 	.word	0x410fc271
 80051b4:	410fc270 	.word	0x410fc270
 80051b8:	e000e400 	.word	0xe000e400
 80051bc:	20000174 	.word	0x20000174
 80051c0:	20000178 	.word	0x20000178
 80051c4:	e000ed20 	.word	0xe000ed20
 80051c8:	20000010 	.word	0x20000010
 80051cc:	e000ef34 	.word	0xe000ef34

080051d0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80051e8:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <vPortEnterCritical+0x54>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <vPortEnterCritical+0x54>)
 80051f0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <vPortEnterCritical+0x54>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d10e      	bne.n	8005218 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <vPortEnterCritical+0x58>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <vPortEnterCritical+0x48>
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	e7fe      	b.n	8005216 <vPortEnterCritical+0x46>
    }
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000010 	.word	0x20000010
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <vPortExitCritical+0x4c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <vPortExitCritical+0x22>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	e7fe      	b.n	800524c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vPortExitCritical+0x4c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	4a08      	ldr	r2, [pc, #32]	; (8005278 <vPortExitCritical+0x4c>)
 8005256:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <vPortExitCritical+0x4c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <vPortExitCritical+0x3e>
 8005260:	2300      	movs	r3, #0
 8005262:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	20000010 	.word	0x20000010
 800527c:	00000000 	.word	0x00000000

08005280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005280:	f3ef 8009 	mrs	r0, PSP
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <pxCurrentTCBConst>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	f01e 0f10 	tst.w	lr, #16
 8005290:	bf08      	it	eq
 8005292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	6010      	str	r0, [r2, #0]
 800529c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052a4:	f380 8811 	msr	BASEPRI, r0
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f7fe ff02 	bl	80040b8 <vTaskSwitchContext>
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f380 8811 	msr	BASEPRI, r0
 80052bc:	bc09      	pop	{r0, r3}
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	6808      	ldr	r0, [r1, #0]
 80052c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c6:	f01e 0f10 	tst.w	lr, #16
 80052ca:	bf08      	it	eq
 80052cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052d0:	f380 8809 	msr	PSP, r0
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst>:
 80052e0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
        __asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005300:	f7fe fe32 	bl	8003f68 <xTaskIncrementTick>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <SysTick_Handler+0x3c>)
 800530c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <vPortSetupTimerInterrupt+0x34>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <vPortSetupTimerInterrupt+0x38>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <vPortSetupTimerInterrupt+0x3c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <vPortSetupTimerInterrupt+0x40>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	4a09      	ldr	r2, [pc, #36]	; (800536c <vPortSetupTimerInterrupt+0x44>)
 8005346:	3b01      	subs	r3, #1
 8005348:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800534a:	4b04      	ldr	r3, [pc, #16]	; (800535c <vPortSetupTimerInterrupt+0x34>)
 800534c:	2207      	movs	r2, #7
 800534e:	601a      	str	r2, [r3, #0]
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	e000e010 	.word	0xe000e010
 8005360:	e000e018 	.word	0xe000e018
 8005364:	20000000 	.word	0x20000000
 8005368:	10624dd3 	.word	0x10624dd3
 800536c:	e000e014 	.word	0xe000e014

08005370 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005370:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005380 <vPortEnableVFP+0x10>
 8005374:	6801      	ldr	r1, [r0, #0]
 8005376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800537a:	6001      	str	r1, [r0, #0]
 800537c:	4770      	bx	lr
 800537e:	0000      	.short	0x0000
 8005380:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800538e:	f3ef 8305 	mrs	r3, IPSR
 8005392:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d913      	bls.n	80053c2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <vPortValidateInterruptPriority+0x6c>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <vPortValidateInterruptPriority+0x70>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	7afa      	ldrb	r2, [r7, #11]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d209      	bcs.n	80053c2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	e7fe      	b.n	80053c0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <vPortValidateInterruptPriority+0x74>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053ca:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <vPortValidateInterruptPriority+0x78>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d909      	bls.n	80053e6 <vPortValidateInterruptPriority+0x5e>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	e7fe      	b.n	80053e4 <vPortValidateInterruptPriority+0x5c>
    }
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	e000e3f0 	.word	0xe000e3f0
 80053f8:	20000174 	.word	0x20000174
 80053fc:	e000ed0c 	.word	0xe000ed0c
 8005400:	20000178 	.word	0x20000178

08005404 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800540c:	2300      	movs	r3, #0
 800540e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005410:	f7fe fcf0 	bl	8003df4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005414:	4b63      	ldr	r3, [pc, #396]	; (80055a4 <pvPortMalloc+0x1a0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800541c:	f000 f92e 	bl	800567c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005420:	4b61      	ldr	r3, [pc, #388]	; (80055a8 <pvPortMalloc+0x1a4>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	f040 80a5 	bne.w	8005578 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d02c      	beq.n	800548e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005434:	2208      	movs	r2, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	d226      	bcs.n	800548e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8005440:	2208      	movs	r2, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b00      	cmp	r3, #0
 8005450:	d020      	beq.n	8005494 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f023 0307 	bic.w	r3, r3, #7
 8005458:	3308      	adds	r3, #8
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d213      	bcs.n	8005488 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f023 0307 	bic.w	r3, r3, #7
 8005466:	3308      	adds	r3, #8
 8005468:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <pvPortMalloc+0x90>
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	e7fe      	b.n	8005486 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800548c:	e002      	b.n	8005494 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	e000      	b.n	8005496 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005494:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d06d      	beq.n	8005578 <pvPortMalloc+0x174>
 800549c:	4b43      	ldr	r3, [pc, #268]	; (80055ac <pvPortMalloc+0x1a8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d868      	bhi.n	8005578 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80054a6:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <pvPortMalloc+0x1ac>)
 80054a8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80054aa:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <pvPortMalloc+0x1ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b0:	e004      	b.n	80054bc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d903      	bls.n	80054ce <pvPortMalloc+0xca>
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f1      	bne.n	80054b2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80054ce:	4b35      	ldr	r3, [pc, #212]	; (80055a4 <pvPortMalloc+0x1a0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d04f      	beq.n	8005578 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2208      	movs	r2, #8
 80054de:	4413      	add	r3, r2
 80054e0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	1ad2      	subs	r2, r2, r3
 80054f2:	2308      	movs	r3, #8
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d91e      	bls.n	8005538 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <pvPortMalloc+0x11c>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	e7fe      	b.n	800551e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005532:	69b8      	ldr	r0, [r7, #24]
 8005534:	f000 f904 	bl	8005740 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005538:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <pvPortMalloc+0x1a8>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	4a1a      	ldr	r2, [pc, #104]	; (80055ac <pvPortMalloc+0x1a8>)
 8005544:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005546:	4b19      	ldr	r3, [pc, #100]	; (80055ac <pvPortMalloc+0x1a8>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <pvPortMalloc+0x1b0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d203      	bcs.n	800555a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005552:	4b16      	ldr	r3, [pc, #88]	; (80055ac <pvPortMalloc+0x1a8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <pvPortMalloc+0x1b0>)
 8005558:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <pvPortMalloc+0x1a4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	431a      	orrs	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <pvPortMalloc+0x1b4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <pvPortMalloc+0x1b4>)
 8005576:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005578:	f7fe fc4a 	bl	8003e10 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <pvPortMalloc+0x196>
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e7fe      	b.n	8005598 <pvPortMalloc+0x194>
    return pvReturn;
 800559a:	69fb      	ldr	r3, [r7, #28]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3728      	adds	r7, #40	; 0x28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20012d84 	.word	0x20012d84
 80055a8:	20012d98 	.word	0x20012d98
 80055ac:	20012d88 	.word	0x20012d88
 80055b0:	20012d7c 	.word	0x20012d7c
 80055b4:	20012d8c 	.word	0x20012d8c
 80055b8:	20012d90 	.word	0x20012d90

080055bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d04b      	beq.n	8005666 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80055ce:	2308      	movs	r3, #8
 80055d0:	425b      	negs	r3, r3
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4413      	add	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	4b23      	ldr	r3, [pc, #140]	; (8005670 <vPortFree+0xb4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <vPortFree+0x42>
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e7fe      	b.n	80055fc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <vPortFree+0x5e>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	e7fe      	b.n	8005618 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <vPortFree+0xb4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01e      	beq.n	8005666 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11a      	bne.n	8005666 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <vPortFree+0xb4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	43db      	mvns	r3, r3
 800563a:	401a      	ands	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005640:	f7fe fbd8 	bl	8003df4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <vPortFree+0xb8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4413      	add	r3, r2
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <vPortFree+0xb8>)
 8005650:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005652:	6938      	ldr	r0, [r7, #16]
 8005654:	f000 f874 	bl	8005740 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <vPortFree+0xbc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3301      	adds	r3, #1
 800565e:	4a06      	ldr	r2, [pc, #24]	; (8005678 <vPortFree+0xbc>)
 8005660:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005662:	f7fe fbd5 	bl	8003e10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005666:	bf00      	nop
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20012d98 	.word	0x20012d98
 8005674:	20012d88 	.word	0x20012d88
 8005678:	20012d94 	.word	0x20012d94

0800567c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005682:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005686:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <prvHeapInit+0xac>)
 800568a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00c      	beq.n	80056b0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3307      	adds	r3, #7
 800569a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0307 	bic.w	r3, r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <prvHeapInit+0xac>)
 80056ac:	4413      	add	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056b4:	4a1d      	ldr	r2, [pc, #116]	; (800572c <prvHeapInit+0xb0>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80056ba:	4b1c      	ldr	r3, [pc, #112]	; (800572c <prvHeapInit+0xb0>)
 80056bc:	2200      	movs	r2, #0
 80056be:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4413      	add	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80056c8:	2208      	movs	r2, #8
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0307 	bic.w	r3, r3, #7
 80056d6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <prvHeapInit+0xb4>)
 80056dc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80056de:	4b14      	ldr	r3, [pc, #80]	; (8005730 <prvHeapInit+0xb4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <prvHeapInit+0xb4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <prvHeapInit+0xb4>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <prvHeapInit+0xb8>)
 800570a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a09      	ldr	r2, [pc, #36]	; (8005738 <prvHeapInit+0xbc>)
 8005712:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <prvHeapInit+0xc0>)
 8005716:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800571a:	601a      	str	r2, [r3, #0]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	2000017c 	.word	0x2000017c
 800572c:	20012d7c 	.word	0x20012d7c
 8005730:	20012d84 	.word	0x20012d84
 8005734:	20012d8c 	.word	0x20012d8c
 8005738:	20012d88 	.word	0x20012d88
 800573c:	20012d98 	.word	0x20012d98

08005740 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005748:	4b28      	ldr	r3, [pc, #160]	; (80057ec <prvInsertBlockIntoFreeList+0xac>)
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e002      	b.n	8005754 <prvInsertBlockIntoFreeList+0x14>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d8f7      	bhi.n	800574e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4413      	add	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d108      	bne.n	8005782 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	441a      	add	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d118      	bne.n	80057c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <prvInsertBlockIntoFreeList+0xb0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d00d      	beq.n	80057be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e008      	b.n	80057d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <prvInsertBlockIntoFreeList+0xb0>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e003      	b.n	80057d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d002      	beq.n	80057de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	20012d7c 	.word	0x20012d7c
 80057f0:	20012d84 	.word	0x20012d84

080057f4 <__libc_init_array>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	4e0d      	ldr	r6, [pc, #52]	; (800582c <__libc_init_array+0x38>)
 80057f8:	4c0d      	ldr	r4, [pc, #52]	; (8005830 <__libc_init_array+0x3c>)
 80057fa:	1ba4      	subs	r4, r4, r6
 80057fc:	10a4      	asrs	r4, r4, #2
 80057fe:	2500      	movs	r5, #0
 8005800:	42a5      	cmp	r5, r4
 8005802:	d109      	bne.n	8005818 <__libc_init_array+0x24>
 8005804:	4e0b      	ldr	r6, [pc, #44]	; (8005834 <__libc_init_array+0x40>)
 8005806:	4c0c      	ldr	r4, [pc, #48]	; (8005838 <__libc_init_array+0x44>)
 8005808:	f000 f82c 	bl	8005864 <_init>
 800580c:	1ba4      	subs	r4, r4, r6
 800580e:	10a4      	asrs	r4, r4, #2
 8005810:	2500      	movs	r5, #0
 8005812:	42a5      	cmp	r5, r4
 8005814:	d105      	bne.n	8005822 <__libc_init_array+0x2e>
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800581c:	4798      	blx	r3
 800581e:	3501      	adds	r5, #1
 8005820:	e7ee      	b.n	8005800 <__libc_init_array+0xc>
 8005822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005826:	4798      	blx	r3
 8005828:	3501      	adds	r5, #1
 800582a:	e7f2      	b.n	8005812 <__libc_init_array+0x1e>
 800582c:	080058c4 	.word	0x080058c4
 8005830:	080058c4 	.word	0x080058c4
 8005834:	080058c4 	.word	0x080058c4
 8005838:	080058c8 	.word	0x080058c8

0800583c <memcpy>:
 800583c:	b510      	push	{r4, lr}
 800583e:	1e43      	subs	r3, r0, #1
 8005840:	440a      	add	r2, r1
 8005842:	4291      	cmp	r1, r2
 8005844:	d100      	bne.n	8005848 <memcpy+0xc>
 8005846:	bd10      	pop	{r4, pc}
 8005848:	f811 4b01 	ldrb.w	r4, [r1], #1
 800584c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005850:	e7f7      	b.n	8005842 <memcpy+0x6>

08005852 <memset>:
 8005852:	4402      	add	r2, r0
 8005854:	4603      	mov	r3, r0
 8005856:	4293      	cmp	r3, r2
 8005858:	d100      	bne.n	800585c <memset+0xa>
 800585a:	4770      	bx	lr
 800585c:	f803 1b01 	strb.w	r1, [r3], #1
 8005860:	e7f9      	b.n	8005856 <memset+0x4>
	...

08005864 <_init>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr

08005870 <_fini>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr
