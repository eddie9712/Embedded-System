
Embedded_OS_Lab1_P76091331.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043bc  080043bc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c4  080043c4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080043cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e0c  20000014  080043e0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e20  080043e0  00022e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010023  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023f8  00000000  00000000  00030067  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00032460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00033298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002127c  00000000  00000000  00033fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af67  00000000  00000000  00055234  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce9f9  00000000  00000000  0006019b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012eb94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a88  00000000  00000000  0012ec10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004364 	.word	0x08004364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004364 	.word	0x08004364

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fa45 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f82d 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f889 	bl	80005f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xQueue1=xQueueCreate(1,sizeof(int));     //create a queue
 80004e2:	2200      	movs	r2, #0
 80004e4:	2104      	movs	r1, #4
 80004e6:	2001      	movs	r0, #1
 80004e8:	f001 fce0 	bl	8001eac <xQueueGenericCreate>
 80004ec:	4602      	mov	r2, r0
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <main+0x54>)
 80004f0:	601a      	str	r2, [r3, #0]

  xTaskCreate(ButtonHandler,"task1",1024,(void *)1,1,NULL);
 80004f2:	2300      	movs	r3, #0
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2301      	movs	r3, #1
 80004fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000500:	4909      	ldr	r1, [pc, #36]	; (8000528 <main+0x58>)
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0x5c>)
 8000504:	f002 f93a 	bl	800277c <xTaskCreate>
  xTaskCreate(LEDHandler,"task2",1024,(void *)1,1,NULL);
 8000508:	2300      	movs	r3, #0
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2301      	movs	r3, #1
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000516:	4906      	ldr	r1, [pc, #24]	; (8000530 <main+0x60>)
 8000518:	4806      	ldr	r0, [pc, #24]	; (8000534 <main+0x64>)
 800051a:	f002 f92f 	bl	800277c <xTaskCreate>
  vTaskStartScheduler();
 800051e:	f002 faa5 	bl	8002a6c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x52>
 8000524:	20012d98 	.word	0x20012d98
 8000528:	0800437c 	.word	0x0800437c
 800052c:	08000735 	.word	0x08000735
 8000530:	08004384 	.word	0x08004384
 8000534:	08000699 	.word	0x08000699

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 ff03 	bl	8004352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xb4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xb4>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xb4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <SystemClock_Config+0xb8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <SystemClock_Config+0xb8>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <SystemClock_Config+0xb8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fccb 	bl	8000f44 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b4:	f000 f8f2 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 ff26 	bl	8001424 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005de:	f000 f8dd 	bl	800079c <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_GPIO_Init+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a1e      	ldr	r2, [pc, #120]	; (800068c <MX_GPIO_Init+0x98>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_GPIO_Init+0x98>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_GPIO_Init+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_GPIO_Init+0x98>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_GPIO_Init+0x98>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <MX_GPIO_Init+0x9c>)
 800064a:	f000 fc61 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800064e:	2301      	movs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_GPIO_Init+0xa0>)
 8000662:	f000 faa3 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000666:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000680:	f000 fa94 	bl	8000bac <HAL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40020000 	.word	0x40020000

08000698 <LEDHandler>:

/* USER CODE BEGIN 4 */
void LEDHandler(void *pvParameter)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	int flag=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
	   //first state
	   //int flag=0;
	   xQueueReceive(xQueue1,&flag,0);
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <LEDHandler+0x94>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f107 010c 	add.w	r1, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fe1c 	bl	80022ec <xQueueReceive>
	   if(flag==1)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d120      	bne.n	80006fc <LEDHandler+0x64>
	   {
		   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GPIO_PIN_12,GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c0:	481b      	ldr	r0, [pc, #108]	; (8000730 <LEDHandler+0x98>)
 80006c2:	f000 fc25 	bl	8000f10 <HAL_GPIO_WritePin>
		   vTaskDelay(5000);
 80006c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80006ca:	f002 f99b 	bl	8002a04 <vTaskDelay>
		   HAL_GPIO_WritePin(GREEN_LED_GPIO_Port,GPIO_PIN_12,GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	4816      	ldr	r0, [pc, #88]	; (8000730 <LEDHandler+0x98>)
 80006d6:	f000 fc1b 	bl	8000f10 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(RED_LED_GPIO_Port,GPIO_PIN_14,GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <LEDHandler+0x98>)
 80006e2:	f000 fc15 	bl	8000f10 <HAL_GPIO_WritePin>
		   vTaskDelay(5000);
 80006e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80006ea:	f002 f98b 	bl	8002a04 <vTaskDelay>
		   HAL_GPIO_WritePin(RED_LED_GPIO_Port,GPIO_PIN_14,GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <LEDHandler+0x98>)
 80006f6:	f000 fc0b 	bl	8000f10 <HAL_GPIO_WritePin>
 80006fa:	e7d3      	b.n	80006a4 <LEDHandler+0xc>
	   }
	   else if(flag==2)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d1d0      	bne.n	80006a4 <LEDHandler+0xc>
	   {
		   HAL_GPIO_WritePin(RED_LED_GPIO_Port,GPIO_PIN_14,GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <LEDHandler+0x98>)
 800070a:	f000 fc01 	bl	8000f10 <HAL_GPIO_WritePin>
		   vTaskDelay(1000);
 800070e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000712:	f002 f977 	bl	8002a04 <vTaskDelay>
		   HAL_GPIO_WritePin(RED_LED_GPIO_Port,GPIO_PIN_14,GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <LEDHandler+0x98>)
 800071e:	f000 fbf7 	bl	8000f10 <HAL_GPIO_WritePin>
		   vTaskDelay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f002 f96d 	bl	8002a04 <vTaskDelay>
	   xQueueReceive(xQueue1,&flag,0);
 800072a:	e7bb      	b.n	80006a4 <LEDHandler+0xc>
 800072c:	20012d98 	.word	0x20012d98
 8000730:	40020c00 	.word	0x40020c00

08000734 <ButtonHandler>:
	   }
	 }
}
void ButtonHandler(void *pvParameter)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	int mes=0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
	   if(HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port,GPIO_PIN_0))
 8000740:	2101      	movs	r1, #1
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <ButtonHandler+0x3c>)
 8000744:	f000 fbcc 	bl	8000ee0 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f8      	beq.n	8000740 <ButtonHandler+0xc>
	  {
		  mes=(mes == 1 ? 2 : 1);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d101      	bne.n	8000758 <ButtonHandler+0x24>
 8000754:	2302      	movs	r3, #2
 8000756:	e000      	b.n	800075a <ButtonHandler+0x26>
 8000758:	2301      	movs	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
		  xQueueOverwrite( xQueue1, &mes );
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <ButtonHandler+0x40>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	f107 010c 	add.w	r1, r7, #12
 8000764:	2302      	movs	r3, #2
 8000766:	2200      	movs	r2, #0
 8000768:	f001 fc20 	bl	8001fac <xQueueGenericSend>
	   if(HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port,GPIO_PIN_0))
 800076c:	e7e8      	b.n	8000740 <ButtonHandler+0xc>
 800076e:	bf00      	nop
 8000770:	40020000 	.word	0x40020000
 8000774:	20012d98 	.word	0x20012d98

08000778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078a:	f000 f90d 	bl	80009a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40001000 	.word	0x40001000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <Error_Handler+0x6>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	2036      	movs	r0, #54	; 0x36
 800080a:	f000 f9a5 	bl	8000b58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800080e:	2036      	movs	r0, #54	; 0x36
 8000810:	f000 f9be 	bl	8000b90 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <HAL_InitTick+0xa0>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <HAL_InitTick+0xa0>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_InitTick+0xa0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 0310 	and.w	r3, r3, #16
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000830:	f107 0210 	add.w	r2, r7, #16
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 ffaa 	bl	8001794 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000840:	f000 ff94 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8000844:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <HAL_InitTick+0xa4>)
 800084a:	fba2 2303 	umull	r2, r3, r2, r3
 800084e:	0c9b      	lsrs	r3, r3, #18
 8000850:	3b01      	subs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_InitTick+0xa8>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <HAL_InitTick+0xac>)
 8000858:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_InitTick+0xa8>)
 800085c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000860:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_InitTick+0xa8>)
 8000864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000866:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_InitTick+0xa8>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_InitTick+0xa8>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <HAL_InitTick+0xa8>)
 8000876:	f000 ffbf 	bl	80017f8 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d104      	bne.n	800088a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000880:	4806      	ldr	r0, [pc, #24]	; (800089c <HAL_InitTick+0xa8>)
 8000882:	f000 ffee 	bl	8001862 <HAL_TIM_Base_Start_IT>
 8000886:	4603      	mov	r3, r0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3730      	adds	r7, #48	; 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	431bde83 	.word	0x431bde83
 800089c:	20012d9c 	.word	0x20012d9c
 80008a0:	40001000 	.word	0x40001000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <TIM6_DAC_IRQHandler+0x10>)
 80008d6:	f000 ffe8 	bl	80018aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20012d9c 	.word	0x20012d9c

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <SystemInit+0x28>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <SystemInit+0x28>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <SystemInit+0x28>)
 80008fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000916:	e003      	b.n	8000920 <LoopCopyDataInit>

08000918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800091a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800091c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800091e:	3104      	adds	r1, #4

08000920 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000928:	d3f6      	bcc.n	8000918 <CopyDataInit>
  ldr  r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800092c:	e002      	b.n	8000934 <LoopFillZerobss>

0800092e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800092e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000930:	f842 3b04 	str.w	r3, [r2], #4

08000934 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000938:	d3f9      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800093a:	f7ff ffd3 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f003 fcd9 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fdc5 	bl	80004d0 <main>
  bx  lr    
 8000946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000948:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800094c:	080043cc 	.word	0x080043cc
  ldr  r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000954:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000958:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800095c:	20012e20 	.word	0x20012e20

08000960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_Init+0x40>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_Init+0x40>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x40>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f8d8 	bl	8000b42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff ff2e 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff ff04 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20012ddc 	.word	0x20012ddc

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20012ddc 	.word	0x20012ddc

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <__NVIC_EnableIRQ+0x38>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff4c 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6a:	f7ff ff61 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	6978      	ldr	r0, [r7, #20]
 8000b76:	f7ff ffb1 	bl	8000adc <NVIC_EncodePriority>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff80 	bl	8000a88 <__NVIC_SetPriority>
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff54 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e16b      	b.n	8000ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 815a 	bne.w	8000e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d00b      	beq.n	8000c06 <HAL_GPIO_Init+0x5a>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d007      	beq.n	8000c06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bfa:	2b11      	cmp	r3, #17
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d130      	bne.n	8000c68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	091b      	lsrs	r3, r3, #4
 8000c52:	f003 0201 	and.w	r2, r3, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0xfc>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b12      	cmp	r3, #18
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0203 	and.w	r2, r3, #3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80b4 	beq.w	8000e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a5e      	ldr	r2, [pc, #376]	; (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4e:	4a5a      	ldr	r2, [pc, #360]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <HAL_GPIO_Init+0x310>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x226>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a50      	ldr	r2, [pc, #320]	; (8000ec0 <HAL_GPIO_Init+0x314>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x222>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <HAL_GPIO_Init+0x318>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x21e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <HAL_GPIO_Init+0x31c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <HAL_GPIO_Init+0x320>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <HAL_GPIO_Init+0x324>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x212>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4b      	ldr	r2, [pc, #300]	; (8000ed4 <HAL_GPIO_Init+0x328>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x20e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x32c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x20a>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00e      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00c      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00a      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x228>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4934      	ldr	r1, [pc, #208]	; (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_GPIO_Init+0x330>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f ae90 	bls.w	8000bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3724      	adds	r7, #36	; 0x24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40021400 	.word	0x40021400
 8000ed4:	40021800 	.word	0x40021800
 8000ed8:	40021c00 	.word	0x40021c00
 8000edc:	40013c00 	.word	0x40013c00

08000ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e001      	b.n	8000f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	041a      	lsls	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	619a      	str	r2, [r3, #24]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e25b      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d075      	beq.n	800104e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f62:	4ba3      	ldr	r3, [pc, #652]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d00c      	beq.n	8000f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6e:	4ba0      	ldr	r3, [pc, #640]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d112      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f7a:	4b9d      	ldr	r3, [pc, #628]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f86:	d10b      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	4b99      	ldr	r3, [pc, #612]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d05b      	beq.n	800104c <HAL_RCC_OscConfig+0x108>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d157      	bne.n	800104c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e236      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa8:	d106      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x74>
 8000faa:	4b91      	ldr	r3, [pc, #580]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a90      	ldr	r2, [pc, #576]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e01d      	b.n	8000ff4 <HAL_RCC_OscConfig+0xb0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x98>
 8000fc2:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a8a      	ldr	r2, [pc, #552]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a87      	ldr	r2, [pc, #540]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0xb0>
 8000fdc:	4b84      	ldr	r3, [pc, #528]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a83      	ldr	r2, [pc, #524]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a80      	ldr	r2, [pc, #512]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fce8 	bl	80009d0 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fce4 	bl	80009d0 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e1fb      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0xc0>
 8001022:	e014      	b.n	800104e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fcd4 	bl	80009d0 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fcd0 	bl	80009d0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1e7      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0xe8>
 800104a:	e000      	b.n	800104e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800105a:	4b65      	ldr	r3, [pc, #404]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001066:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800106e:	2b08      	cmp	r3, #8
 8001070:	d11c      	bne.n	80010ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001072:	4b5f      	ldr	r3, [pc, #380]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_RCC_OscConfig+0x152>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e1bb      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b56      	ldr	r3, [pc, #344]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4952      	ldr	r1, [pc, #328]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	e03a      	b.n	8001122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b4:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <HAL_RCC_OscConfig+0x2b0>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fc89 	bl	80009d0 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fc85 	bl	80009d0 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e19c      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4940      	ldr	r1, [pc, #256]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <HAL_RCC_OscConfig+0x2b0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fc68 	bl	80009d0 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fc64 	bl	80009d0 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e17b      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d030      	beq.n	8001190 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d016      	beq.n	8001164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <HAL_RCC_OscConfig+0x2b4>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800113c:	f7ff fc48 	bl	80009d0 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fc44 	bl	80009d0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e15b      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x200>
 8001162:	e015      	b.n	8001190 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_RCC_OscConfig+0x2b4>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff fc31 	bl	80009d0 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001172:	f7ff fc2d 	bl	80009d0 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e144      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 8001186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f0      	bne.n	8001172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80a0 	beq.w	80012de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10f      	bne.n	80011ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_RCC_OscConfig+0x2b8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d121      	bne.n	800121e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_RCC_OscConfig+0x2b8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_RCC_OscConfig+0x2b8>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fbf3 	bl	80009d0 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	e011      	b.n	8001212 <HAL_RCC_OscConfig+0x2ce>
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	42470000 	.word	0x42470000
 80011f8:	42470e80 	.word	0x42470e80
 80011fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001200:	f7ff fbe6 	bl	80009d0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e0fd      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	4b81      	ldr	r3, [pc, #516]	; (8001418 <HAL_RCC_OscConfig+0x4d4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d106      	bne.n	8001234 <HAL_RCC_OscConfig+0x2f0>
 8001226:	4b7d      	ldr	r3, [pc, #500]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 8001228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122a:	4a7c      	ldr	r2, [pc, #496]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6713      	str	r3, [r2, #112]	; 0x70
 8001232:	e01c      	b.n	800126e <HAL_RCC_OscConfig+0x32a>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b05      	cmp	r3, #5
 800123a:	d10c      	bne.n	8001256 <HAL_RCC_OscConfig+0x312>
 800123c:	4b77      	ldr	r3, [pc, #476]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	4a76      	ldr	r2, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6713      	str	r3, [r2, #112]	; 0x70
 8001248:	4b74      	ldr	r3, [pc, #464]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124c:	4a73      	ldr	r2, [pc, #460]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6713      	str	r3, [r2, #112]	; 0x70
 8001254:	e00b      	b.n	800126e <HAL_RCC_OscConfig+0x32a>
 8001256:	4b71      	ldr	r3, [pc, #452]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	4a70      	ldr	r2, [pc, #448]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6713      	str	r3, [r2, #112]	; 0x70
 8001262:	4b6e      	ldr	r3, [pc, #440]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 8001264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001266:	4a6d      	ldr	r2, [pc, #436]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d015      	beq.n	80012a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff fbab 	bl	80009d0 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fba7 	bl	80009d0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	; 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e0bc      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	4b61      	ldr	r3, [pc, #388]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0ee      	beq.n	800127e <HAL_RCC_OscConfig+0x33a>
 80012a0:	e014      	b.n	80012cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fb95 	bl	80009d0 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f7ff fb91 	bl	80009d0 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0a6      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ee      	bne.n	80012aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d105      	bne.n	80012de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d2:	4b52      	ldr	r3, [pc, #328]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a51      	ldr	r2, [pc, #324]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8092 	beq.w	800140c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d05c      	beq.n	80013ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d141      	bne.n	8001380 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HAL_RCC_OscConfig+0x4dc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb65 	bl	80009d0 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fb61 	bl	80009d0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e078      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	019b      	lsls	r3, r3, #6
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	3b01      	subs	r3, #1
 8001342:	041b      	lsls	r3, r3, #16
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	061b      	lsls	r3, r3, #24
 800134c:	4933      	ldr	r1, [pc, #204]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <HAL_RCC_OscConfig+0x4dc>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb3a 	bl	80009d0 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb36 	bl	80009d0 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e04d      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x41c>
 800137e:	e045      	b.n	800140c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_RCC_OscConfig+0x4dc>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fb23 	bl	80009d0 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fb1f 	bl	80009d0 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e036      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x44a>
 80013ac:	e02e      	b.n	800140c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e029      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_RCC_OscConfig+0x4d8>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d115      	bne.n	8001408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013e2:	4013      	ands	r3, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d10d      	bne.n	8001408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d106      	bne.n	8001408 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40007000 	.word	0x40007000
 800141c:	40023800 	.word	0x40023800
 8001420:	42470060 	.word	0x42470060

08001424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0cc      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d90c      	bls.n	8001460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800149a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d044      	beq.n	8001544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d119      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e067      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4934      	ldr	r1, [pc, #208]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fa5c 	bl	80009d0 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	e00a      	b.n	8001532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff fa58 	bl	80009d0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e04f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 020c 	and.w	r2, r3, #12
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d1eb      	bne.n	800151c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d20c      	bcs.n	800156c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f821 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015ae:	4601      	mov	r1, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	fa21 f303 	lsr.w	r3, r1, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f912 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00
 80015e0:	40023800 	.word	0x40023800
 80015e4:	080043a4 	.word	0x080043a4
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001606:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_GetSysClockFreq+0x158>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b04      	cmp	r3, #4
 8001610:	d007      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x32>
 8001612:	2b08      	cmp	r3, #8
 8001614:	d008      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x38>
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 808d 	bne.w	8001736 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_RCC_GetSysClockFreq+0x15c>)
 800161e:	60bb      	str	r3, [r7, #8]
       break;
 8001620:	e08c      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_RCC_GetSysClockFreq+0x160>)
 8001624:	60bb      	str	r3, [r7, #8]
      break;
 8001626:	e089      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001628:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_GetSysClockFreq+0x158>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001632:	4b45      	ldr	r3, [pc, #276]	; (8001748 <HAL_RCC_GetSysClockFreq+0x158>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d023      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_RCC_GetSysClockFreq+0x158>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	ea03 0501 	and.w	r5, r3, r1
 8001654:	ea04 0602 	and.w	r6, r4, r2
 8001658:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <HAL_RCC_GetSysClockFreq+0x160>)
 800165a:	fb02 f106 	mul.w	r1, r2, r6
 800165e:	2200      	movs	r2, #0
 8001660:	fb02 f205 	mul.w	r2, r2, r5
 8001664:	440a      	add	r2, r1
 8001666:	493a      	ldr	r1, [pc, #232]	; (8001750 <HAL_RCC_GetSysClockFreq+0x160>)
 8001668:	fba5 0101 	umull	r0, r1, r5, r1
 800166c:	1853      	adds	r3, r2, r1
 800166e:	4619      	mov	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f04f 0400 	mov.w	r4, #0
 8001676:	461a      	mov	r2, r3
 8001678:	4623      	mov	r3, r4
 800167a:	f7fe fda9 	bl	80001d0 <__aeabi_uldivmod>
 800167e:	4603      	mov	r3, r0
 8001680:	460c      	mov	r4, r1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e049      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001686:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_RCC_GetSysClockFreq+0x158>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	099b      	lsrs	r3, r3, #6
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	ea03 0501 	and.w	r5, r3, r1
 800169c:	ea04 0602 	and.w	r6, r4, r2
 80016a0:	4629      	mov	r1, r5
 80016a2:	4632      	mov	r2, r6
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	f04f 0400 	mov.w	r4, #0
 80016ac:	0154      	lsls	r4, r2, #5
 80016ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016b2:	014b      	lsls	r3, r1, #5
 80016b4:	4619      	mov	r1, r3
 80016b6:	4622      	mov	r2, r4
 80016b8:	1b49      	subs	r1, r1, r5
 80016ba:	eb62 0206 	sbc.w	r2, r2, r6
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	f04f 0400 	mov.w	r4, #0
 80016c6:	0194      	lsls	r4, r2, #6
 80016c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016cc:	018b      	lsls	r3, r1, #6
 80016ce:	1a5b      	subs	r3, r3, r1
 80016d0:	eb64 0402 	sbc.w	r4, r4, r2
 80016d4:	f04f 0100 	mov.w	r1, #0
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	00e2      	lsls	r2, r4, #3
 80016de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016e2:	00d9      	lsls	r1, r3, #3
 80016e4:	460b      	mov	r3, r1
 80016e6:	4614      	mov	r4, r2
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	eb44 0406 	adc.w	r4, r4, r6
 80016ee:	f04f 0100 	mov.w	r1, #0
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	02a2      	lsls	r2, r4, #10
 80016f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016fc:	0299      	lsls	r1, r3, #10
 80016fe:	460b      	mov	r3, r1
 8001700:	4614      	mov	r4, r2
 8001702:	4618      	mov	r0, r3
 8001704:	4621      	mov	r1, r4
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f04f 0400 	mov.w	r4, #0
 800170c:	461a      	mov	r2, r3
 800170e:	4623      	mov	r3, r4
 8001710:	f7fe fd5e 	bl	80001d0 <__aeabi_uldivmod>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_GetSysClockFreq+0x158>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	0c1b      	lsrs	r3, r3, #16
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	3301      	adds	r3, #1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	60bb      	str	r3, [r7, #8]
      break;
 8001734:	e002      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001738:	60bb      	str	r3, [r7, #8]
      break;
 800173a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173c:	68bb      	ldr	r3, [r7, #8]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	00f42400 	.word	0x00f42400
 8001750:	017d7840 	.word	0x017d7840

08001754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_RCC_GetHCLKFreq+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001770:	f7ff fff0 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8001774:	4601      	mov	r1, r0
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	080043b4 	.word	0x080043b4

08001794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	220f      	movs	r2, #15
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_GetClockConfig+0x5c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_RCC_GetClockConfig+0x5c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_RCC_GetClockConfig+0x5c>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_GetClockConfig+0x5c>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_RCC_GetClockConfig+0x60>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 020f 	and.w	r2, r3, #15
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e01d      	b.n	8001846 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f815 	bl	800184e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3304      	adds	r3, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f000 f968 	bl	8001b0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b06      	cmp	r3, #6
 800188a:	d007      	beq.n	800189c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d122      	bne.n	8001906 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d11b      	bne.n	8001906 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f06f 0202 	mvn.w	r2, #2
 80018d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8ee 	bl	8001ace <HAL_TIM_IC_CaptureCallback>
 80018f2:	e005      	b.n	8001900 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f8e0 	bl	8001aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f8f1 	bl	8001ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b04      	cmp	r3, #4
 8001912:	d122      	bne.n	800195a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b04      	cmp	r3, #4
 8001920:	d11b      	bne.n	800195a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f06f 0204 	mvn.w	r2, #4
 800192a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f8c4 	bl	8001ace <HAL_TIM_IC_CaptureCallback>
 8001946:	e005      	b.n	8001954 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f8b6 	bl	8001aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8c7 	bl	8001ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b08      	cmp	r3, #8
 8001966:	d122      	bne.n	80019ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b08      	cmp	r3, #8
 8001974:	d11b      	bne.n	80019ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0208 	mvn.w	r2, #8
 800197e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2204      	movs	r2, #4
 8001984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f89a 	bl	8001ace <HAL_TIM_IC_CaptureCallback>
 800199a:	e005      	b.n	80019a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f88c 	bl	8001aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f89d 	bl	8001ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	d122      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d11b      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f06f 0210 	mvn.w	r2, #16
 80019d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2208      	movs	r2, #8
 80019d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f870 	bl	8001ace <HAL_TIM_IC_CaptureCallback>
 80019ee:	e005      	b.n	80019fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f862 	bl	8001aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f873 	bl	8001ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10e      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0201 	mvn.w	r2, #1
 8001a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fea5 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	2b80      	cmp	r3, #128	; 0x80
 8001a3a:	d10e      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	2b80      	cmp	r3, #128	; 0x80
 8001a48:	d107      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f903 	bl	8001c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d10e      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d107      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f838 	bl	8001af6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d10e      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d107      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0220 	mvn.w	r2, #32
 8001aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f8cd 	bl	8001c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a40      	ldr	r2, [pc, #256]	; (8001c20 <TIM_Base_SetConfig+0x114>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2a:	d00f      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a3d      	ldr	r2, [pc, #244]	; (8001c24 <TIM_Base_SetConfig+0x118>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00b      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3c      	ldr	r2, [pc, #240]	; (8001c28 <TIM_Base_SetConfig+0x11c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <TIM_Base_SetConfig+0x120>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <TIM_Base_SetConfig+0x40>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3a      	ldr	r2, [pc, #232]	; (8001c30 <TIM_Base_SetConfig+0x124>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d108      	bne.n	8001b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <TIM_Base_SetConfig+0x114>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02b      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d027      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a2c      	ldr	r2, [pc, #176]	; (8001c24 <TIM_Base_SetConfig+0x118>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d023      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <TIM_Base_SetConfig+0x11c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01f      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a2a      	ldr	r2, [pc, #168]	; (8001c2c <TIM_Base_SetConfig+0x120>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01b      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <TIM_Base_SetConfig+0x124>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d017      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <TIM_Base_SetConfig+0x128>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <TIM_Base_SetConfig+0x12c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00f      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <TIM_Base_SetConfig+0x130>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00b      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <TIM_Base_SetConfig+0x134>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <TIM_Base_SetConfig+0x138>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d003      	beq.n	8001bbe <TIM_Base_SetConfig+0xb2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <TIM_Base_SetConfig+0x13c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d108      	bne.n	8001bd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <TIM_Base_SetConfig+0x114>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <TIM_Base_SetConfig+0xf8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <TIM_Base_SetConfig+0x124>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d103      	bne.n	8001c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	615a      	str	r2, [r3, #20]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40000c00 	.word	0x40000c00
 8001c30:	40010400 	.word	0x40010400
 8001c34:	40014000 	.word	0x40014000
 8001c38:	40014400 	.word	0x40014400
 8001c3c:	40014800 	.word	0x40014800
 8001c40:	40001800 	.word	0x40001800
 8001c44:	40001c00 	.word	0x40001c00
 8001c48:	40002000 	.word	0x40002000

08001c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f103 0208 	add.w	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c8c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f103 0208 	add.w	r2, r3, #8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f103 0208 	add.w	r2, r3, #8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d2c:	d103      	bne.n	8001d36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e00c      	b.n	8001d50 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3308      	adds	r3, #8
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e002      	b.n	8001d44 <vListInsert+0x2e>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d2f6      	bcs.n	8001d3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6892      	ldr	r2, [r2, #8]
 8001d9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6852      	ldr	r2, [r2, #4]
 8001da8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d103      	bne.n	8001dbc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	e7fe      	b.n	8001e02 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8001e04:	f001 ff64 	bl	8003cd0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	441a      	add	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	3b01      	subs	r3, #1
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	441a      	add	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	22ff      	movs	r2, #255	; 0xff
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	22ff      	movs	r2, #255	; 0xff
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d114      	bne.n	8001e84 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01a      	beq.n	8001e98 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3310      	adds	r3, #16
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 f86a 	bl	8002f40 <xTaskRemoveFromEventList>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d012      	beq.n	8001e98 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <xQueueGenericReset+0xcc>)
 8001e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	e009      	b.n	8001e98 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3310      	adds	r3, #16
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fef3 	bl	8001c74 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3324      	adds	r3, #36	; 0x24
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff feee 	bl	8001c74 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001e98:	f001 ff48 	bl	8003d2c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000ed04 	.word	0xe000ed04

08001eac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <xQueueGenericCreate+0x28>
 8001ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec4:	f383 8811 	msr	BASEPRI, r3
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	e7fe      	b.n	8001ed2 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <xQueueGenericCreate+0x46>
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d101      	bne.n	8001ef6 <xQueueGenericCreate+0x4a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <xQueueGenericCreate+0x4c>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <xQueueGenericCreate+0x64>
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e7fe      	b.n	8001f0e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001f16:	d909      	bls.n	8001f2c <xQueueGenericCreate+0x80>
 8001f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e7fe      	b.n	8001f2a <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3350      	adds	r3, #80	; 0x50
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 ffe7 	bl	8003f04 <pvPortMalloc>
 8001f36:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3350      	adds	r3, #80	; 0x50
 8001f46:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f48:	79fa      	ldrb	r2, [r7, #7]
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f805 	bl	8001f64 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
    }
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d103      	bne.n	8001f80 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e002      	b.n	8001f86 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f92:	2101      	movs	r1, #1
 8001f94:	69b8      	ldr	r0, [r7, #24]
 8001f96:	f7ff ff21 	bl	8001ddc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	; 0x38
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <xQueueGenericSend+0x30>
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fda:	e7fe      	b.n	8001fda <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <xQueueGenericSend+0x3e>
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <xQueueGenericSend+0x42>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <xQueueGenericSend+0x44>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <xQueueGenericSend+0x5c>
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e7fe      	b.n	8002006 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d103      	bne.n	8002016 <xQueueGenericSend+0x6a>
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <xQueueGenericSend+0x6e>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <xQueueGenericSend+0x70>
 800201a:	2300      	movs	r3, #0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <xQueueGenericSend+0x88>
 8002020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	e7fe      	b.n	8002032 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002034:	f001 f91c 	bl	8003270 <xTaskGetSchedulerState>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <xQueueGenericSend+0x98>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <xQueueGenericSend+0x9c>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <xQueueGenericSend+0x9e>
 8002048:	2300      	movs	r3, #0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <xQueueGenericSend+0xb6>
 800204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	e7fe      	b.n	8002060 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002062:	f001 fe35 	bl	8003cd0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <xQueueGenericSend+0xcc>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d129      	bne.n	80020cc <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800207e:	f000 fa11 	bl	80024a4 <prvCopyDataToQueue>
 8002082:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	3324      	adds	r3, #36	; 0x24
 8002090:	4618      	mov	r0, r3
 8002092:	f000 ff55 	bl	8002f40 <xTaskRemoveFromEventList>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800209c:	4b3f      	ldr	r3, [pc, #252]	; (800219c <xQueueGenericSend+0x1f0>)
 800209e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	e00a      	b.n	80020c4 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <xQueueGenericSend+0x1f0>)
 80020b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80020c4:	f001 fe32 	bl	8003d2c <vPortExitCritical>
                return pdPASS;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e063      	b.n	8002194 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d103      	bne.n	80020da <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80020d2:	f001 fe2b 	bl	8003d2c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e05c      	b.n	8002194 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 ff8d 	bl	8003004 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80020ea:	2301      	movs	r3, #1
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80020ee:	f001 fe1d 	bl	8003d2c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80020f2:	f000 fd0b 	bl	8002b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80020f6:	f001 fdeb 	bl	8003cd0 <vPortEnterCritical>
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002100:	b25b      	sxtb	r3, r3
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002106:	d103      	bne.n	8002110 <xQueueGenericSend+0x164>
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002116:	b25b      	sxtb	r3, r3
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800211c:	d103      	bne.n	8002126 <xQueueGenericSend+0x17a>
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002126:	f001 fe01 	bl	8003d2c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800212a:	1d3a      	adds	r2, r7, #4
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f000 ff7c 	bl	8003030 <xTaskCheckForTimeOut>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d124      	bne.n	8002188 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800213e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002140:	f000 faa8 	bl	8002694 <prvIsQueueFull>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d018      	beq.n	800217c <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	3310      	adds	r3, #16
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fea6 	bl	8002ea4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800215a:	f000 fa33 	bl	80025c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800215e:	f000 fce3 	bl	8002b28 <xTaskResumeAll>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f af7c 	bne.w	8002062 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <xQueueGenericSend+0x1f0>)
 800216c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	e772      	b.n	8002062 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800217c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217e:	f000 fa21 	bl	80025c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002182:	f000 fcd1 	bl	8002b28 <xTaskResumeAll>
 8002186:	e76c      	b.n	8002062 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800218a:	f000 fa1b 	bl	80025c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800218e:	f000 fccb 	bl	8002b28 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002192:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002194:	4618      	mov	r0, r3
 8002196:	3738      	adds	r7, #56	; 0x38
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	e000ed04 	.word	0xe000ed04

080021a0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b090      	sub	sp, #64	; 0x40
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80021b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <xQueueGenericSendFromISR+0x2c>
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ca:	e7fe      	b.n	80021ca <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <xQueueGenericSendFromISR+0x3a>
 80021d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <xQueueGenericSendFromISR+0x3e>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <xQueueGenericSendFromISR+0x40>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <xQueueGenericSendFromISR+0x58>
 80021e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	e7fe      	b.n	80021f6 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d103      	bne.n	8002206 <xQueueGenericSendFromISR+0x66>
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <xQueueGenericSendFromISR+0x6a>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <xQueueGenericSendFromISR+0x6c>
 800220a:	2300      	movs	r3, #0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <xQueueGenericSendFromISR+0x84>
 8002210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002214:	f383 8811 	msr	BASEPRI, r3
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	623b      	str	r3, [r7, #32]
 8002222:	e7fe      	b.n	8002222 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002224:	f001 fe30 	bl	8003e88 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002228:	f3ef 8211 	mrs	r2, BASEPRI
 800222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	61fa      	str	r2, [r7, #28]
 800223e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002240:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	429a      	cmp	r2, r3
 800224e:	d302      	bcc.n	8002256 <xQueueGenericSendFromISR+0xb6>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d13d      	bne.n	80022d2 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800225c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800226c:	f000 f91a 	bl	80024a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002270:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002278:	d112      	bne.n	80022a0 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2b00      	cmp	r3, #0
 8002280:	d024      	beq.n	80022cc <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002284:	3324      	adds	r3, #36	; 0x24
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fe5a 	bl	8002f40 <xTaskRemoveFromEventList>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01c      	beq.n	80022cc <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d019      	beq.n	80022cc <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e015      	b.n	80022cc <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80022a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80022a4:	2b7f      	cmp	r3, #127	; 0x7f
 80022a6:	d109      	bne.n	80022bc <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e7fe      	b.n	80022ba <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022c0:	3301      	adds	r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80022cc:	2301      	movs	r3, #1
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80022d0:	e001      	b.n	80022d6 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3740      	adds	r7, #64	; 0x40
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <xQueueReceive+0x2e>
        __asm volatile
 8002306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	e7fe      	b.n	8002318 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <xQueueReceive+0x3c>
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <xQueueReceive+0x40>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <xQueueReceive+0x42>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <xQueueReceive+0x5a>
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	e7fe      	b.n	8002344 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002346:	f000 ff93 	bl	8003270 <xTaskGetSchedulerState>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <xQueueReceive+0x6a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <xQueueReceive+0x6e>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <xQueueReceive+0x70>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <xQueueReceive+0x88>
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e7fe      	b.n	8002372 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002374:	f001 fcac 	bl	8003cd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01f      	beq.n	80023c4 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002388:	f000 f8f6 	bl	8002578 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002392:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00f      	beq.n	80023bc <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	3310      	adds	r3, #16
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fdcd 	bl	8002f40 <xTaskRemoveFromEventList>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023ac:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <xQueueReceive+0x1b4>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80023bc:	f001 fcb6 	bl	8003d2c <vPortExitCritical>
                return pdPASS;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e069      	b.n	8002498 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023ca:	f001 fcaf 	bl	8003d2c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e062      	b.n	8002498 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fe11 	bl	8003004 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023e2:	2301      	movs	r3, #1
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023e6:	f001 fca1 	bl	8003d2c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023ea:	f000 fb8f 	bl	8002b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023ee:	f001 fc6f 	bl	8003cd0 <vPortEnterCritical>
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fe:	d103      	bne.n	8002408 <xQueueReceive+0x11c>
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800240e:	b25b      	sxtb	r3, r3
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002414:	d103      	bne.n	800241e <xQueueReceive+0x132>
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800241e:	f001 fc85 	bl	8003d2c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002422:	1d3a      	adds	r2, r7, #4
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fe00 	bl	8003030 <xTaskCheckForTimeOut>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d123      	bne.n	800247e <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002438:	f000 f916 	bl	8002668 <prvIsQueueEmpty>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d017      	beq.n	8002472 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	3324      	adds	r3, #36	; 0x24
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fd2a 	bl	8002ea4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002452:	f000 f8b7 	bl	80025c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002456:	f000 fb67 	bl	8002b28 <xTaskResumeAll>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d189      	bne.n	8002374 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <xQueueReceive+0x1b4>)
 8002462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	e780      	b.n	8002374 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002474:	f000 f8a6 	bl	80025c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002478:	f000 fb56 	bl	8002b28 <xTaskResumeAll>
 800247c:	e77a      	b.n	8002374 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800247e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002480:	f000 f8a0 	bl	80025c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002484:	f000 fb50 	bl	8002b28 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800248a:	f000 f8ed 	bl	8002668 <prvIsQueueEmpty>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f43f af6f 	beq.w	8002374 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002496:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002498:	4618      	mov	r0, r3
 800249a:	3730      	adds	r7, #48	; 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000ed04 	.word	0xe000ed04

080024a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d14d      	bne.n	8002566 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 feec 	bl	80032ac <xTaskPriorityDisinherit>
 80024d4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	e043      	b.n	8002566 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d119      	bne.n	8002518 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6858      	ldr	r0, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	461a      	mov	r2, r3
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	f001 ff24 	bl	800433c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	441a      	add	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d32b      	bcc.n	8002566 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	e026      	b.n	8002566 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68d8      	ldr	r0, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	461a      	mov	r2, r3
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	f001 ff0a 	bl	800433c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	425b      	negs	r3, r3
 8002532:	441a      	add	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	425b      	negs	r3, r3
 800254e:	441a      	add	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d105      	bne.n	8002566 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	3b01      	subs	r3, #1
 8002564:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800256e:	697b      	ldr	r3, [r7, #20]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d018      	beq.n	80025bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	441a      	add	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d303      	bcc.n	80025ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68d9      	ldr	r1, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	461a      	mov	r2, r3
 80025b6:	6838      	ldr	r0, [r7, #0]
 80025b8:	f001 fec0 	bl	800433c <memcpy>
    }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025cc:	f001 fb80 	bl	8003cd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025d8:	e011      	b.n	80025fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3324      	adds	r3, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fcaa 	bl	8002f40 <xTaskRemoveFromEventList>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80025f2:	f000 fd81 	bl	80030f8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	dce9      	bgt.n	80025da <prvUnlockQueue+0x16>
 8002606:	e000      	b.n	800260a <prvUnlockQueue+0x46>
                        break;
 8002608:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	22ff      	movs	r2, #255	; 0xff
 800260e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002612:	f001 fb8b 	bl	8003d2c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002616:	f001 fb5b 	bl	8003cd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002620:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002622:	e011      	b.n	8002648 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3310      	adds	r3, #16
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fc85 	bl	8002f40 <xTaskRemoveFromEventList>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800263c:	f000 fd5c 	bl	80030f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	3b01      	subs	r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800264c:	2b00      	cmp	r3, #0
 800264e:	dce9      	bgt.n	8002624 <prvUnlockQueue+0x60>
 8002650:	e000      	b.n	8002654 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002652:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800265c:	f001 fb66 	bl	8003d2c <vPortExitCritical>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002670:	f001 fb2e 	bl	8003cd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e001      	b.n	8002686 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002686:	f001 fb51 	bl	8003d2c <vPortExitCritical>

    return xReturn;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800269c:	f001 fb18 	bl	8003cd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d102      	bne.n	80026b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e001      	b.n	80026b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026b6:	f001 fb39 	bl	8003d2c <vPortExitCritical>

    return xReturn;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e014      	b.n	80026fe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <vQueueAddToRegistry+0x4c>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026e0:	490b      	ldr	r1, [pc, #44]	; (8002710 <vQueueAddToRegistry+0x4c>)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <vQueueAddToRegistry+0x4c>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80026f6:	e005      	b.n	8002704 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b07      	cmp	r3, #7
 8002702:	d9e7      	bls.n	80026d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20012de0 	.word	0x20012de0

08002714 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002724:	f001 fad4 	bl	8003cd0 <vPortEnterCritical>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002734:	d103      	bne.n	800273e <vQueueWaitForMessageRestricted+0x2a>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002744:	b25b      	sxtb	r3, r3
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274a:	d103      	bne.n	8002754 <vQueueWaitForMessageRestricted+0x40>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002754:	f001 faea 	bl	8003d2c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3324      	adds	r3, #36	; 0x24
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fbbf 	bl	8002eec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff28 	bl	80025c4 <prvUnlockQueue>
    }
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af04      	add	r7, sp, #16
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f001 fbb7 	bl	8003f04 <pvPortMalloc>
 8002796:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800279e:	2058      	movs	r0, #88	; 0x58
 80027a0:	f001 fbb0 	bl	8003f04 <pvPortMalloc>
 80027a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
 80027b2:	e005      	b.n	80027c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80027b4:	6978      	ldr	r0, [r7, #20]
 80027b6:	f001 fc81 	bl	80040bc <vPortFree>
 80027ba:	e001      	b.n	80027c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d013      	beq.n	80027ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	2300      	movs	r3, #0
 80027ca:	9303      	str	r3, [sp, #12]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f80e 	bl	80027fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80027e2:	69f8      	ldr	r0, [r7, #28]
 80027e4:	f000 f8a0 	bl	8002928 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e002      	b.n	80027f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80027f4:	69bb      	ldr	r3, [r7, #24]
    }
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b088      	sub	sp, #32
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	461a      	mov	r2, r3
 8002816:	21a5      	movs	r1, #165	; 0xa5
 8002818:	f001 fd9b 	bl	8004352 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002826:	3b01      	subs	r3, #1
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f023 0307 	bic.w	r3, r3, #7
 8002834:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <prvInitialiseNewTask+0x56>
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e7fe      	b.n	8002852 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01f      	beq.n	800289a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e012      	b.n	8002886 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	7819      	ldrb	r1, [r3, #0]
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	3334      	adds	r3, #52	; 0x34
 8002870:	460a      	mov	r2, r1
 8002872:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2b09      	cmp	r3, #9
 800288a:	d9e9      	bls.n	8002860 <prvInitialiseNewTask+0x62>
 800288c:	e000      	b.n	8002890 <prvInitialiseNewTask+0x92>
            {
                break;
 800288e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002898:	e003      	b.n	80028a2 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d901      	bls.n	80028ac <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028a8:	2304      	movs	r3, #4
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	2200      	movs	r2, #0
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	3304      	adds	r3, #4
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f9f6 	bl	8001cb4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	3318      	adds	r3, #24
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff f9f1 	bl	8001cb4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	f1c3 0205 	rsb	r2, r3, #5
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	3350      	adds	r3, #80	; 0x50
 80028ec:	2204      	movs	r2, #4
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fd2e 	bl	8004352 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	3354      	adds	r3, #84	; 0x54
 80028fa:	2201      	movs	r2, #1
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fd27 	bl	8004352 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	69b8      	ldr	r0, [r7, #24]
 800290a:	f001 f8bb 	bl	8003a84 <pxPortInitialiseStack>
 800290e:	4602      	mov	r2, r0
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002920:	bf00      	nop
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002930:	f001 f9ce 	bl	8003cd0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <prvAddNewTaskToReadyList+0xc0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <prvAddNewTaskToReadyList+0xc0>)
 800293c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800293e:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <prvAddNewTaskToReadyList+0xc4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002946:	4a29      	ldr	r2, [pc, #164]	; (80029ec <prvAddNewTaskToReadyList+0xc4>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <prvAddNewTaskToReadyList+0xc0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d110      	bne.n	8002976 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002954:	f000 fbf4 	bl	8003140 <prvInitialiseTaskLists>
 8002958:	e00d      	b.n	8002976 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <prvAddNewTaskToReadyList+0xc8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <prvAddNewTaskToReadyList+0xc4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	429a      	cmp	r2, r3
 800296e:	d802      	bhi.n	8002976 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002970:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <prvAddNewTaskToReadyList+0xc4>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002976:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <prvAddNewTaskToReadyList+0xcc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <prvAddNewTaskToReadyList+0xcc>)
 800297e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <prvAddNewTaskToReadyList+0xcc>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <prvAddNewTaskToReadyList+0xd0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <prvAddNewTaskToReadyList+0xd0>)
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4a15      	ldr	r2, [pc, #84]	; (80029fc <prvAddNewTaskToReadyList+0xd4>)
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f7ff f98c 	bl	8001cce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80029b6:	f001 f9b9 	bl	8003d2c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <prvAddNewTaskToReadyList+0xc8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <prvAddNewTaskToReadyList+0xc4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d207      	bcs.n	80029e0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <prvAddNewTaskToReadyList+0xd8>)
 80029d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000108 	.word	0x20000108
 80029ec:	20000030 	.word	0x20000030
 80029f0:	20000114 	.word	0x20000114
 80029f4:	20000124 	.word	0x20000124
 80029f8:	20000110 	.word	0x20000110
 80029fc:	20000034 	.word	0x20000034
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <vTaskDelay+0x60>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <vTaskDelay+0x2e>
 8002a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	e7fe      	b.n	8002a30 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8002a32:	f000 f86b 	bl	8002b0c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a36:	2100      	movs	r1, #0
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fcaf 	bl	800339c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a3e:	f000 f873 	bl	8002b28 <xTaskResumeAll>
 8002a42:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <vTaskDelay+0x64>)
 8002a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000130 	.word	0x20000130
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <vTaskStartScheduler+0x84>)
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2282      	movs	r2, #130	; 0x82
 8002a7e:	491d      	ldr	r1, [pc, #116]	; (8002af4 <vTaskStartScheduler+0x88>)
 8002a80:	481d      	ldr	r0, [pc, #116]	; (8002af8 <vTaskStartScheduler+0x8c>)
 8002a82:	f7ff fe7b 	bl	800277c <xTaskCreate>
 8002a86:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002a8e:	f000 fceb 	bl	8003468 <xTimerCreateTimerTask>
 8002a92:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d115      	bne.n	8002ac6 <vTaskStartScheduler+0x5a>
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <vTaskStartScheduler+0x90>)
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ab2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <vTaskStartScheduler+0x94>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <vTaskStartScheduler+0x98>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ac0:	f001 f868 	bl	8003b94 <xPortStartScheduler>
 8002ac4:	e00d      	b.n	8002ae2 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002acc:	d109      	bne.n	8002ae2 <vTaskStartScheduler+0x76>
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	e7fe      	b.n	8002ae0 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <vTaskStartScheduler+0x9c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000012c 	.word	0x2000012c
 8002af4:	0800438c 	.word	0x0800438c
 8002af8:	08003111 	.word	0x08003111
 8002afc:	20000128 	.word	0x20000128
 8002b00:	20000114 	.word	0x20000114
 8002b04:	2000010c 	.word	0x2000010c
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <vTaskSuspendAll+0x18>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <vTaskSuspendAll+0x18>)
 8002b18:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	20000130 	.word	0x20000130

08002b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <xTaskResumeAll+0x2a>
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	e7fe      	b.n	8002b50 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b52:	f001 f8bd 	bl	8003cd0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b56:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	4a37      	ldr	r2, [pc, #220]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b5e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b60:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <xTaskResumeAll+0x114>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d161      	bne.n	8002c2c <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <xTaskResumeAll+0x118>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05d      	beq.n	8002c2c <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b70:	e02e      	b.n	8002bd0 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <xTaskResumeAll+0x11c>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f902 	bl	8001d88 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f8fd 	bl	8001d88 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	2201      	movs	r2, #1
 8002b94:	409a      	lsls	r2, r3
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <xTaskResumeAll+0x120>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <xTaskResumeAll+0x120>)
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <xTaskResumeAll+0x124>)
 8002bae:	441a      	add	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f7ff f889 	bl	8001cce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <xTaskResumeAll+0x128>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <xTaskResumeAll+0x12c>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <xTaskResumeAll+0x11c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1cc      	bne.n	8002b72 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bde:	f000 fb2b 	bl	8003238 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <xTaskResumeAll+0x130>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bee:	f000 f847 	bl	8002c80 <xTaskIncrementTick>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <xTaskResumeAll+0x12c>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f1      	bne.n	8002bee <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <xTaskResumeAll+0x130>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <xTaskResumeAll+0x12c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <xTaskResumeAll+0x134>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c2c:	f001 f87e 	bl	8003d2c <vPortExitCritical>

    return xAlreadyYielded;
 8002c30:	68bb      	ldr	r3, [r7, #8]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000130 	.word	0x20000130
 8002c40:	20000108 	.word	0x20000108
 8002c44:	200000c8 	.word	0x200000c8
 8002c48:	20000110 	.word	0x20000110
 8002c4c:	20000034 	.word	0x20000034
 8002c50:	20000030 	.word	0x20000030
 8002c54:	2000011c 	.word	0x2000011c
 8002c58:	20000118 	.word	0x20000118
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <xTaskGetTickCount+0x1c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000010c 	.word	0x2000010c

08002c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c8a:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <xTaskIncrementTick+0x144>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 808d 	bne.w	8002dae <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <xTaskIncrementTick+0x148>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c9c:	4a4a      	ldr	r2, [pc, #296]	; (8002dc8 <xTaskIncrementTick+0x148>)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11f      	bne.n	8002ce8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ca8:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <xTaskIncrementTick+0x46>
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	e7fe      	b.n	8002cc4 <xTaskIncrementTick+0x44>
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <xTaskIncrementTick+0x150>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a3e      	ldr	r2, [pc, #248]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4a3e      	ldr	r2, [pc, #248]	; (8002dd0 <xTaskIncrementTick+0x150>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <xTaskIncrementTick+0x154>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a3c      	ldr	r2, [pc, #240]	; (8002dd4 <xTaskIncrementTick+0x154>)
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	f000 faa8 	bl	8003238 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <xTaskIncrementTick+0x158>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d348      	bcc.n	8002d84 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d104      	bne.n	8002d06 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <xTaskIncrementTick+0x158>)
 8002cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d02:	601a      	str	r2, [r3, #0]
                    break;
 8002d04:	e03e      	b.n	8002d84 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <xTaskIncrementTick+0x14c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d203      	bcs.n	8002d26 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d1e:	4a2e      	ldr	r2, [pc, #184]	; (8002dd8 <xTaskIncrementTick+0x158>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d24:	e02e      	b.n	8002d84 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f82c 	bl	8001d88 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f823 	bl	8001d88 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	2201      	movs	r2, #1
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <xTaskIncrementTick+0x15c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <xTaskIncrementTick+0x15c>)
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <xTaskIncrementTick+0x160>)
 8002d62:	441a      	add	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f7fe ffaf 	bl	8001cce <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <xTaskIncrementTick+0x164>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3b9      	bcc.n	8002cf2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d82:	e7b6      	b.n	8002cf2 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <xTaskIncrementTick+0x164>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	4915      	ldr	r1, [pc, #84]	; (8002de0 <xTaskIncrementTick+0x160>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d901      	bls.n	8002da0 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <xTaskIncrementTick+0x168>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e004      	b.n	8002db8 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <xTaskIncrementTick+0x16c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <xTaskIncrementTick+0x16c>)
 8002db6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002db8:	697b      	ldr	r3, [r7, #20]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000130 	.word	0x20000130
 8002dc8:	2000010c 	.word	0x2000010c
 8002dcc:	200000c0 	.word	0x200000c0
 8002dd0:	200000c4 	.word	0x200000c4
 8002dd4:	20000120 	.word	0x20000120
 8002dd8:	20000128 	.word	0x20000128
 8002ddc:	20000110 	.word	0x20000110
 8002de0:	20000034 	.word	0x20000034
 8002de4:	20000030 	.word	0x20000030
 8002de8:	2000011c 	.word	0x2000011c
 8002dec:	20000118 	.word	0x20000118

08002df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <vTaskSwitchContext+0xa0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dfe:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <vTaskSwitchContext+0xa4>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e04:	e03e      	b.n	8002e84 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <vTaskSwitchContext+0xa4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <vTaskSwitchContext+0xa8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
 8002e1c:	f1c3 031f 	rsb	r3, r3, #31
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	491e      	ldr	r1, [pc, #120]	; (8002e9c <vTaskSwitchContext+0xac>)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <vTaskSwitchContext+0x5a>
        __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	e7fe      	b.n	8002e48 <vTaskSwitchContext+0x58>
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <vTaskSwitchContext+0xac>)
 8002e56:	4413      	add	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d104      	bne.n	8002e7a <vTaskSwitchContext+0x8a>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <vTaskSwitchContext+0xb0>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	20000130 	.word	0x20000130
 8002e94:	2000011c 	.word	0x2000011c
 8002e98:	20000110 	.word	0x20000110
 8002e9c:	20000034 	.word	0x20000034
 8002ea0:	20000030 	.word	0x20000030

08002ea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <vTaskPlaceOnEventList+0x24>
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e7fe      	b.n	8002ec6 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <vTaskPlaceOnEventList+0x44>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3318      	adds	r3, #24
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe ff20 	bl	8001d16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	6838      	ldr	r0, [r7, #0]
 8002eda:	f000 fa5f 	bl	800339c <prvAddCurrentTaskToDelayedList>
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000030 	.word	0x20000030

08002eec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <vTaskPlaceOnEventListRestricted+0x26>
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e7fe      	b.n	8002f10 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <vTaskPlaceOnEventListRestricted+0x50>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3318      	adds	r3, #24
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7fe fed7 	bl	8001cce <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f2a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	68b8      	ldr	r0, [r7, #8]
 8002f30:	f000 fa34 	bl	800339c <prvAddCurrentTaskToDelayedList>
    }
 8002f34:	bf00      	nop
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000030 	.word	0x20000030

08002f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <xTaskRemoveFromEventList+0x2a>
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e7fe      	b.n	8002f68 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe ff0a 	bl	8001d88 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <xTaskRemoveFromEventList+0xac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11c      	bne.n	8002fb6 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe ff01 	bl	8001d88 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <xTaskRemoveFromEventList+0xb0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <xTaskRemoveFromEventList+0xb0>)
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <xTaskRemoveFromEventList+0xb4>)
 8002fa6:	441a      	add	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7fe fe8d 	bl	8001cce <vListInsertEnd>
 8002fb4:	e005      	b.n	8002fc2 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	3318      	adds	r3, #24
 8002fba:	4619      	mov	r1, r3
 8002fbc:	480e      	ldr	r0, [pc, #56]	; (8002ff8 <xTaskRemoveFromEventList+0xb8>)
 8002fbe:	f7fe fe86 	bl	8001cce <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <xTaskRemoveFromEventList+0xbc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d905      	bls.n	8002fdc <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <xTaskRemoveFromEventList+0xc0>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e001      	b.n	8002fe0 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002fe0:	697b      	ldr	r3, [r7, #20]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000130 	.word	0x20000130
 8002ff0:	20000110 	.word	0x20000110
 8002ff4:	20000034 	.word	0x20000034
 8002ff8:	200000c8 	.word	0x200000c8
 8002ffc:	20000030 	.word	0x20000030
 8003000:	2000011c 	.word	0x2000011c

08003004 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <vTaskInternalSetTimeOutState+0x24>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <vTaskInternalSetTimeOutState+0x28>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	20000120 	.word	0x20000120
 800302c:	2000010c 	.word	0x2000010c

08003030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <xTaskCheckForTimeOut+0x24>
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e7fe      	b.n	8003052 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <xTaskCheckForTimeOut+0x3e>
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e7fe      	b.n	800306c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800306e:	f000 fe2f 	bl	8003cd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <xTaskCheckForTimeOut+0xc0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308a:	d102      	bne.n	8003092 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	e026      	b.n	80030e0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <xTaskCheckForTimeOut+0xc4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d00a      	beq.n	80030b4 <xTaskCheckForTimeOut+0x84>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d305      	bcc.n	80030b4 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e015      	b.n	80030e0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d20b      	bcs.n	80030d6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	1ad2      	subs	r2, r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ff9a 	bl	8003004 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e004      	b.n	80030e0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030dc:	2301      	movs	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030e0:	f000 fe24 	bl	8003d2c <vPortExitCritical>

    return xReturn;
 80030e4:	69fb      	ldr	r3, [r7, #28]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000010c 	.word	0x2000010c
 80030f4:	20000120 	.word	0x20000120

080030f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <vTaskMissedYield+0x14>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	2000011c 	.word	0x2000011c

08003110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003118:	f000 f852 	bl	80031c0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <prvIdleTask+0x28>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d9f9      	bls.n	8003118 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <prvIdleTask+0x2c>)
 8003126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003134:	e7f0      	b.n	8003118 <prvIdleTask+0x8>
 8003136:	bf00      	nop
 8003138:	20000034 	.word	0x20000034
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	e00c      	b.n	8003166 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <prvInitialiseTaskLists+0x60>)
 8003158:	4413      	add	r3, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fd8a 	bl	8001c74 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3301      	adds	r3, #1
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d9ef      	bls.n	800314c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800316c:	480d      	ldr	r0, [pc, #52]	; (80031a4 <prvInitialiseTaskLists+0x64>)
 800316e:	f7fe fd81 	bl	8001c74 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003172:	480d      	ldr	r0, [pc, #52]	; (80031a8 <prvInitialiseTaskLists+0x68>)
 8003174:	f7fe fd7e 	bl	8001c74 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003178:	480c      	ldr	r0, [pc, #48]	; (80031ac <prvInitialiseTaskLists+0x6c>)
 800317a:	f7fe fd7b 	bl	8001c74 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800317e:	480c      	ldr	r0, [pc, #48]	; (80031b0 <prvInitialiseTaskLists+0x70>)
 8003180:	f7fe fd78 	bl	8001c74 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <prvInitialiseTaskLists+0x74>)
 8003186:	f7fe fd75 	bl	8001c74 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <prvInitialiseTaskLists+0x78>)
 800318c:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <prvInitialiseTaskLists+0x64>)
 800318e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <prvInitialiseTaskLists+0x7c>)
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <prvInitialiseTaskLists+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000034 	.word	0x20000034
 80031a4:	20000098 	.word	0x20000098
 80031a8:	200000ac 	.word	0x200000ac
 80031ac:	200000c8 	.word	0x200000c8
 80031b0:	200000dc 	.word	0x200000dc
 80031b4:	200000f4 	.word	0x200000f4
 80031b8:	200000c0 	.word	0x200000c0
 80031bc:	200000c4 	.word	0x200000c4

080031c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031c6:	e019      	b.n	80031fc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80031c8:	f000 fd82 	bl	8003cd0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <prvCheckTasksWaitingTermination+0x4c>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fdd5 	bl	8001d88 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <prvCheckTasksWaitingTermination+0x50>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <prvCheckTasksWaitingTermination+0x50>)
 80031e6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <prvCheckTasksWaitingTermination+0x54>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <prvCheckTasksWaitingTermination+0x54>)
 80031f0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031f2:	f000 fd9b 	bl	8003d2c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f80e 	bl	8003218 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <prvCheckTasksWaitingTermination+0x54>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e1      	bne.n	80031c8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200000dc 	.word	0x200000dc
 8003210:	20000108 	.word	0x20000108
 8003214:	200000f0 	.word	0x200000f0

08003218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	4618      	mov	r0, r3
 8003226:	f000 ff49 	bl	80040bc <vPortFree>
                vPortFree( pxTCB );
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 ff46 	bl	80040bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvResetNextTaskUnblockTime+0x30>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <prvResetNextTaskUnblockTime+0x34>)
 8003248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800324c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800324e:	e005      	b.n	800325c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <prvResetNextTaskUnblockTime+0x30>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <prvResetNextTaskUnblockTime+0x34>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	200000c0 	.word	0x200000c0
 800326c:	20000128 	.word	0x20000128

08003270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <xTaskGetSchedulerState+0x34>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800327e:	2301      	movs	r3, #1
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	e008      	b.n	8003296 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <xTaskGetSchedulerState+0x38>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800328c:	2302      	movs	r3, #2
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	e001      	b.n	8003296 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003296:	687b      	ldr	r3, [r7, #4]
    }
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000114 	.word	0x20000114
 80032a8:	20000130 	.word	0x20000130

080032ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d061      	beq.n	8003386 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <xTaskPriorityDisinherit+0xe4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d009      	beq.n	80032e0 <xTaskPriorityDisinherit+0x34>
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e7fe      	b.n	80032de <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <xTaskPriorityDisinherit+0x50>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	e7fe      	b.n	80032fa <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	1e5a      	subs	r2, r3, #1
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330e:	429a      	cmp	r2, r3
 8003310:	d039      	beq.n	8003386 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d135      	bne.n	8003386 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fd32 	bl	8001d88 <uxListRemove>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	2201      	movs	r2, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43da      	mvns	r2, r3
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <xTaskPriorityDisinherit+0xe8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4013      	ands	r3, r2
 800333c:	4a15      	ldr	r2, [pc, #84]	; (8003394 <xTaskPriorityDisinherit+0xe8>)
 800333e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	f1c3 0205 	rsb	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	2201      	movs	r2, #1
 800335a:	409a      	lsls	r2, r3
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <xTaskPriorityDisinherit+0xe8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <xTaskPriorityDisinherit+0xe8>)
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <xTaskPriorityDisinherit+0xec>)
 8003374:	441a      	add	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fe fca6 	bl	8001cce <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003386:	697b      	ldr	r3, [r7, #20]
    }
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000030 	.word	0x20000030
 8003394:	20000110 	.word	0x20000110
 8003398:	20000034 	.word	0x20000034

0800339c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <prvAddCurrentTaskToDelayedList+0xb0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fce8 	bl	8001d88 <uxListRemove>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2201      	movs	r2, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4013      	ands	r3, r2
 80033d2:	4a20      	ldr	r2, [pc, #128]	; (8003454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033dc:	d10a      	bne.n	80033f4 <prvAddCurrentTaskToDelayedList+0x58>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	481a      	ldr	r0, [pc, #104]	; (8003458 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033ee:	f7fe fc6e 	bl	8001cce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033f2:	e026      	b.n	8003442 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d209      	bcs.n	8003420 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <prvAddCurrentTaskToDelayedList+0xc0>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f7fe fc7c 	bl	8001d16 <vListInsert>
}
 800341e:	e010      	b.n	8003442 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f7fe fc72 	bl	8001d16 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d202      	bcs.n	8003442 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800343c:	4a09      	ldr	r2, [pc, #36]	; (8003464 <prvAddCurrentTaskToDelayedList+0xc8>)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6013      	str	r3, [r2, #0]
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000010c 	.word	0x2000010c
 8003450:	20000030 	.word	0x20000030
 8003454:	20000110 	.word	0x20000110
 8003458:	200000f4 	.word	0x200000f4
 800345c:	200000c4 	.word	0x200000c4
 8003460:	200000c0 	.word	0x200000c0
 8003464:	20000128 	.word	0x20000128

08003468 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003472:	f000 fad1 	bl	8003a18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <xTimerCreateTimerTask+0x54>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <xTimerCreateTimerTask+0x58>)
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	2302      	movs	r3, #2
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	f44f 7282 	mov.w	r2, #260	; 0x104
 800348c:	490d      	ldr	r1, [pc, #52]	; (80034c4 <xTimerCreateTimerTask+0x5c>)
 800348e:	480e      	ldr	r0, [pc, #56]	; (80034c8 <xTimerCreateTimerTask+0x60>)
 8003490:	f7ff f974 	bl	800277c <xTaskCreate>
 8003494:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <xTimerCreateTimerTask+0x48>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	e7fe      	b.n	80034ae <xTimerCreateTimerTask+0x46>
        return xReturn;
 80034b0:	687b      	ldr	r3, [r7, #4]
    }
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000164 	.word	0x20000164
 80034c0:	20000168 	.word	0x20000168
 80034c4:	08004394 	.word	0x08004394
 80034c8:	080035fd 	.word	0x080035fd

080034cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <xTimerGenericCommand+0x2c>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	e7fe      	b.n	80034f6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <xTimerGenericCommand+0x94>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02a      	beq.n	8003556 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b05      	cmp	r3, #5
 8003510:	dc18      	bgt.n	8003544 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003512:	f7ff fead 	bl	8003270 <xTaskGetSchedulerState>
 8003516:	4603      	mov	r3, r0
 8003518:	2b02      	cmp	r3, #2
 800351a:	d109      	bne.n	8003530 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <xTimerGenericCommand+0x94>)
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	f107 0114 	add.w	r1, r7, #20
 8003524:	2300      	movs	r3, #0
 8003526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003528:	f7fe fd40 	bl	8001fac <xQueueGenericSend>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24
 800352e:	e012      	b.n	8003556 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <xTimerGenericCommand+0x94>)
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	f107 0114 	add.w	r1, r7, #20
 8003538:	2300      	movs	r3, #0
 800353a:	2200      	movs	r2, #0
 800353c:	f7fe fd36 	bl	8001fac <xQueueGenericSend>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24
 8003542:	e008      	b.n	8003556 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <xTimerGenericCommand+0x94>)
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	f107 0114 	add.w	r1, r7, #20
 800354c:	2300      	movs	r3, #0
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	f7fe fe26 	bl	80021a0 <xQueueGenericSendFromISR>
 8003554:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003558:	4618      	mov	r0, r3
 800355a:	3728      	adds	r7, #40	; 0x28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000164 	.word	0x20000164

08003564 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <prvProcessExpiredTimer+0x94>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3304      	adds	r3, #4
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fc03 	bl	8001d88 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d021      	beq.n	80035d4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	18d1      	adds	r1, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	6978      	ldr	r0, [r7, #20]
 800359e:	f000 f8d1 	bl	8003744 <prvInsertTimerInActiveList>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01e      	beq.n	80035e6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80035a8:	2300      	movs	r3, #0
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2300      	movs	r3, #0
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	2100      	movs	r1, #0
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	f7ff ff8a 	bl	80034cc <xTimerGenericCommand>
 80035b8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d112      	bne.n	80035e6 <prvProcessExpiredTimer+0x82>
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e7fe      	b.n	80035d2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	4798      	blx	r3
    }
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2000015c 	.word	0x2000015c

080035fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003604:	f107 0308 	add.w	r3, r7, #8
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f857 	bl	80036bc <prvGetNextExpireTime>
 800360e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4619      	mov	r1, r3
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f803 	bl	8003620 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800361a:	f000 f8d5 	bl	80037c8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800361e:	e7f1      	b.n	8003604 <prvTimerTask+0x8>

08003620 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800362a:	f7ff fa6f 	bl	8002b0c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800362e:	f107 0308 	add.w	r3, r7, #8
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f866 	bl	8003704 <prvSampleTimeNow>
 8003638:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d130      	bne.n	80036a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <prvProcessTimerOrBlockTask+0x3c>
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	429a      	cmp	r2, r3
 800364c:	d806      	bhi.n	800365c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800364e:	f7ff fa6b 	bl	8002b28 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff85 	bl	8003564 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800365a:	e024      	b.n	80036a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003662:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <prvProcessTimerOrBlockTask+0x90>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <prvProcessTimerOrBlockTask+0x50>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <prvProcessTimerOrBlockTask+0x52>
 8003670:	2300      	movs	r3, #0
 8003672:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <prvProcessTimerOrBlockTask+0x94>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f7ff f847 	bl	8002714 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003686:	f7ff fa4f 	bl	8002b28 <xTaskResumeAll>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <prvProcessTimerOrBlockTask+0x98>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
    }
 80036a0:	e001      	b.n	80036a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80036a2:	f7ff fa41 	bl	8002b28 <xTaskResumeAll>
    }
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000160 	.word	0x20000160
 80036b4:	20000164 	.word	0x20000164
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <prvGetNextExpireTime+0x44>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <prvGetNextExpireTime+0x16>
 80036ce:	2201      	movs	r2, #1
 80036d0:	e000      	b.n	80036d4 <prvGetNextExpireTime+0x18>
 80036d2:	2200      	movs	r2, #0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <prvGetNextExpireTime+0x44>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e001      	b.n	80036f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80036f0:	68fb      	ldr	r3, [r7, #12]
    }
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2000015c 	.word	0x2000015c

08003704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800370c:	f7ff faa8 	bl	8002c60 <xTaskGetTickCount>
 8003710:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <prvSampleTimeNow+0x3c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d205      	bcs.n	8003728 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800371c:	f000 f918 	bl	8003950 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e002      	b.n	800372e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800372e:	4a04      	ldr	r2, [pc, #16]	; (8003740 <prvSampleTimeNow+0x3c>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003734:	68fb      	ldr	r3, [r7, #12]
    }
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2000016c 	.word	0x2000016c

08003744 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d812      	bhi.n	8003790 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	1ad2      	subs	r2, r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003778:	2301      	movs	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e01b      	b.n	80037b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <prvInsertTimerInActiveList+0x7c>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3304      	adds	r3, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7fe fac4 	bl	8001d16 <vListInsert>
 800378e:	e012      	b.n	80037b6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d206      	bcs.n	80037a6 <prvInsertTimerInActiveList+0x62>
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e007      	b.n	80037b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037a6:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <prvInsertTimerInActiveList+0x80>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3304      	adds	r3, #4
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f7fe fab0 	bl	8001d16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80037b6:	697b      	ldr	r3, [r7, #20]
    }
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000160 	.word	0x20000160
 80037c4:	2000015c 	.word	0x2000015c

080037c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	; 0x30
 80037cc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037ce:	e0ac      	b.n	800392a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f2c0 80a8 	blt.w	8003928 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	3304      	adds	r3, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe facd 	bl	8001d88 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff87 	bl	8003704 <prvSampleTimeNow>
 80037f6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	f200 8095 	bhi.w	800392a <prvProcessReceivedCommands+0x162>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <prvProcessReceivedCommands+0x40>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003831 	.word	0x08003831
 800380c:	08003831 	.word	0x08003831
 8003810:	08003831 	.word	0x08003831
 8003814:	080038a3 	.word	0x080038a3
 8003818:	080038b7 	.word	0x080038b7
 800381c:	080038ff 	.word	0x080038ff
 8003820:	08003831 	.word	0x08003831
 8003824:	08003831 	.word	0x08003831
 8003828:	080038a3 	.word	0x080038a3
 800382c:	080038b7 	.word	0x080038b7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	18d1      	adds	r1, r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a3a      	ldr	r2, [r7, #32]
 800384e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003850:	f7ff ff78 	bl	8003744 <prvInsertTimerInActiveList>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d067      	beq.n	800392a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003860:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05c      	beq.n	800392a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	441a      	add	r2, r3
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	2100      	movs	r1, #0
 8003880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003882:	f7ff fe23 	bl	80034cc <xTimerGenericCommand>
 8003886:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d14d      	bne.n	800392a <prvProcessReceivedCommands+0x162>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e7fe      	b.n	80038a0 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80038b4:	e039      	b.n	800392a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <prvProcessReceivedCommands+0x122>
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e7fe      	b.n	80038e8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	18d1      	adds	r1, r2, r3
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038f8:	f7ff ff24 	bl	8003744 <prvInsertTimerInActiveList>
                        break;
 80038fc:	e015      	b.n	800392a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 800390c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800390e:	f000 fbd5 	bl	80040bc <vPortFree>
 8003912:	e00a      	b.n	800392a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003926:	e000      	b.n	800392a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003928:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <prvProcessReceivedCommands+0x184>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f107 0108 	add.w	r1, r7, #8
 8003932:	2200      	movs	r2, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fcd9 	bl	80022ec <xQueueReceive>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f af47 	bne.w	80037d0 <prvProcessReceivedCommands+0x8>
        }
    }
 8003942:	bf00      	nop
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000164 	.word	0x20000164

08003950 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003956:	e047      	b.n	80039e8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003958:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <prvSwitchTimerLists+0xc0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003962:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <prvSwitchTimerLists+0xc0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3304      	adds	r3, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fa09 	bl	8001d88 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d02d      	beq.n	80039e8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d90e      	bls.n	80039bc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <prvSwitchTimerLists+0xc0>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe f9ae 	bl	8001d16 <vListInsert>
 80039ba:	e015      	b.n	80039e8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039bc:	2300      	movs	r3, #0
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2300      	movs	r3, #0
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	2100      	movs	r1, #0
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff fd80 	bl	80034cc <xTimerGenericCommand>
 80039cc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <prvSwitchTimerLists+0x98>
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	e7fe      	b.n	80039e6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <prvSwitchTimerLists+0xc0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1b2      	bne.n	8003958 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80039f2:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <prvSwitchTimerLists+0xc0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <prvSwitchTimerLists+0xc4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <prvSwitchTimerLists+0xc0>)
 80039fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <prvSwitchTimerLists+0xc4>)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6013      	str	r3, [r2, #0]
    }
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	2000015c 	.word	0x2000015c
 8003a14:	20000160 	.word	0x20000160

08003a18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a1c:	f000 f958 	bl	8003cd0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <prvCheckForValidListAndQueue+0x54>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11d      	bne.n	8003a64 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a28:	4811      	ldr	r0, [pc, #68]	; (8003a70 <prvCheckForValidListAndQueue+0x58>)
 8003a2a:	f7fe f923 	bl	8001c74 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a2e:	4811      	ldr	r0, [pc, #68]	; (8003a74 <prvCheckForValidListAndQueue+0x5c>)
 8003a30:	f7fe f920 	bl	8001c74 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <prvCheckForValidListAndQueue+0x60>)
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <prvCheckForValidListAndQueue+0x58>)
 8003a38:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <prvCheckForValidListAndQueue+0x64>)
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <prvCheckForValidListAndQueue+0x5c>)
 8003a3e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a40:	2200      	movs	r2, #0
 8003a42:	210c      	movs	r1, #12
 8003a44:	200a      	movs	r0, #10
 8003a46:	f7fe fa31 	bl	8001eac <xQueueGenericCreate>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <prvCheckForValidListAndQueue+0x54>)
 8003a4e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <prvCheckForValidListAndQueue+0x54>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <prvCheckForValidListAndQueue+0x54>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4908      	ldr	r1, [pc, #32]	; (8003a80 <prvCheckForValidListAndQueue+0x68>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fe30 	bl	80026c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a64:	f000 f962 	bl	8003d2c <vPortExitCritical>
    }
 8003a68:	bf00      	nop
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000164 	.word	0x20000164
 8003a70:	20000134 	.word	0x20000134
 8003a74:	20000148 	.word	0x20000148
 8003a78:	2000015c 	.word	0x2000015c
 8003a7c:	20000160 	.word	0x20000160
 8003a80:	0800439c 	.word	0x0800439c

08003a84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3b04      	subs	r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3b04      	subs	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b04      	subs	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ab4:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <pxPortInitialiseStack+0x64>)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b14      	subs	r3, #20
 8003abe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3b04      	subs	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f06f 0202 	mvn.w	r2, #2
 8003ad2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3b20      	subs	r3, #32
 8003ad8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	08003aed 	.word	0x08003aed

08003aec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <prvTaskExitError+0x50>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afe:	d009      	beq.n	8003b14 <prvTaskExitError+0x28>
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e7fe      	b.n	8003b12 <prvTaskExitError+0x26>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b26:	bf00      	nop
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0fc      	beq.n	8003b28 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000010 	.word	0x20000010

08003b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <pxCurrentTCBConst2>)
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	f380 8809 	msr	PSP, r0
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	4770      	bx	lr
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst2>:
 8003b60:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <prvPortStartFirstTask+0x24>)
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f380 8808 	msr	MSP, r0
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8814 	msr	CONTROL, r0
 8003b7a:	b662      	cpsie	i
 8003b7c:	b661      	cpsie	f
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	df00      	svc	0
 8003b88:	bf00      	nop
 8003b8a:	0000      	.short	0x0000
 8003b8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop

08003b94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b9a:	4b44      	ldr	r3, [pc, #272]	; (8003cac <xPortStartScheduler+0x118>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <xPortStartScheduler+0x11c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <xPortStartScheduler+0x24>
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e7fe      	b.n	8003bb6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bb8:	4b3c      	ldr	r3, [pc, #240]	; (8003cac <xPortStartScheduler+0x118>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3d      	ldr	r2, [pc, #244]	; (8003cb4 <xPortStartScheduler+0x120>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d109      	bne.n	8003bd6 <xPortStartScheduler+0x42>
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e7fe      	b.n	8003bd4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bd6:	4b38      	ldr	r3, [pc, #224]	; (8003cb8 <xPortStartScheduler+0x124>)
 8003bd8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	22ff      	movs	r2, #255	; 0xff
 8003be6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <xPortStartScheduler+0x128>)
 8003bfc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c00:	2207      	movs	r2, #7
 8003c02:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c04:	e009      	b.n	8003c1a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003c06:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c0e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d0ef      	beq.n	8003c06 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d009      	beq.n	8003c46 <xPortStartScheduler+0xb2>
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	e7fe      	b.n	8003c44 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c4e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003c5a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <xPortStartScheduler+0x130>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <xPortStartScheduler+0x130>)
 8003c6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c6e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <xPortStartScheduler+0x130>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <xPortStartScheduler+0x130>)
 8003c76:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c7c:	f000 f8d4 	bl	8003e28 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c86:	f000 f8f3 	bl	8003e70 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <xPortStartScheduler+0x138>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a0f      	ldr	r2, [pc, #60]	; (8003ccc <xPortStartScheduler+0x138>)
 8003c90:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c94:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c96:	f7ff ff67 	bl	8003b68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c9a:	f7ff f8a9 	bl	8002df0 <vTaskSwitchContext>
    prvTaskExitError();
 8003c9e:	f7ff ff25 	bl	8003aec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	e000ed00 	.word	0xe000ed00
 8003cb0:	410fc271 	.word	0x410fc271
 8003cb4:	410fc270 	.word	0x410fc270
 8003cb8:	e000e400 	.word	0xe000e400
 8003cbc:	20000170 	.word	0x20000170
 8003cc0:	20000174 	.word	0x20000174
 8003cc4:	e000ed20 	.word	0xe000ed20
 8003cc8:	20000010 	.word	0x20000010
 8003ccc:	e000ef34 	.word	0xe000ef34

08003cd0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <vPortEnterCritical+0x54>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <vPortEnterCritical+0x54>)
 8003cf0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <vPortEnterCritical+0x54>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d10e      	bne.n	8003d18 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <vPortEnterCritical+0x58>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <vPortEnterCritical+0x48>
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	e7fe      	b.n	8003d16 <vPortEnterCritical+0x46>
    }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	20000010 	.word	0x20000010
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <vPortExitCritical+0x22>
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	e7fe      	b.n	8003d4c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d56:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <vPortExitCritical+0x3e>
 8003d60:	2300      	movs	r3, #0
 8003d62:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000010 	.word	0x20000010
 8003d7c:	00000000 	.word	0x00000000

08003d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003d80:	f3ef 8009 	mrs	r0, PSP
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <pxCurrentTCBConst>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f01e 0f10 	tst.w	lr, #16
 8003d90:	bf08      	it	eq
 8003d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003da4:	f380 8811 	msr	BASEPRI, r0
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f7ff f81e 	bl	8002df0 <vTaskSwitchContext>
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f380 8811 	msr	BASEPRI, r0
 8003dbc:	bc09      	pop	{r0, r3}
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	6808      	ldr	r0, [r1, #0]
 8003dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc6:	f01e 0f10 	tst.w	lr, #16
 8003dca:	bf08      	it	eq
 8003dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003dd0:	f380 8809 	msr	PSP, r0
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst>:
 8003de0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
        __asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e00:	f7fe ff3e 	bl	8002c80 <xTaskIncrementTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <SysTick_Handler+0x3c>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <vPortSetupTimerInterrupt+0x38>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <vPortSetupTimerInterrupt+0x3c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <vPortSetupTimerInterrupt+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <vPortSetupTimerInterrupt+0x44>)
 8003e46:	3b01      	subs	r3, #1
 8003e48:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010
 8003e60:	e000e018 	.word	0xe000e018
 8003e64:	20000000 	.word	0x20000000
 8003e68:	10624dd3 	.word	0x10624dd3
 8003e6c:	e000e014 	.word	0xe000e014

08003e70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003e70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e80 <vPortEnableVFP+0x10>
 8003e74:	6801      	ldr	r1, [r0, #0]
 8003e76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e7a:	6001      	str	r1, [r0, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	0000      	.short	0x0000
 8003e80:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop

08003e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003e8e:	f3ef 8305 	mrs	r3, IPSR
 8003e92:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b0f      	cmp	r3, #15
 8003e98:	d913      	bls.n	8003ec2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e9a:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <vPortValidateInterruptPriority+0x6c>)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <vPortValidateInterruptPriority+0x70>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	7afa      	ldrb	r2, [r7, #11]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d209      	bcs.n	8003ec2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	e7fe      	b.n	8003ec0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <vPortValidateInterruptPriority+0x74>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <vPortValidateInterruptPriority+0x78>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d909      	bls.n	8003ee6 <vPortValidateInterruptPriority+0x5e>
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	e7fe      	b.n	8003ee4 <vPortValidateInterruptPriority+0x5c>
    }
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	e000e3f0 	.word	0xe000e3f0
 8003ef8:	20000170 	.word	0x20000170
 8003efc:	e000ed0c 	.word	0xe000ed0c
 8003f00:	20000174 	.word	0x20000174

08003f04 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003f10:	f7fe fdfc 	bl	8002b0c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f14:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <pvPortMalloc+0x1a0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f1c:	f000 f92e 	bl	800417c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <pvPortMalloc+0x1a4>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 80a5 	bne.w	8004078 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02c      	beq.n	8003f8e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003f34:	2208      	movs	r2, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d226      	bcs.n	8003f8e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8003f40:	2208      	movs	r2, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f023 0307 	bic.w	r3, r3, #7
 8003f58:	3308      	adds	r3, #8
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d213      	bcs.n	8003f88 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f023 0307 	bic.w	r3, r3, #7
 8003f66:	3308      	adds	r3, #8
 8003f68:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <pvPortMalloc+0x90>
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e7fe      	b.n	8003f86 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f8c:	e002      	b.n	8003f94 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	e000      	b.n	8003f96 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f94:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d06d      	beq.n	8004078 <pvPortMalloc+0x174>
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <pvPortMalloc+0x1a8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d868      	bhi.n	8004078 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fa6:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <pvPortMalloc+0x1ac>)
 8003fa8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <pvPortMalloc+0x1ac>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb0:	e004      	b.n	8003fbc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d903      	bls.n	8003fce <pvPortMalloc+0xca>
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f1      	bne.n	8003fb2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fce:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <pvPortMalloc+0x1a0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d04f      	beq.n	8004078 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	4413      	add	r3, r2
 8003fe0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d91e      	bls.n	8004038 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4413      	add	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <pvPortMalloc+0x11c>
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e7fe      	b.n	800401e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004032:	69b8      	ldr	r0, [r7, #24]
 8004034:	f000 f904 	bl	8004240 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004038:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <pvPortMalloc+0x1a8>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <pvPortMalloc+0x1a8>)
 8004044:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <pvPortMalloc+0x1a8>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <pvPortMalloc+0x1b0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d203      	bcs.n	800405a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <pvPortMalloc+0x1a8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <pvPortMalloc+0x1b0>)
 8004058:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <pvPortMalloc+0x1a4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	431a      	orrs	r2, r3
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <pvPortMalloc+0x1b4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <pvPortMalloc+0x1b4>)
 8004076:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004078:	f7fe fd56 	bl	8002b28 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <pvPortMalloc+0x196>
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e7fe      	b.n	8004098 <pvPortMalloc+0x194>
    return pvReturn;
 800409a:	69fb      	ldr	r3, [r7, #28]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3728      	adds	r7, #40	; 0x28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20012d80 	.word	0x20012d80
 80040a8:	20012d94 	.word	0x20012d94
 80040ac:	20012d84 	.word	0x20012d84
 80040b0:	20012d78 	.word	0x20012d78
 80040b4:	20012d88 	.word	0x20012d88
 80040b8:	20012d8c 	.word	0x20012d8c

080040bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d04b      	beq.n	8004166 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040ce:	2308      	movs	r3, #8
 80040d0:	425b      	negs	r3, r3
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <vPortFree+0xb4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <vPortFree+0x42>
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e7fe      	b.n	80040fc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <vPortFree+0x5e>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	e7fe      	b.n	8004118 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <vPortFree+0xb4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01e      	beq.n	8004166 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11a      	bne.n	8004166 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <vPortFree+0xb4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	43db      	mvns	r3, r3
 800413a:	401a      	ands	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004140:	f7fe fce4 	bl	8002b0c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <vPortFree+0xb8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4413      	add	r3, r2
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <vPortFree+0xb8>)
 8004150:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004152:	6938      	ldr	r0, [r7, #16]
 8004154:	f000 f874 	bl	8004240 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004158:	4b07      	ldr	r3, [pc, #28]	; (8004178 <vPortFree+0xbc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	4a06      	ldr	r2, [pc, #24]	; (8004178 <vPortFree+0xbc>)
 8004160:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004162:	f7fe fce1 	bl	8002b28 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20012d94 	.word	0x20012d94
 8004174:	20012d84 	.word	0x20012d84
 8004178:	20012d90 	.word	0x20012d90

0800417c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004182:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004186:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <prvHeapInit+0xac>)
 800418a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3307      	adds	r3, #7
 800419a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0307 	bic.w	r3, r3, #7
 80041a2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <prvHeapInit+0xac>)
 80041ac:	4413      	add	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <prvHeapInit+0xb0>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041ba:	4b1c      	ldr	r3, [pc, #112]	; (800422c <prvHeapInit+0xb0>)
 80041bc:	2200      	movs	r2, #0
 80041be:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4413      	add	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041c8:	2208      	movs	r2, #8
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0307 	bic.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <prvHeapInit+0xb4>)
 80041dc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <prvHeapInit+0xb4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <prvHeapInit+0xb4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <prvHeapInit+0xb4>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <prvHeapInit+0xb8>)
 800420a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a09      	ldr	r2, [pc, #36]	; (8004238 <prvHeapInit+0xbc>)
 8004212:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <prvHeapInit+0xc0>)
 8004216:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800421a:	601a      	str	r2, [r3, #0]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	20000178 	.word	0x20000178
 800422c:	20012d78 	.word	0x20012d78
 8004230:	20012d80 	.word	0x20012d80
 8004234:	20012d88 	.word	0x20012d88
 8004238:	20012d84 	.word	0x20012d84
 800423c:	20012d94 	.word	0x20012d94

08004240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <prvInsertBlockIntoFreeList+0xac>)
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e002      	b.n	8004254 <prvInsertBlockIntoFreeList+0x14>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d8f7      	bhi.n	800424e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d108      	bne.n	8004282 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	441a      	add	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d118      	bne.n	80042c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <prvInsertBlockIntoFreeList+0xb0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d00d      	beq.n	80042be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e008      	b.n	80042d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <prvInsertBlockIntoFreeList+0xb0>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e003      	b.n	80042d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d002      	beq.n	80042de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20012d78 	.word	0x20012d78
 80042f0:	20012d80 	.word	0x20012d80

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4e0d      	ldr	r6, [pc, #52]	; (800432c <__libc_init_array+0x38>)
 80042f8:	4c0d      	ldr	r4, [pc, #52]	; (8004330 <__libc_init_array+0x3c>)
 80042fa:	1ba4      	subs	r4, r4, r6
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	2500      	movs	r5, #0
 8004300:	42a5      	cmp	r5, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	4e0b      	ldr	r6, [pc, #44]	; (8004334 <__libc_init_array+0x40>)
 8004306:	4c0c      	ldr	r4, [pc, #48]	; (8004338 <__libc_init_array+0x44>)
 8004308:	f000 f82c 	bl	8004364 <_init>
 800430c:	1ba4      	subs	r4, r4, r6
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	2500      	movs	r5, #0
 8004312:	42a5      	cmp	r5, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800431c:	4798      	blx	r3
 800431e:	3501      	adds	r5, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004326:	4798      	blx	r3
 8004328:	3501      	adds	r5, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	080043c4 	.word	0x080043c4
 8004330:	080043c4 	.word	0x080043c4
 8004334:	080043c4 	.word	0x080043c4
 8004338:	080043c8 	.word	0x080043c8

0800433c <memcpy>:
 800433c:	b510      	push	{r4, lr}
 800433e:	1e43      	subs	r3, r0, #1
 8004340:	440a      	add	r2, r1
 8004342:	4291      	cmp	r1, r2
 8004344:	d100      	bne.n	8004348 <memcpy+0xc>
 8004346:	bd10      	pop	{r4, pc}
 8004348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800434c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004350:	e7f7      	b.n	8004342 <memcpy+0x6>

08004352 <memset>:
 8004352:	4402      	add	r2, r0
 8004354:	4603      	mov	r3, r0
 8004356:	4293      	cmp	r3, r2
 8004358:	d100      	bne.n	800435c <memset+0xa>
 800435a:	4770      	bx	lr
 800435c:	f803 1b01 	strb.w	r1, [r3], #1
 8004360:	e7f9      	b.n	8004356 <memset+0x4>
	...

08004364 <_init>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr

08004370 <_fini>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	bf00      	nop
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr
