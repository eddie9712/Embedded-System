
Embedded_OS_Lab3_P76091331.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006228  08006228  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006230  08006230  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000131ac  20000074  080062ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013220  080062ac  00023220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143ec  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ac9  00000000  00000000  00034490  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00036f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d16  00000000  00000000  00038eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6b5  00000000  00000000  0005bbce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1559  00000000  00000000  00069283  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a7dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c8  00000000  00000000  0013a858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006060 	.word	0x08006060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006060 	.word	0x08006060

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fac1 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f83f 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8c5 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f899 	bl	80006e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(TaskMonitor_App,"TaskMonitor",130,NULL,2,NULL);  //create task monitor
 80005b6:	2300      	movs	r3, #0
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2282      	movs	r2, #130	; 0x82
 80005c2:	4912      	ldr	r1, [pc, #72]	; (800060c <main+0x6c>)
 80005c4:	4812      	ldr	r0, [pc, #72]	; (8000610 <main+0x70>)
 80005c6:	f002 fe4b 	bl	8003260 <xTaskCreate>
  xTaskCreate(green_blink,"green_blink",130,NULL,1,NULL);  //green_led blinking
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2282      	movs	r2, #130	; 0x82
 80005d6:	490f      	ldr	r1, [pc, #60]	; (8000614 <main+0x74>)
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <main+0x78>)
 80005da:	f002 fe41 	bl	8003260 <xTaskCreate>
  xTaskCreate(red_blink,"red_blink",130,NULL,1,NULL);  //red_led blinking
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2282      	movs	r2, #130	; 0x82
 80005ea:	490c      	ldr	r1, [pc, #48]	; (800061c <main+0x7c>)
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0x80>)
 80005ee:	f002 fe37 	bl	8003260 <xTaskCreate>
  xTaskCreate(task_delay,"task_delay",130,NULL,14,NULL);  //task_delay
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	230e      	movs	r3, #14
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2282      	movs	r2, #130	; 0x82
 80005fe:	4909      	ldr	r1, [pc, #36]	; (8000624 <main+0x84>)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <main+0x88>)
 8000602:	f002 fe2d 	bl	8003260 <xTaskCreate>
  vTaskStartScheduler();
 8000606:	f003 fcb7 	bl	8003f78 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060a:	e7fe      	b.n	800060a <main+0x6a>
 800060c:	08006078 	.word	0x08006078
 8000610:	080007c5 	.word	0x080007c5
 8000614:	08006084 	.word	0x08006084
 8000618:	08000811 	.word	0x08000811
 800061c:	08006090 	.word	0x08006090
 8000620:	080007e9 	.word	0x080007e9
 8000624:	0800609c 	.word	0x0800609c
 8000628:	08000839 	.word	0x08000839

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 f90b 	bl	8005856 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xb4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xb4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <SystemClock_Config+0xb8>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemClock_Config+0xb8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fd37 	bl	8001110 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a8:	f000 f8de 	bl	8000868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ff92 	bl	80015f0 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006d2:	f000 f8c9 	bl	8000868 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART2_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000720:	f001 fba2 	bl	8001e68 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f89d 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20012ec4 	.word	0x20012ec4
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_GPIO_Init+0x80>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_GPIO_Init+0x80>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_GPIO_Init+0x80>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_GPIO_Init+0x80>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <MX_GPIO_Init+0x80>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_GPIO_Init+0x80>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <MX_GPIO_Init+0x84>)
 8000792:	f000 fc89 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 8000796:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0x84>)
 80007b0:	f000 fae0 	bl	8000d74 <HAL_GPIO_Init>

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020c00 	.word	0x40020c00

080007c4 <TaskMonitor_App>:

/* USER CODE BEGIN 4 */
void TaskMonitor_App(void *pvParameters){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	//uint32_t Monitortimer = 200;
	//char MonitorTset[20];
	//char num[15];
	int i = 500;
 80007cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007d0:	60fb      	str	r3, [r7, #12]
		//sprintf(MonitorTset,"The point is %s\n\r",num);
		//HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
		//vTaskDelay(Monitortimer);
		//Monitortimer += 1;

	    TaskMonitor();
 80007d2:	f002 fdfb 	bl	80033cc <TaskMonitor>
	    i += 1;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
	    vTaskDelay(i);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fb96 	bl	8003f10 <vTaskDelay>
	    TaskMonitor();
 80007e4:	e7f5      	b.n	80007d2 <TaskMonitor_App+0xe>
	...

080007e8 <red_blink>:

	}
}
void red_blink(){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	uint32_t Redtimer = 50;
 80007ee:	2332      	movs	r3, #50	; 0x32
 80007f0:	607b      	str	r3, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 80007f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <red_blink+0x24>)
 80007f8:	f000 fc6f 	bl	80010da <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f003 fb87 	bl	8003f10 <vTaskDelay>
		Redtimer += 1;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3301      	adds	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000808:	e7f3      	b.n	80007f2 <red_blink+0xa>
 800080a:	bf00      	nop
 800080c:	40020c00 	.word	0x40020c00

08000810 <green_blink>:
	}
}
void green_blink(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint32_t Greentimer = 10;
 8000816:	230a      	movs	r3, #10
 8000818:	607b      	str	r3, [r7, #4]
		while(1){
			HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <green_blink+0x24>)
 8000820:	f000 fc5b 	bl	80010da <HAL_GPIO_TogglePin>
			vTaskDelay(Greentimer);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f003 fb73 	bl	8003f10 <vTaskDelay>
			Greentimer += 2;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3302      	adds	r3, #2
 800082e:	607b      	str	r3, [r7, #4]
			HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000830:	e7f3      	b.n	800081a <green_blink+0xa>
 8000832:	bf00      	nop
 8000834:	40020c00 	.word	0x40020c00

08000838 <task_delay>:
		}
}
void task_delay(){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	while(1){
		vTaskDelay(150);
 800083c:	2096      	movs	r0, #150	; 0x96
 800083e:	f003 fb67 	bl	8003f10 <vTaskDelay>
 8000842:	e7fb      	b.n	800083c <task_delay+0x4>

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000856:	f000 f98b 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40001400 	.word	0x40001400

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086e:	e7fe      	b.n	800086e <Error_Handler+0x6>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12b      	bne.n	800093a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091a:	230c      	movs	r3, #12
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092a:	2307      	movs	r3, #7
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x8c>)
 8000936:	f000 fa1d 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	2037      	movs	r0, #55	; 0x37
 8000966:	f000 f9db 	bl	8000d20 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800096a:	2037      	movs	r0, #55	; 0x37
 800096c:	f000 f9f4 	bl	8000d58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <HAL_InitTick+0xa0>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <HAL_InitTick+0xa0>)
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_InitTick+0xa0>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098c:	f107 0210 	add.w	r2, r7, #16
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fff6 	bl	8001988 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800099c:	f000 ffcc 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 80009a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <HAL_InitTick+0xa4>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	0c9b      	lsrs	r3, r3, #18
 80009ac:	3b01      	subs	r3, #1
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_InitTick+0xa8>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <HAL_InitTick+0xac>)
 80009b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_InitTick+0xa8>)
 80009b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009bc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_InitTick+0xa8>)
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_InitTick+0xa8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_InitTick+0xa8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <HAL_InitTick+0xa8>)
 80009d2:	f001 f80b 	bl	80019ec <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d104      	bne.n	80009e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <HAL_InitTick+0xa8>)
 80009de:	f001 f83a 	bl	8001a56 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3730      	adds	r7, #48	; 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	431bde83 	.word	0x431bde83
 80009f8:	20012f04 	.word	0x20012f04
 80009fc:	40001400 	.word	0x40001400

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM7_IRQHandler+0x10>)
 8000a32:	f001 f834 	bl	8001a9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20012f04 	.word	0x20012f04

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f004 febc 	bl	80057ec <__errno>
 8000a74:	4602      	mov	r2, r0
 8000a76:	230c      	movs	r3, #12
 8000a78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20020000 	.word	0x20020000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	20000090 	.word	0x20000090
 8000aa8:	20013220 	.word	0x20013220

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <SystemInit+0x28>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <SystemInit+0x28>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SystemInit+0x28>)
 8000ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000adc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ade:	e003      	b.n	8000ae8 <LoopCopyDataInit>

08000ae0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ae2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ae4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ae6:	3104      	adds	r1, #4

08000ae8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000af0:	d3f6      	bcc.n	8000ae0 <CopyDataInit>
  ldr  r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000af4:	e002      	b.n	8000afc <LoopFillZerobss>

08000af6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000af6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000af8:	f842 3b04 	str.w	r3, [r2], #4

08000afc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000afe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b00:	d3f9      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b02:	f7ff ffd3 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 fe77 	bl	80057f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fd49 	bl	80005a0 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b14:	08006238 	.word	0x08006238
  ldr  r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b1c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b20:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b24:	20013220 	.word	0x20013220

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8d8 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff fef8 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe86 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20012f44 	.word	0x20012f44

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20012f44 	.word	0x20012f44

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e16b      	b.n	8001068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 815a 	bne.w	8001062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d00b      	beq.n	8000dce <HAL_GPIO_Init+0x5a>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc2:	2b11      	cmp	r3, #17
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b12      	cmp	r3, #18
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0xfc>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b12      	cmp	r3, #18
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80b4 	beq.w	8001062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b5f      	ldr	r3, [pc, #380]	; (800107c <HAL_GPIO_Init+0x308>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a5e      	ldr	r2, [pc, #376]	; (800107c <HAL_GPIO_Init+0x308>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	; (800107c <HAL_GPIO_Init+0x308>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a5a      	ldr	r2, [pc, #360]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a51      	ldr	r2, [pc, #324]	; (8001084 <HAL_GPIO_Init+0x310>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d02b      	beq.n	8000f9a <HAL_GPIO_Init+0x226>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a50      	ldr	r2, [pc, #320]	; (8001088 <HAL_GPIO_Init+0x314>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x222>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	; (800108c <HAL_GPIO_Init+0x318>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x21e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4e      	ldr	r2, [pc, #312]	; (8001090 <HAL_GPIO_Init+0x31c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <HAL_GPIO_Init+0x320>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x216>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <HAL_GPIO_Init+0x324>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	; (800109c <HAL_GPIO_Init+0x328>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x20e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4a      	ldr	r2, [pc, #296]	; (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x20a>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e00e      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f7e:	2308      	movs	r3, #8
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f82:	2306      	movs	r3, #6
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x228>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4934      	ldr	r1, [pc, #208]	; (8001080 <HAL_GPIO_Init+0x30c>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fba:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fde:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001008:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <HAL_GPIO_Init+0x330>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <HAL_GPIO_Init+0x330>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_GPIO_Init+0x330>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_GPIO_Init+0x330>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f ae90 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	3724      	adds	r7, #36	; 0x24
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	401a      	ands	r2, r3
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d104      	bne.n	80010fe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	041a      	lsls	r2, r3, #16
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e25b      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d075      	beq.n	800121a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	4ba3      	ldr	r3, [pc, #652]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b04      	cmp	r3, #4
 8001138:	d00c      	beq.n	8001154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4ba0      	ldr	r3, [pc, #640]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d112      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001146:	4b9d      	ldr	r3, [pc, #628]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001152:	d10b      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	4b99      	ldr	r3, [pc, #612]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d05b      	beq.n	8001218 <HAL_RCC_OscConfig+0x108>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d157      	bne.n	8001218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e236      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d106      	bne.n	8001184 <HAL_RCC_OscConfig+0x74>
 8001176:	4b91      	ldr	r3, [pc, #580]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a90      	ldr	r2, [pc, #576]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e01d      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x98>
 800118e:	4b8b      	ldr	r3, [pc, #556]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a8a      	ldr	r2, [pc, #552]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b88      	ldr	r3, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a87      	ldr	r2, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 80011a8:	4b84      	ldr	r3, [pc, #528]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a83      	ldr	r2, [pc, #524]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b81      	ldr	r3, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a80      	ldr	r2, [pc, #512]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fce6 	bl	8000b98 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fce2 	bl	8000b98 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1fb      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b76      	ldr	r3, [pc, #472]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0xc0>
 80011ee:	e014      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fcd2 	bl	8000b98 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fcce 	bl	8000b98 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e1e7      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b6c      	ldr	r3, [pc, #432]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0xe8>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d063      	beq.n	80012ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	4b65      	ldr	r3, [pc, #404]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d11c      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e1bb      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4952      	ldr	r1, [pc, #328]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	e03a      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <HAL_RCC_OscConfig+0x2b0>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fc87 	bl	8000b98 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fc83 	bl	8000b98 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e19c      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4940      	ldr	r1, [pc, #256]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_RCC_OscConfig+0x2b0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc66 	bl	8000b98 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc62 	bl	8000b98 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e17b      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d030      	beq.n	800135c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d016      	beq.n	8001330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x2b4>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fc46 	bl	8000b98 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fc42 	bl	8000b98 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e15b      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x200>
 800132e:	e015      	b.n	800135c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x2b4>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fc2f 	bl	8000b98 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fc2b 	bl	8000b98 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e144      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a0 	beq.w	80014aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d121      	bne.n	80013ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbf1 	bl	8000b98 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e011      	b.n	80013de <HAL_RCC_OscConfig+0x2ce>
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	42470000 	.word	0x42470000
 80013c4:	42470e80 	.word	0x42470e80
 80013c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013cc:	f7ff fbe4 	bl	8000b98 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0fd      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x4d4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x2f0>
 80013f2:	4b7d      	ldr	r3, [pc, #500]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a7c      	ldr	r2, [pc, #496]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x32a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x312>
 8001408:	4b77      	ldr	r3, [pc, #476]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a76      	ldr	r2, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
 8001414:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x32a>
 8001422:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a70      	ldr	r2, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	4b6e      	ldr	r3, [pc, #440]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001432:	4a6d      	ldr	r2, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d015      	beq.n	800146e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff fba9 	bl	8000b98 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fba5 	bl	8000b98 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0bc      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	4b61      	ldr	r3, [pc, #388]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ee      	beq.n	800144a <HAL_RCC_OscConfig+0x33a>
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fb93 	bl	8000b98 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fb8f 	bl	8000b98 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	; 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e0a6      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a51      	ldr	r2, [pc, #324]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8092 	beq.w	80015d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d05c      	beq.n	800157a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d141      	bne.n	800154c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b48      	ldr	r3, [pc, #288]	; (80015ec <HAL_RCC_OscConfig+0x4dc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb63 	bl	8000b98 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb5f 	bl	8000b98 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e078      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e8:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69da      	ldr	r2, [r3, #28]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	019b      	lsls	r3, r3, #6
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	3b01      	subs	r3, #1
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	4933      	ldr	r1, [pc, #204]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_RCC_OscConfig+0x4dc>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fb38 	bl	8000b98 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fb34 	bl	8000b98 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04d      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x41c>
 800154a:	e045      	b.n	80015d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x4dc>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fb21 	bl	8000b98 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fb1d 	bl	8000b98 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e036      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x44a>
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e029      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	429a      	cmp	r2, r3
 8001598:	d11c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d115      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ae:	4013      	ands	r3, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d106      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470060 	.word	0x42470060

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fa5a 	bl	8000b98 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fa56 	bl	8000b98 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4601      	mov	r1, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	fa21 f303 	lsr.w	r3, r1, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f8da 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	080061dc 	.word	0x080061dc
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d2:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d007      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x32>
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d008      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x38>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 808d 	bne.w	8001902 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017ea:	60bb      	str	r3, [r7, #8]
       break;
 80017ec:	e08c      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_RCC_GetSysClockFreq+0x160>)
 80017f0:	60bb      	str	r3, [r7, #8]
      break;
 80017f2:	e089      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fe:	4b45      	ldr	r3, [pc, #276]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d023      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b42      	ldr	r3, [pc, #264]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	f04f 0400 	mov.w	r4, #0
 8001814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	ea03 0501 	and.w	r5, r3, r1
 8001820:	ea04 0602 	and.w	r6, r4, r2
 8001824:	4a3d      	ldr	r2, [pc, #244]	; (800191c <HAL_RCC_GetSysClockFreq+0x160>)
 8001826:	fb02 f106 	mul.w	r1, r2, r6
 800182a:	2200      	movs	r2, #0
 800182c:	fb02 f205 	mul.w	r2, r2, r5
 8001830:	440a      	add	r2, r1
 8001832:	493a      	ldr	r1, [pc, #232]	; (800191c <HAL_RCC_GetSysClockFreq+0x160>)
 8001834:	fba5 0101 	umull	r0, r1, r5, r1
 8001838:	1853      	adds	r3, r2, r1
 800183a:	4619      	mov	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f04f 0400 	mov.w	r4, #0
 8001842:	461a      	mov	r2, r3
 8001844:	4623      	mov	r3, r4
 8001846:	f7fe fd2b 	bl	80002a0 <__aeabi_uldivmod>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e049      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	f04f 0400 	mov.w	r4, #0
 800185c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	ea03 0501 	and.w	r5, r3, r1
 8001868:	ea04 0602 	and.w	r6, r4, r2
 800186c:	4629      	mov	r1, r5
 800186e:	4632      	mov	r2, r6
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f04f 0400 	mov.w	r4, #0
 8001878:	0154      	lsls	r4, r2, #5
 800187a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800187e:	014b      	lsls	r3, r1, #5
 8001880:	4619      	mov	r1, r3
 8001882:	4622      	mov	r2, r4
 8001884:	1b49      	subs	r1, r1, r5
 8001886:	eb62 0206 	sbc.w	r2, r2, r6
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f04f 0400 	mov.w	r4, #0
 8001892:	0194      	lsls	r4, r2, #6
 8001894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001898:	018b      	lsls	r3, r1, #6
 800189a:	1a5b      	subs	r3, r3, r1
 800189c:	eb64 0402 	sbc.w	r4, r4, r2
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	00e2      	lsls	r2, r4, #3
 80018aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ae:	00d9      	lsls	r1, r3, #3
 80018b0:	460b      	mov	r3, r1
 80018b2:	4614      	mov	r4, r2
 80018b4:	195b      	adds	r3, r3, r5
 80018b6:	eb44 0406 	adc.w	r4, r4, r6
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	02a2      	lsls	r2, r4, #10
 80018c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018c8:	0299      	lsls	r1, r3, #10
 80018ca:	460b      	mov	r3, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	4621      	mov	r1, r4
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	f7fe fce0 	bl	80002a0 <__aeabi_uldivmod>
 80018e0:	4603      	mov	r3, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	3301      	adds	r3, #1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	60bb      	str	r3, [r7, #8]
      break;
 8001900:	e002      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001904:	60bb      	str	r3, [r7, #8]
      break;
 8001906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	00f42400 	.word	0x00f42400
 800191c:	017d7840 	.word	0x017d7840

08001920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_GetHCLKFreq+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800193c:	f7ff fff0 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	080061ec 	.word	0x080061ec

08001960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001964:	f7ff ffdc 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001968:	4601      	mov	r1, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0b5b      	lsrs	r3, r3, #13
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4a03      	ldr	r2, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	080061ec 	.word	0x080061ec

08001988 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	220f      	movs	r2, #15
 8001996:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_GetClockConfig+0x5c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_RCC_GetClockConfig+0x60>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 020f 	and.w	r2, r3, #15
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e01d      	b.n	8001a3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f815 	bl	8001a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f000 f968 	bl	8001d00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b06      	cmp	r3, #6
 8001a7e:	d007      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d122      	bne.n	8001afa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d11b      	bne.n	8001afa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f06f 0202 	mvn.w	r2, #2
 8001aca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8ee 	bl	8001cc2 <HAL_TIM_IC_CaptureCallback>
 8001ae6:	e005      	b.n	8001af4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f8e0 	bl	8001cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8f1 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d122      	bne.n	8001b4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d11b      	bne.n	8001b4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f06f 0204 	mvn.w	r2, #4
 8001b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8c4 	bl	8001cc2 <HAL_TIM_IC_CaptureCallback>
 8001b3a:	e005      	b.n	8001b48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f8b6 	bl	8001cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f8c7 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d122      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11b      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f06f 0208 	mvn.w	r2, #8
 8001b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2204      	movs	r2, #4
 8001b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f89a 	bl	8001cc2 <HAL_TIM_IC_CaptureCallback>
 8001b8e:	e005      	b.n	8001b9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f88c 	bl	8001cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f89d 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d122      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0210 	mvn.w	r2, #16
 8001bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f870 	bl	8001cc2 <HAL_TIM_IC_CaptureCallback>
 8001be2:	e005      	b.n	8001bf0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f862 	bl	8001cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f873 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10e      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f06f 0201 	mvn.w	r2, #1
 8001c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7fe fe11 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	d10e      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d107      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f903 	bl	8001e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c58:	2b40      	cmp	r3, #64	; 0x40
 8001c5a:	d10e      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d107      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f838 	bl	8001cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d10e      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d107      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0220 	mvn.w	r2, #32
 8001c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8cd 	bl	8001e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	; (8001e14 <TIM_Base_SetConfig+0x114>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <TIM_Base_SetConfig+0x40>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1e:	d00f      	beq.n	8001d40 <TIM_Base_SetConfig+0x40>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <TIM_Base_SetConfig+0x118>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00b      	beq.n	8001d40 <TIM_Base_SetConfig+0x40>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3c      	ldr	r2, [pc, #240]	; (8001e1c <TIM_Base_SetConfig+0x11c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <TIM_Base_SetConfig+0x40>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3b      	ldr	r2, [pc, #236]	; (8001e20 <TIM_Base_SetConfig+0x120>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d003      	beq.n	8001d40 <TIM_Base_SetConfig+0x40>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3a      	ldr	r2, [pc, #232]	; (8001e24 <TIM_Base_SetConfig+0x124>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d108      	bne.n	8001d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <TIM_Base_SetConfig+0x114>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d02b      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d60:	d027      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2c      	ldr	r2, [pc, #176]	; (8001e18 <TIM_Base_SetConfig+0x118>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d023      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <TIM_Base_SetConfig+0x11c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01f      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <TIM_Base_SetConfig+0x120>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01b      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <TIM_Base_SetConfig+0x124>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d017      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <TIM_Base_SetConfig+0x128>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <TIM_Base_SetConfig+0x12c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00f      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <TIM_Base_SetConfig+0x130>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00b      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <TIM_Base_SetConfig+0x134>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <TIM_Base_SetConfig+0x138>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d003      	beq.n	8001db2 <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <TIM_Base_SetConfig+0x13c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d108      	bne.n	8001dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <TIM_Base_SetConfig+0x114>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d003      	beq.n	8001df8 <TIM_Base_SetConfig+0xf8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <TIM_Base_SetConfig+0x124>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d103      	bne.n	8001e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	615a      	str	r2, [r3, #20]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40010000 	.word	0x40010000
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	40000c00 	.word	0x40000c00
 8001e24:	40010400 	.word	0x40010400
 8001e28:	40014000 	.word	0x40014000
 8001e2c:	40014400 	.word	0x40014400
 8001e30:	40014800 	.word	0x40014800
 8001e34:	40001800 	.word	0x40001800
 8001e38:	40001c00 	.word	0x40001c00
 8001e3c:	40002000 	.word	0x40002000

08001e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e03f      	b.n	8001efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fd16 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f90b 	bl	80020c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b088      	sub	sp, #32
 8001f06:	af02      	add	r7, sp, #8
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	f040 8083 	bne.w	800202a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_UART_Transmit+0x2e>
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e07b      	b.n	800202c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_UART_Transmit+0x40>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e074      	b.n	800202c <HAL_UART_Transmit+0x12a>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2221      	movs	r2, #33	; 0x21
 8001f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f58:	f7fe fe1e 	bl	8000b98 <HAL_GetTick>
 8001f5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	88fa      	ldrh	r2, [r7, #6]
 8001f68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f72:	e042      	b.n	8001ffa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8a:	d122      	bne.n	8001fd2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2200      	movs	r2, #0
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f84c 	bl	8002034 <UART_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e042      	b.n	800202c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	e017      	b.n	8001ffa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	e013      	b.n	8001ffa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f829 	bl	8002034 <UART_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e01f      	b.n	800202c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	60ba      	str	r2, [r7, #8]
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1b7      	bne.n	8001f74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2200      	movs	r2, #0
 800200c:	2140      	movs	r1, #64	; 0x40
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f810 	bl	8002034 <UART_WaitOnFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e006      	b.n	800202c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002044:	e02c      	b.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204c:	d028      	beq.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <UART_WaitOnFlagUntilTimeout+0x30>
 8002054:	f7fe fda0 	bl	8000b98 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	429a      	cmp	r2, r3
 8002062:	d21d      	bcs.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002072:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e00f      	b.n	80020c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d0c3      	beq.n	8002046 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800210a:	f023 030c 	bic.w	r3, r3, #12
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	68f9      	ldr	r1, [r7, #12]
 8002114:	430b      	orrs	r3, r1
 8002116:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002136:	f040 818b 	bne.w	8002450 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4ac1      	ldr	r2, [pc, #772]	; (8002444 <UART_SetConfig+0x37c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d005      	beq.n	8002150 <UART_SetConfig+0x88>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4abf      	ldr	r2, [pc, #764]	; (8002448 <UART_SetConfig+0x380>)
 800214a:	4293      	cmp	r3, r2
 800214c:	f040 80bd 	bne.w	80022ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002150:	f7ff fc06 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8002154:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	461d      	mov	r5, r3
 800215a:	f04f 0600 	mov.w	r6, #0
 800215e:	46a8      	mov	r8, r5
 8002160:	46b1      	mov	r9, r6
 8002162:	eb18 0308 	adds.w	r3, r8, r8
 8002166:	eb49 0409 	adc.w	r4, r9, r9
 800216a:	4698      	mov	r8, r3
 800216c:	46a1      	mov	r9, r4
 800216e:	eb18 0805 	adds.w	r8, r8, r5
 8002172:	eb49 0906 	adc.w	r9, r9, r6
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002182:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002186:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800218a:	4688      	mov	r8, r1
 800218c:	4691      	mov	r9, r2
 800218e:	eb18 0005 	adds.w	r0, r8, r5
 8002192:	eb49 0106 	adc.w	r1, r9, r6
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	461d      	mov	r5, r3
 800219c:	f04f 0600 	mov.w	r6, #0
 80021a0:	196b      	adds	r3, r5, r5
 80021a2:	eb46 0406 	adc.w	r4, r6, r6
 80021a6:	461a      	mov	r2, r3
 80021a8:	4623      	mov	r3, r4
 80021aa:	f7fe f879 	bl	80002a0 <__aeabi_uldivmod>
 80021ae:	4603      	mov	r3, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	461a      	mov	r2, r3
 80021b4:	4ba5      	ldr	r3, [pc, #660]	; (800244c <UART_SetConfig+0x384>)
 80021b6:	fba3 2302 	umull	r2, r3, r3, r2
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	461d      	mov	r5, r3
 80021c4:	f04f 0600 	mov.w	r6, #0
 80021c8:	46a9      	mov	r9, r5
 80021ca:	46b2      	mov	sl, r6
 80021cc:	eb19 0309 	adds.w	r3, r9, r9
 80021d0:	eb4a 040a 	adc.w	r4, sl, sl
 80021d4:	4699      	mov	r9, r3
 80021d6:	46a2      	mov	sl, r4
 80021d8:	eb19 0905 	adds.w	r9, r9, r5
 80021dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021f4:	4689      	mov	r9, r1
 80021f6:	4692      	mov	sl, r2
 80021f8:	eb19 0005 	adds.w	r0, r9, r5
 80021fc:	eb4a 0106 	adc.w	r1, sl, r6
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	461d      	mov	r5, r3
 8002206:	f04f 0600 	mov.w	r6, #0
 800220a:	196b      	adds	r3, r5, r5
 800220c:	eb46 0406 	adc.w	r4, r6, r6
 8002210:	461a      	mov	r2, r3
 8002212:	4623      	mov	r3, r4
 8002214:	f7fe f844 	bl	80002a0 <__aeabi_uldivmod>
 8002218:	4603      	mov	r3, r0
 800221a:	460c      	mov	r4, r1
 800221c:	461a      	mov	r2, r3
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <UART_SetConfig+0x384>)
 8002220:	fba3 1302 	umull	r1, r3, r3, r2
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	2164      	movs	r1, #100	; 0x64
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	3332      	adds	r3, #50	; 0x32
 8002232:	4a86      	ldr	r2, [pc, #536]	; (800244c <UART_SetConfig+0x384>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002240:	4498      	add	r8, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	461d      	mov	r5, r3
 8002246:	f04f 0600 	mov.w	r6, #0
 800224a:	46a9      	mov	r9, r5
 800224c:	46b2      	mov	sl, r6
 800224e:	eb19 0309 	adds.w	r3, r9, r9
 8002252:	eb4a 040a 	adc.w	r4, sl, sl
 8002256:	4699      	mov	r9, r3
 8002258:	46a2      	mov	sl, r4
 800225a:	eb19 0905 	adds.w	r9, r9, r5
 800225e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800226e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002276:	4689      	mov	r9, r1
 8002278:	4692      	mov	sl, r2
 800227a:	eb19 0005 	adds.w	r0, r9, r5
 800227e:	eb4a 0106 	adc.w	r1, sl, r6
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	461d      	mov	r5, r3
 8002288:	f04f 0600 	mov.w	r6, #0
 800228c:	196b      	adds	r3, r5, r5
 800228e:	eb46 0406 	adc.w	r4, r6, r6
 8002292:	461a      	mov	r2, r3
 8002294:	4623      	mov	r3, r4
 8002296:	f7fe f803 	bl	80002a0 <__aeabi_uldivmod>
 800229a:	4603      	mov	r3, r0
 800229c:	460c      	mov	r4, r1
 800229e:	461a      	mov	r2, r3
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <UART_SetConfig+0x384>)
 80022a2:	fba3 1302 	umull	r1, r3, r3, r2
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2164      	movs	r1, #100	; 0x64
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	3332      	adds	r3, #50	; 0x32
 80022b4:	4a65      	ldr	r2, [pc, #404]	; (800244c <UART_SetConfig+0x384>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	f003 0207 	and.w	r2, r3, #7
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4442      	add	r2, r8
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	e26f      	b.n	80027aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ca:	f7ff fb35 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 80022ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	461d      	mov	r5, r3
 80022d4:	f04f 0600 	mov.w	r6, #0
 80022d8:	46a8      	mov	r8, r5
 80022da:	46b1      	mov	r9, r6
 80022dc:	eb18 0308 	adds.w	r3, r8, r8
 80022e0:	eb49 0409 	adc.w	r4, r9, r9
 80022e4:	4698      	mov	r8, r3
 80022e6:	46a1      	mov	r9, r4
 80022e8:	eb18 0805 	adds.w	r8, r8, r5
 80022ec:	eb49 0906 	adc.w	r9, r9, r6
 80022f0:	f04f 0100 	mov.w	r1, #0
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002300:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002304:	4688      	mov	r8, r1
 8002306:	4691      	mov	r9, r2
 8002308:	eb18 0005 	adds.w	r0, r8, r5
 800230c:	eb49 0106 	adc.w	r1, r9, r6
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	461d      	mov	r5, r3
 8002316:	f04f 0600 	mov.w	r6, #0
 800231a:	196b      	adds	r3, r5, r5
 800231c:	eb46 0406 	adc.w	r4, r6, r6
 8002320:	461a      	mov	r2, r3
 8002322:	4623      	mov	r3, r4
 8002324:	f7fd ffbc 	bl	80002a0 <__aeabi_uldivmod>
 8002328:	4603      	mov	r3, r0
 800232a:	460c      	mov	r4, r1
 800232c:	461a      	mov	r2, r3
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <UART_SetConfig+0x384>)
 8002330:	fba3 2302 	umull	r2, r3, r3, r2
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	461d      	mov	r5, r3
 800233e:	f04f 0600 	mov.w	r6, #0
 8002342:	46a9      	mov	r9, r5
 8002344:	46b2      	mov	sl, r6
 8002346:	eb19 0309 	adds.w	r3, r9, r9
 800234a:	eb4a 040a 	adc.w	r4, sl, sl
 800234e:	4699      	mov	r9, r3
 8002350:	46a2      	mov	sl, r4
 8002352:	eb19 0905 	adds.w	r9, r9, r5
 8002356:	eb4a 0a06 	adc.w	sl, sl, r6
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002366:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800236a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800236e:	4689      	mov	r9, r1
 8002370:	4692      	mov	sl, r2
 8002372:	eb19 0005 	adds.w	r0, r9, r5
 8002376:	eb4a 0106 	adc.w	r1, sl, r6
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	461d      	mov	r5, r3
 8002380:	f04f 0600 	mov.w	r6, #0
 8002384:	196b      	adds	r3, r5, r5
 8002386:	eb46 0406 	adc.w	r4, r6, r6
 800238a:	461a      	mov	r2, r3
 800238c:	4623      	mov	r3, r4
 800238e:	f7fd ff87 	bl	80002a0 <__aeabi_uldivmod>
 8002392:	4603      	mov	r3, r0
 8002394:	460c      	mov	r4, r1
 8002396:	461a      	mov	r2, r3
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <UART_SetConfig+0x384>)
 800239a:	fba3 1302 	umull	r1, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2164      	movs	r1, #100	; 0x64
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	3332      	adds	r3, #50	; 0x32
 80023ac:	4a27      	ldr	r2, [pc, #156]	; (800244c <UART_SetConfig+0x384>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023ba:	4498      	add	r8, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	461d      	mov	r5, r3
 80023c0:	f04f 0600 	mov.w	r6, #0
 80023c4:	46a9      	mov	r9, r5
 80023c6:	46b2      	mov	sl, r6
 80023c8:	eb19 0309 	adds.w	r3, r9, r9
 80023cc:	eb4a 040a 	adc.w	r4, sl, sl
 80023d0:	4699      	mov	r9, r3
 80023d2:	46a2      	mov	sl, r4
 80023d4:	eb19 0905 	adds.w	r9, r9, r5
 80023d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023f0:	4689      	mov	r9, r1
 80023f2:	4692      	mov	sl, r2
 80023f4:	eb19 0005 	adds.w	r0, r9, r5
 80023f8:	eb4a 0106 	adc.w	r1, sl, r6
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	461d      	mov	r5, r3
 8002402:	f04f 0600 	mov.w	r6, #0
 8002406:	196b      	adds	r3, r5, r5
 8002408:	eb46 0406 	adc.w	r4, r6, r6
 800240c:	461a      	mov	r2, r3
 800240e:	4623      	mov	r3, r4
 8002410:	f7fd ff46 	bl	80002a0 <__aeabi_uldivmod>
 8002414:	4603      	mov	r3, r0
 8002416:	460c      	mov	r4, r1
 8002418:	461a      	mov	r2, r3
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <UART_SetConfig+0x384>)
 800241c:	fba3 1302 	umull	r1, r3, r3, r2
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	2164      	movs	r1, #100	; 0x64
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	3332      	adds	r3, #50	; 0x32
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <UART_SetConfig+0x384>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	f003 0207 	and.w	r2, r3, #7
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4442      	add	r2, r8
 8002440:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002442:	e1b2      	b.n	80027aa <UART_SetConfig+0x6e2>
 8002444:	40011000 	.word	0x40011000
 8002448:	40011400 	.word	0x40011400
 800244c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4ad7      	ldr	r2, [pc, #860]	; (80027b4 <UART_SetConfig+0x6ec>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d005      	beq.n	8002466 <UART_SetConfig+0x39e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4ad6      	ldr	r2, [pc, #856]	; (80027b8 <UART_SetConfig+0x6f0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	f040 80d1 	bne.w	8002608 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002466:	f7ff fa7b 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 800246a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	469a      	mov	sl, r3
 8002470:	f04f 0b00 	mov.w	fp, #0
 8002474:	46d0      	mov	r8, sl
 8002476:	46d9      	mov	r9, fp
 8002478:	eb18 0308 	adds.w	r3, r8, r8
 800247c:	eb49 0409 	adc.w	r4, r9, r9
 8002480:	4698      	mov	r8, r3
 8002482:	46a1      	mov	r9, r4
 8002484:	eb18 080a 	adds.w	r8, r8, sl
 8002488:	eb49 090b 	adc.w	r9, r9, fp
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002498:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800249c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024a0:	4688      	mov	r8, r1
 80024a2:	4691      	mov	r9, r2
 80024a4:	eb1a 0508 	adds.w	r5, sl, r8
 80024a8:	eb4b 0609 	adc.w	r6, fp, r9
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	f04f 0400 	mov.w	r4, #0
 80024be:	0094      	lsls	r4, r2, #2
 80024c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024c4:	008b      	lsls	r3, r1, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	4623      	mov	r3, r4
 80024ca:	4628      	mov	r0, r5
 80024cc:	4631      	mov	r1, r6
 80024ce:	f7fd fee7 	bl	80002a0 <__aeabi_uldivmod>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	461a      	mov	r2, r3
 80024d8:	4bb8      	ldr	r3, [pc, #736]	; (80027bc <UART_SetConfig+0x6f4>)
 80024da:	fba3 2302 	umull	r2, r3, r3, r2
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	469b      	mov	fp, r3
 80024e8:	f04f 0c00 	mov.w	ip, #0
 80024ec:	46d9      	mov	r9, fp
 80024ee:	46e2      	mov	sl, ip
 80024f0:	eb19 0309 	adds.w	r3, r9, r9
 80024f4:	eb4a 040a 	adc.w	r4, sl, sl
 80024f8:	4699      	mov	r9, r3
 80024fa:	46a2      	mov	sl, r4
 80024fc:	eb19 090b 	adds.w	r9, r9, fp
 8002500:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002504:	f04f 0100 	mov.w	r1, #0
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002510:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002514:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002518:	4689      	mov	r9, r1
 800251a:	4692      	mov	sl, r2
 800251c:	eb1b 0509 	adds.w	r5, fp, r9
 8002520:	eb4c 060a 	adc.w	r6, ip, sl
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4619      	mov	r1, r3
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	f04f 0400 	mov.w	r4, #0
 8002536:	0094      	lsls	r4, r2, #2
 8002538:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800253c:	008b      	lsls	r3, r1, #2
 800253e:	461a      	mov	r2, r3
 8002540:	4623      	mov	r3, r4
 8002542:	4628      	mov	r0, r5
 8002544:	4631      	mov	r1, r6
 8002546:	f7fd feab 	bl	80002a0 <__aeabi_uldivmod>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	461a      	mov	r2, r3
 8002550:	4b9a      	ldr	r3, [pc, #616]	; (80027bc <UART_SetConfig+0x6f4>)
 8002552:	fba3 1302 	umull	r1, r3, r3, r2
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2164      	movs	r1, #100	; 0x64
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	3332      	adds	r3, #50	; 0x32
 8002564:	4a95      	ldr	r2, [pc, #596]	; (80027bc <UART_SetConfig+0x6f4>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002570:	4498      	add	r8, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	469b      	mov	fp, r3
 8002576:	f04f 0c00 	mov.w	ip, #0
 800257a:	46d9      	mov	r9, fp
 800257c:	46e2      	mov	sl, ip
 800257e:	eb19 0309 	adds.w	r3, r9, r9
 8002582:	eb4a 040a 	adc.w	r4, sl, sl
 8002586:	4699      	mov	r9, r3
 8002588:	46a2      	mov	sl, r4
 800258a:	eb19 090b 	adds.w	r9, r9, fp
 800258e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025a6:	4689      	mov	r9, r1
 80025a8:	4692      	mov	sl, r2
 80025aa:	eb1b 0509 	adds.w	r5, fp, r9
 80025ae:	eb4c 060a 	adc.w	r6, ip, sl
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	f04f 0400 	mov.w	r4, #0
 80025c4:	0094      	lsls	r4, r2, #2
 80025c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ca:	008b      	lsls	r3, r1, #2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	4628      	mov	r0, r5
 80025d2:	4631      	mov	r1, r6
 80025d4:	f7fd fe64 	bl	80002a0 <__aeabi_uldivmod>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	461a      	mov	r2, r3
 80025de:	4b77      	ldr	r3, [pc, #476]	; (80027bc <UART_SetConfig+0x6f4>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	2164      	movs	r1, #100	; 0x64
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	3332      	adds	r3, #50	; 0x32
 80025f2:	4a72      	ldr	r2, [pc, #456]	; (80027bc <UART_SetConfig+0x6f4>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	f003 020f 	and.w	r2, r3, #15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4442      	add	r2, r8
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	e0d0      	b.n	80027aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002608:	f7ff f996 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 800260c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	469a      	mov	sl, r3
 8002612:	f04f 0b00 	mov.w	fp, #0
 8002616:	46d0      	mov	r8, sl
 8002618:	46d9      	mov	r9, fp
 800261a:	eb18 0308 	adds.w	r3, r8, r8
 800261e:	eb49 0409 	adc.w	r4, r9, r9
 8002622:	4698      	mov	r8, r3
 8002624:	46a1      	mov	r9, r4
 8002626:	eb18 080a 	adds.w	r8, r8, sl
 800262a:	eb49 090b 	adc.w	r9, r9, fp
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800263a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800263e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002642:	4688      	mov	r8, r1
 8002644:	4691      	mov	r9, r2
 8002646:	eb1a 0508 	adds.w	r5, sl, r8
 800264a:	eb4b 0609 	adc.w	r6, fp, r9
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4619      	mov	r1, r3
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f04f 0400 	mov.w	r4, #0
 8002660:	0094      	lsls	r4, r2, #2
 8002662:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002666:	008b      	lsls	r3, r1, #2
 8002668:	461a      	mov	r2, r3
 800266a:	4623      	mov	r3, r4
 800266c:	4628      	mov	r0, r5
 800266e:	4631      	mov	r1, r6
 8002670:	f7fd fe16 	bl	80002a0 <__aeabi_uldivmod>
 8002674:	4603      	mov	r3, r0
 8002676:	460c      	mov	r4, r1
 8002678:	461a      	mov	r2, r3
 800267a:	4b50      	ldr	r3, [pc, #320]	; (80027bc <UART_SetConfig+0x6f4>)
 800267c:	fba3 2302 	umull	r2, r3, r3, r2
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	469b      	mov	fp, r3
 800268a:	f04f 0c00 	mov.w	ip, #0
 800268e:	46d9      	mov	r9, fp
 8002690:	46e2      	mov	sl, ip
 8002692:	eb19 0309 	adds.w	r3, r9, r9
 8002696:	eb4a 040a 	adc.w	r4, sl, sl
 800269a:	4699      	mov	r9, r3
 800269c:	46a2      	mov	sl, r4
 800269e:	eb19 090b 	adds.w	r9, r9, fp
 80026a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026ba:	4689      	mov	r9, r1
 80026bc:	4692      	mov	sl, r2
 80026be:	eb1b 0509 	adds.w	r5, fp, r9
 80026c2:	eb4c 060a 	adc.w	r6, ip, sl
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4619      	mov	r1, r3
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	f04f 0400 	mov.w	r4, #0
 80026d8:	0094      	lsls	r4, r2, #2
 80026da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026de:	008b      	lsls	r3, r1, #2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	4628      	mov	r0, r5
 80026e6:	4631      	mov	r1, r6
 80026e8:	f7fd fdda 	bl	80002a0 <__aeabi_uldivmod>
 80026ec:	4603      	mov	r3, r0
 80026ee:	460c      	mov	r4, r1
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b32      	ldr	r3, [pc, #200]	; (80027bc <UART_SetConfig+0x6f4>)
 80026f4:	fba3 1302 	umull	r1, r3, r3, r2
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	2164      	movs	r1, #100	; 0x64
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	3332      	adds	r3, #50	; 0x32
 8002706:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <UART_SetConfig+0x6f4>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002712:	4498      	add	r8, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	469b      	mov	fp, r3
 8002718:	f04f 0c00 	mov.w	ip, #0
 800271c:	46d9      	mov	r9, fp
 800271e:	46e2      	mov	sl, ip
 8002720:	eb19 0309 	adds.w	r3, r9, r9
 8002724:	eb4a 040a 	adc.w	r4, sl, sl
 8002728:	4699      	mov	r9, r3
 800272a:	46a2      	mov	sl, r4
 800272c:	eb19 090b 	adds.w	r9, r9, fp
 8002730:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002740:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002744:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002748:	4689      	mov	r9, r1
 800274a:	4692      	mov	sl, r2
 800274c:	eb1b 0509 	adds.w	r5, fp, r9
 8002750:	eb4c 060a 	adc.w	r6, ip, sl
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	f04f 0400 	mov.w	r4, #0
 8002766:	0094      	lsls	r4, r2, #2
 8002768:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800276c:	008b      	lsls	r3, r1, #2
 800276e:	461a      	mov	r2, r3
 8002770:	4623      	mov	r3, r4
 8002772:	4628      	mov	r0, r5
 8002774:	4631      	mov	r1, r6
 8002776:	f7fd fd93 	bl	80002a0 <__aeabi_uldivmod>
 800277a:	4603      	mov	r3, r0
 800277c:	460c      	mov	r4, r1
 800277e:	461a      	mov	r2, r3
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <UART_SetConfig+0x6f4>)
 8002782:	fba3 1302 	umull	r1, r3, r3, r2
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2164      	movs	r1, #100	; 0x64
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	3332      	adds	r3, #50	; 0x32
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <UART_SetConfig+0x6f4>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4442      	add	r2, r8
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	e7ff      	b.n	80027aa <UART_SetConfig+0x6e2>
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b4:	40011000 	.word	0x40011000
 80027b8:	40011400 	.word	0x40011400
 80027bc:	51eb851f 	.word	0x51eb851f

080027c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0208 	add.w	r2, r3, #8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f103 0208 	add.w	r2, r3, #8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0208 	add.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002878:	d103      	bne.n	8002882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e00c      	b.n	800289c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3308      	adds	r3, #8
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e002      	b.n	8002890 <vListInsert+0x2e>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	d2f6      	bcs.n	800288a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6852      	ldr	r2, [r2, #4]
 80028f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d103      	bne.n	8002908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	e7fe      	b.n	800294e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002950:	f002 fc5c 	bl	800520c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	68f9      	ldr	r1, [r7, #12]
 800295e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	441a      	add	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	3b01      	subs	r3, #1
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	441a      	add	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	22ff      	movs	r2, #255	; 0xff
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d114      	bne.n	80029d0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01a      	beq.n	80029e4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3310      	adds	r3, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fd46 	bl	8004444 <xTaskRemoveFromEventList>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <xQueueGenericReset+0xcc>)
 80029c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	e009      	b.n	80029e4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3310      	adds	r3, #16
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fef3 	bl	80027c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3324      	adds	r3, #36	; 0x24
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff feee 	bl	80027c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029e4:	f002 fc40 	bl	8005268 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000ed04 	.word	0xe000ed04

080029f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <xQueueGenericCreate+0x28>
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	e7fe      	b.n	8002a1e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e004      	b.n	8002a36 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3350      	adds	r3, #80	; 0x50
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fd00 	bl	8005440 <pvPortMalloc>
 8002a40:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3350      	adds	r3, #80	; 0x50
 8002a50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a52:	79fa      	ldrb	r2, [r7, #7]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f805 	bl	8002a6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a64:	69bb      	ldr	r3, [r7, #24]
	}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e002      	b.n	8002a90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	69b8      	ldr	r0, [r7, #24]
 8002aa0:	f7ff ff42 	bl	8002928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08e      	sub	sp, #56	; 0x38
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <xQueueGenericSend+0x30>
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae2:	e7fe      	b.n	8002ae2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSend+0x3e>
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSend+0x42>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSend+0x44>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <xQueueGenericSend+0x5c>
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e7fe      	b.n	8002b0e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d103      	bne.n	8002b1e <xQueueGenericSend+0x6a>
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <xQueueGenericSend+0x6e>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <xQueueGenericSend+0x70>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <xQueueGenericSend+0x88>
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	e7fe      	b.n	8002b3a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b3c:	f001 fe1a 	bl	8004774 <xTaskGetSchedulerState>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <xQueueGenericSend+0x98>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <xQueueGenericSend+0x9c>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <xQueueGenericSend+0x9e>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <xQueueGenericSend+0xb6>
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b6a:	f002 fb4f 	bl	800520c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <xQueueGenericSend+0xcc>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d129      	bne.n	8002bd4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b86:	f000 f9ff 	bl	8002f88 <prvCopyDataToQueue>
 8002b8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	3324      	adds	r3, #36	; 0x24
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fc53 	bl	8004444 <xTaskRemoveFromEventList>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ba4:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <xQueueGenericSend+0x1f0>)
 8002ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	e00a      	b.n	8002bcc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bbc:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <xQueueGenericSend+0x1f0>)
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bcc:	f002 fb4c 	bl	8005268 <vPortExitCritical>
				return pdPASS;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e063      	b.n	8002c9c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bda:	f002 fb45 	bl	8005268 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e05c      	b.n	8002c9c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 fc8b 	bl	8004508 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bf6:	f002 fb37 	bl	8005268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bfa:	f001 fa09 	bl	8004010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bfe:	f002 fb05 	bl	800520c <vPortEnterCritical>
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0e:	d103      	bne.n	8002c18 <xQueueGenericSend+0x164>
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d103      	bne.n	8002c2e <xQueueGenericSend+0x17a>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2e:	f002 fb1b 	bl	8005268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c32:	1d3a      	adds	r2, r7, #4
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fc7a 	bl	8004534 <xTaskCheckForTimeOut>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d124      	bne.n	8002c90 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c48:	f000 fa96 	bl	8003178 <prvIsQueueFull>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d018      	beq.n	8002c84 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	3310      	adds	r3, #16
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fba4 	bl	80043a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c62:	f000 fa21 	bl	80030a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c66:	f001 f9e1 	bl	800402c <xTaskResumeAll>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af7c 	bne.w	8002b6a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <xQueueGenericSend+0x1f0>)
 8002c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	e772      	b.n	8002b6a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c86:	f000 fa0f 	bl	80030a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c8a:	f001 f9cf 	bl	800402c <xTaskResumeAll>
 8002c8e:	e76c      	b.n	8002b6a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c92:	f000 fa09 	bl	80030a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c96:	f001 f9c9 	bl	800402c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3738      	adds	r7, #56	; 0x38
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	; 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <xQueueGenericSendFromISR+0x2c>
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd2:	e7fe      	b.n	8002cd2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <xQueueGenericSendFromISR+0x3a>
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x3e>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <xQueueGenericSendFromISR+0x40>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <xQueueGenericSendFromISR+0x58>
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	623b      	str	r3, [r7, #32]
 8002cfe:	e7fe      	b.n	8002cfe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d103      	bne.n	8002d0e <xQueueGenericSendFromISR+0x66>
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <xQueueGenericSendFromISR+0x6a>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueGenericSendFromISR+0x6c>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <xQueueGenericSendFromISR+0x84>
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e7fe      	b.n	8002d2a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d2c:	f002 fb4a 	bl	80053c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d30:	f3ef 8211 	mrs	r2, BASEPRI
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	61ba      	str	r2, [r7, #24]
 8002d46:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d48:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d302      	bcc.n	8002d5e <xQueueGenericSendFromISR+0xb6>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d12c      	bne.n	8002db8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6e:	f000 f90b 	bl	8002f88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d72:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d112      	bne.n	8002da2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	3324      	adds	r3, #36	; 0x24
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fb5b 	bl	8004444 <xTaskRemoveFromEventList>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e007      	b.n	8002db2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002da6:	3301      	adds	r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	b25a      	sxtb	r2, r3
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002db2:	2301      	movs	r3, #1
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002db6:	e001      	b.n	8002dbc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3738      	adds	r7, #56	; 0x38
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <xQueueReceive+0x2e>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	e7fe      	b.n	8002dfc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <xQueueReceive+0x3c>
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <xQueueReceive+0x40>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <xQueueReceive+0x42>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <xQueueReceive+0x5a>
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e7fe      	b.n	8002e28 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e2a:	f001 fca3 	bl	8004774 <xTaskGetSchedulerState>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <xQueueReceive+0x6a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <xQueueReceive+0x6e>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <xQueueReceive+0x70>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <xQueueReceive+0x88>
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e7fe      	b.n	8002e56 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e58:	f002 f9d8 	bl	800520c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01f      	beq.n	8002ea8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e6c:	f000 f8f6 	bl	800305c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00f      	beq.n	8002ea0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	3310      	adds	r3, #16
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fadd 	bl	8004444 <xTaskRemoveFromEventList>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e90:	4b3c      	ldr	r3, [pc, #240]	; (8002f84 <xQueueReceive+0x1b4>)
 8002e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ea0:	f002 f9e2 	bl	8005268 <vPortExitCritical>
				return pdPASS;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e069      	b.n	8002f7c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eae:	f002 f9db 	bl	8005268 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e062      	b.n	8002f7c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d106      	bne.n	8002eca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 fb21 	bl	8004508 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eca:	f002 f9cd 	bl	8005268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ece:	f001 f89f 	bl	8004010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ed2:	f002 f99b 	bl	800520c <vPortEnterCritical>
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee2:	d103      	bne.n	8002eec <xQueueReceive+0x11c>
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef8:	d103      	bne.n	8002f02 <xQueueReceive+0x132>
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f02:	f002 f9b1 	bl	8005268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f06:	1d3a      	adds	r2, r7, #4
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 fb10 	bl	8004534 <xTaskCheckForTimeOut>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d123      	bne.n	8002f62 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f1c:	f000 f916 	bl	800314c <prvIsQueueEmpty>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d017      	beq.n	8002f56 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	3324      	adds	r3, #36	; 0x24
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fa3a 	bl	80043a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f36:	f000 f8b7 	bl	80030a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f3a:	f001 f877 	bl	800402c <xTaskResumeAll>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d189      	bne.n	8002e58 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <xQueueReceive+0x1b4>)
 8002f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	e780      	b.n	8002e58 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f58:	f000 f8a6 	bl	80030a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f5c:	f001 f866 	bl	800402c <xTaskResumeAll>
 8002f60:	e77a      	b.n	8002e58 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f64:	f000 f8a0 	bl	80030a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f68:	f001 f860 	bl	800402c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6e:	f000 f8ed 	bl	800314c <prvIsQueueEmpty>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f43f af6f 	beq.w	8002e58 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3730      	adds	r7, #48	; 0x30
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	e000ed04 	.word	0xe000ed04

08002f88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d14d      	bne.n	800304a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fbfc 	bl	80047b0 <xTaskPriorityDisinherit>
 8002fb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	e043      	b.n	800304a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d119      	bne.n	8002ffc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6858      	ldr	r0, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	f002 fc34 	bl	8005840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	441a      	add	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d32b      	bcc.n	800304a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	e026      	b.n	800304a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68d8      	ldr	r0, [r3, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	461a      	mov	r2, r3
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	f002 fc1a 	bl	8005840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	425b      	negs	r3, r3
 8003016:	441a      	add	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d207      	bcs.n	8003038 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	425b      	negs	r3, r3
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d105      	bne.n	800304a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	3b01      	subs	r3, #1
 8003048:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003052:	697b      	ldr	r3, [r7, #20]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	441a      	add	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	d303      	bcc.n	8003090 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68d9      	ldr	r1, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	461a      	mov	r2, r3
 800309a:	6838      	ldr	r0, [r7, #0]
 800309c:	f002 fbd0 	bl	8005840 <memcpy>
	}
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030b0:	f002 f8ac 	bl	800520c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030bc:	e011      	b.n	80030e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3324      	adds	r3, #36	; 0x24
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f9ba 	bl	8004444 <xTaskRemoveFromEventList>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030d6:	f001 fa8d 	bl	80045f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	3b01      	subs	r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	dce9      	bgt.n	80030be <prvUnlockQueue+0x16>
 80030ea:	e000      	b.n	80030ee <prvUnlockQueue+0x46>
					break;
 80030ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	22ff      	movs	r2, #255	; 0xff
 80030f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030f6:	f002 f8b7 	bl	8005268 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030fa:	f002 f887 	bl	800520c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003104:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003106:	e011      	b.n	800312c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3310      	adds	r3, #16
 8003114:	4618      	mov	r0, r3
 8003116:	f001 f995 	bl	8004444 <xTaskRemoveFromEventList>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003120:	f001 fa68 	bl	80045f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003124:	7bbb      	ldrb	r3, [r7, #14]
 8003126:	3b01      	subs	r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800312c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003130:	2b00      	cmp	r3, #0
 8003132:	dce9      	bgt.n	8003108 <prvUnlockQueue+0x60>
 8003134:	e000      	b.n	8003138 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003136:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003140:	f002 f892 	bl	8005268 <vPortExitCritical>
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003154:	f002 f85a 	bl	800520c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e001      	b.n	800316a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800316a:	f002 f87d 	bl	8005268 <vPortExitCritical>

	return xReturn;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003180:	f002 f844 	bl	800520c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	429a      	cmp	r2, r3
 800318e:	d102      	bne.n	8003196 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003190:	2301      	movs	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	e001      	b.n	800319a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800319a:	f002 f865 	bl	8005268 <vPortExitCritical>

	return xReturn;
 800319e:	68fb      	ldr	r3, [r7, #12]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e014      	b.n	80031e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031b8:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <vQueueAddToRegistry+0x4c>)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031c4:	490b      	ldr	r1, [pc, #44]	; (80031f4 <vQueueAddToRegistry+0x4c>)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031ce:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <vQueueAddToRegistry+0x4c>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031da:	e005      	b.n	80031e8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3301      	adds	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b07      	cmp	r3, #7
 80031e6:	d9e7      	bls.n	80031b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	20012f48 	.word	0x20012f48

080031f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003208:	f002 f800 	bl	800520c <vPortEnterCritical>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003212:	b25b      	sxtb	r3, r3
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003218:	d103      	bne.n	8003222 <vQueueWaitForMessageRestricted+0x2a>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003228:	b25b      	sxtb	r3, r3
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800322e:	d103      	bne.n	8003238 <vQueueWaitForMessageRestricted+0x40>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003238:	f002 f816 	bl	8005268 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3324      	adds	r3, #36	; 0x24
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f8cf 	bl	80043f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f7ff ff28 	bl	80030a8 <prvUnlockQueue>
	}
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af04      	add	r7, sp, #16
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f002 f8e3 	bl	8005440 <pvPortMalloc>
 800327a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003282:	2058      	movs	r0, #88	; 0x58
 8003284:	f002 f8dc 	bl	8005440 <pvPortMalloc>
 8003288:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
 8003296:	e005      	b.n	80032a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003298:	6978      	ldr	r0, [r7, #20]
 800329a:	f002 f993 	bl	80055c4 <vPortFree>
 800329e:	e001      	b.n	80032a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d013      	beq.n	80032d2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	2300      	movs	r3, #0
 80032ae:	9303      	str	r3, [sp, #12]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	9302      	str	r3, [sp, #8]
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fd29 	bl	8003d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032c6:	69f8      	ldr	r0, [r7, #28]
 80032c8:	f000 fdb4 	bl	8003e34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032cc:	2301      	movs	r3, #1
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	e002      	b.n	80032d8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032d8:	69bb      	ldr	r3, [r7, #24]
	}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <Uint32ConvertHex>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/
void Uint32ConvertHex(volatile StackType_t pStack, char *charTxScanTaskStack){
 80032e2:	b480      	push	{r7}
 80032e4:	b089      	sub	sp, #36	; 0x24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
		uint32_t remainder,quotient;
		int j =  0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
		int reversal = 2,end = 0;
 80032f0:	2302      	movs	r3, #2
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
		char reversalChar;

		quotient = pStack;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	61fb      	str	r3, [r7, #28]
		charTxScanTaskStack[j++] = 48; // ascii  number 0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	61ba      	str	r2, [r7, #24]
 8003302:	461a      	mov	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	2230      	movs	r2, #48	; 0x30
 800330a:	701a      	strb	r2, [r3, #0]
		charTxScanTaskStack[j++] = 88; // ascii alphabet X
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	61ba      	str	r2, [r7, #24]
 8003312:	461a      	mov	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	4413      	add	r3, r2
 8003318:	2258      	movs	r2, #88	; 0x58
 800331a:	701a      	strb	r2, [r3, #0]
		while (quotient != 0)
 800331c:	e020      	b.n	8003360 <Uint32ConvertHex+0x7e>
		{
			remainder = quotient % 16;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	60bb      	str	r3, [r7, #8]
			if (remainder < 10)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b09      	cmp	r3, #9
 800332a:	d80b      	bhi.n	8003344 <Uint32ConvertHex+0x62>
				charTxScanTaskStack[j++] = '0' + remainder;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1c59      	adds	r1, r3, #1
 8003334:	61b9      	str	r1, [r7, #24]
 8003336:	4619      	mov	r1, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	440b      	add	r3, r1
 800333c:	3230      	adds	r2, #48	; 0x30
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e00a      	b.n	800335a <Uint32ConvertHex+0x78>
			else
				charTxScanTaskStack[j++] = 55 + remainder; // A = 65;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	61b9      	str	r1, [r7, #24]
 800334e:	4619      	mov	r1, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	440b      	add	r3, r1
 8003354:	3237      	adds	r2, #55	; 0x37
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
			quotient = quotient / 16;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	61fb      	str	r3, [r7, #28]
		while (quotient != 0)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1db      	bne.n	800331e <Uint32ConvertHex+0x3c>
		}
		end = j-1;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	3b01      	subs	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
		for(reversal;reversal<=(end/2)+1;reversal++){
 800336c:	e017      	b.n	800339e <Uint32ConvertHex+0xbc>
			reversalChar = charTxScanTaskStack[reversal];
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	73fb      	strb	r3, [r7, #15]
			charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	441a      	add	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	440b      	add	r3, r1
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	701a      	strb	r2, [r3, #0]
			charTxScanTaskStack[end] = reversalChar;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	701a      	strb	r2, [r3, #0]
			end--;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	3b01      	subs	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
		for(reversal;reversal<=(end/2)+1;reversal++){
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	3301      	adds	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	0fda      	lsrs	r2, r3, #31
 80033a2:	4413      	add	r3, r2
 80033a4:	105b      	asrs	r3, r3, #1
 80033a6:	3301      	adds	r3, #1
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	dddf      	ble.n	800336e <Uint32ConvertHex+0x8c>
		}
		charTxScanTaskStack[j++] = 0;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	61ba      	str	r2, [r7, #24]
 80033b4:	461a      	mov	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <TaskMonitor>:
struct data greenblink;
struct data taskdelay;
struct data idletask;
tskTCB *ptr2;
 ListItem_t *ptr;
void TaskMonitor(){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af04      	add	r7, sp, #16

	memset(MonitorTset,'\0',sizeof(MonitorTset));
 80033d2:	2246      	movs	r2, #70	; 0x46
 80033d4:	2100      	movs	r1, #0
 80033d6:	489c      	ldr	r0, [pc, #624]	; (8003648 <TaskMonitor+0x27c>)
 80033d8:	f002 fa3d 	bl	8005856 <memset>
	memset(task_monitor,'\0',sizeof(MonitorTset));
 80033dc:	2246      	movs	r2, #70	; 0x46
 80033de:	2100      	movs	r1, #0
 80033e0:	489a      	ldr	r0, [pc, #616]	; (800364c <TaskMonitor+0x280>)
 80033e2:	f002 fa38 	bl	8005856 <memset>
	memset(idle_monitor,'\0',sizeof(MonitorTset));
 80033e6:	2246      	movs	r2, #70	; 0x46
 80033e8:	2100      	movs	r1, #0
 80033ea:	4899      	ldr	r0, [pc, #612]	; (8003650 <TaskMonitor+0x284>)
 80033ec:	f002 fa33 	bl	8005856 <memset>
	memset(red_monitor,'\0',sizeof(MonitorTset));
 80033f0:	2246      	movs	r2, #70	; 0x46
 80033f2:	2100      	movs	r1, #0
 80033f4:	4897      	ldr	r0, [pc, #604]	; (8003654 <TaskMonitor+0x288>)
 80033f6:	f002 fa2e 	bl	8005856 <memset>
	memset(green_monitor,'\0',sizeof(MonitorTset));
 80033fa:	2246      	movs	r2, #70	; 0x46
 80033fc:	2100      	movs	r1, #0
 80033fe:	4896      	ldr	r0, [pc, #600]	; (8003658 <TaskMonitor+0x28c>)
 8003400:	f002 fa29 	bl	8005856 <memset>
	memset(delay_monitor,'\0',sizeof(MonitorTset));
 8003404:	2246      	movs	r2, #70	; 0x46
 8003406:	2100      	movs	r1, #0
 8003408:	4894      	ldr	r0, [pc, #592]	; (800365c <TaskMonitor+0x290>)
 800340a:	f002 fa24 	bl	8005856 <memset>

    //memset(idletask.pstack_m,'\0',12);
    //memset(idletask.topofpstack_m,'\0',12);
    //memset(idletask.state_m,'\0',10);

	int i=0;
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
	for(i=0;i<15;i++)  //take the tasks state that is reday
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	e10f      	b.n	8003638 <TaskMonitor+0x26c>
	{

		if(!listLIST_IS_EMPTY(&(pxReadyTasksLists[i])))
 8003418:	4991      	ldr	r1, [pc, #580]	; (8003660 <TaskMonitor+0x294>)
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8102 	beq.w	8003632 <TaskMonitor+0x266>
		{
			int j;

			for(j=0;j<listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[i]));j++)
 800342e:	2300      	movs	r3, #0
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	e0f2      	b.n	800361a <TaskMonitor+0x24e>
			{
               ptr = (&(&(pxReadyTasksLists[i]))->xListEnd)->pxNext;
 8003434:	498a      	ldr	r1, [pc, #552]	; (8003660 <TaskMonitor+0x294>)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	330c      	adds	r3, #12
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a87      	ldr	r2, [pc, #540]	; (8003664 <TaskMonitor+0x298>)
 8003448:	6013      	str	r3, [r2, #0]
               ptr2=ptr->pvOwner;
 800344a:	4b86      	ldr	r3, [pc, #536]	; (8003664 <TaskMonitor+0x298>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a85      	ldr	r2, [pc, #532]	; (8003668 <TaskMonitor+0x29c>)
 8003452:	6013      	str	r3, [r2, #0]
               if(!strcmp(ptr2->pcTaskName,"IDLE"))
 8003454:	4b84      	ldr	r3, [pc, #528]	; (8003668 <TaskMonitor+0x29c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3334      	adds	r3, #52	; 0x34
 800345a:	4984      	ldr	r1, [pc, #528]	; (800366c <TaskMonitor+0x2a0>)
 800345c:	4618      	mov	r0, r3
 800345e:	f7fc feb7 	bl	80001d0 <strcmp>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d121      	bne.n	80034ac <TaskMonitor+0xe0>
               {
            	   idletask.priority_actual=(int)ptr2->uxPriority;
 8003468:	4b7f      	ldr	r3, [pc, #508]	; (8003668 <TaskMonitor+0x29c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	461a      	mov	r2, r3
 8003470:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <TaskMonitor+0x2a4>)
 8003472:	605a      	str	r2, [r3, #4]
            	   idletask.priority_base=(int)ptr2->uxBasePriority;
 8003474:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <TaskMonitor+0x29c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347a:	461a      	mov	r2, r3
 800347c:	4b7c      	ldr	r3, [pc, #496]	; (8003670 <TaskMonitor+0x2a4>)
 800347e:	601a      	str	r2, [r3, #0]
            	   Uint32ConvertHex(ptr2->pxStack,idletask.pstack_m);
 8003480:	4b79      	ldr	r3, [pc, #484]	; (8003668 <TaskMonitor+0x29c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	497b      	ldr	r1, [pc, #492]	; (8003674 <TaskMonitor+0x2a8>)
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff2a 	bl	80032e2 <Uint32ConvertHex>
            	   Uint32ConvertHex(ptr2->pxTopOfStack,idletask.topofpstack_m);
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <TaskMonitor+0x29c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4978      	ldr	r1, [pc, #480]	; (8003678 <TaskMonitor+0x2ac>)
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ff23 	bl	80032e2 <Uint32ConvertHex>
            	   strcpy(idletask.state_m,"ready");
 800349c:	4b77      	ldr	r3, [pc, #476]	; (800367c <TaskMonitor+0x2b0>)
 800349e:	4a78      	ldr	r2, [pc, #480]	; (8003680 <TaskMonitor+0x2b4>)
 80034a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034a4:	6018      	str	r0, [r3, #0]
 80034a6:	3304      	adds	r3, #4
 80034a8:	8019      	strh	r1, [r3, #0]
 80034aa:	e0ae      	b.n	800360a <TaskMonitor+0x23e>
               }
               else if(!strcmp(ptr2->pcTaskName,"green_bli"))
 80034ac:	4b6e      	ldr	r3, [pc, #440]	; (8003668 <TaskMonitor+0x29c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3334      	adds	r3, #52	; 0x34
 80034b2:	4974      	ldr	r1, [pc, #464]	; (8003684 <TaskMonitor+0x2b8>)
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fc fe8b 	bl	80001d0 <strcmp>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d121      	bne.n	8003504 <TaskMonitor+0x138>
               {
            	   greenblink.priority_actual=(int)ptr2->uxPriority;
 80034c0:	4b69      	ldr	r3, [pc, #420]	; (8003668 <TaskMonitor+0x29c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <TaskMonitor+0x2bc>)
 80034ca:	605a      	str	r2, [r3, #4]
            	   greenblink.priority_base=(int)ptr2->uxBasePriority;
 80034cc:	4b66      	ldr	r3, [pc, #408]	; (8003668 <TaskMonitor+0x29c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <TaskMonitor+0x2bc>)
 80034d6:	601a      	str	r2, [r3, #0]
            	   Uint32ConvertHex(ptr2->pxStack,greenblink.pstack_m);
 80034d8:	4b63      	ldr	r3, [pc, #396]	; (8003668 <TaskMonitor+0x29c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	496b      	ldr	r1, [pc, #428]	; (800368c <TaskMonitor+0x2c0>)
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fefe 	bl	80032e2 <Uint32ConvertHex>
            	              	   Uint32ConvertHex(ptr2->pxTopOfStack,greenblink.topofpstack_m);
 80034e6:	4b60      	ldr	r3, [pc, #384]	; (8003668 <TaskMonitor+0x29c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4968      	ldr	r1, [pc, #416]	; (8003690 <TaskMonitor+0x2c4>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fef7 	bl	80032e2 <Uint32ConvertHex>
            	              	   strcpy(greenblink.state_m,"ready");
 80034f4:	4b67      	ldr	r3, [pc, #412]	; (8003694 <TaskMonitor+0x2c8>)
 80034f6:	4a62      	ldr	r2, [pc, #392]	; (8003680 <TaskMonitor+0x2b4>)
 80034f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034fc:	6018      	str	r0, [r3, #0]
 80034fe:	3304      	adds	r3, #4
 8003500:	8019      	strh	r1, [r3, #0]
 8003502:	e082      	b.n	800360a <TaskMonitor+0x23e>
               }
               else if(!strcmp(ptr2->pcTaskName,"red_blink"))
 8003504:	4b58      	ldr	r3, [pc, #352]	; (8003668 <TaskMonitor+0x29c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3334      	adds	r3, #52	; 0x34
 800350a:	4963      	ldr	r1, [pc, #396]	; (8003698 <TaskMonitor+0x2cc>)
 800350c:	4618      	mov	r0, r3
 800350e:	f7fc fe5f 	bl	80001d0 <strcmp>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d121      	bne.n	800355c <TaskMonitor+0x190>
               {
            	   redblink.priority_actual=(int)ptr2->uxPriority;
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <TaskMonitor+0x29c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	461a      	mov	r2, r3
 8003520:	4b5e      	ldr	r3, [pc, #376]	; (800369c <TaskMonitor+0x2d0>)
 8003522:	605a      	str	r2, [r3, #4]
            	   redblink.priority_base=(int)ptr2->uxBasePriority;
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <TaskMonitor+0x29c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	461a      	mov	r2, r3
 800352c:	4b5b      	ldr	r3, [pc, #364]	; (800369c <TaskMonitor+0x2d0>)
 800352e:	601a      	str	r2, [r3, #0]
            	   Uint32ConvertHex(ptr2->pxStack,redblink.pstack_m);
 8003530:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <TaskMonitor+0x29c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	495a      	ldr	r1, [pc, #360]	; (80036a0 <TaskMonitor+0x2d4>)
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fed2 	bl	80032e2 <Uint32ConvertHex>
            	              	   Uint32ConvertHex(ptr2->pxTopOfStack,redblink.topofpstack_m);
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <TaskMonitor+0x29c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4957      	ldr	r1, [pc, #348]	; (80036a4 <TaskMonitor+0x2d8>)
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fecb 	bl	80032e2 <Uint32ConvertHex>
            	              	   strcpy(redblink.state_m,"ready");
 800354c:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <TaskMonitor+0x2dc>)
 800354e:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <TaskMonitor+0x2b4>)
 8003550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003554:	6018      	str	r0, [r3, #0]
 8003556:	3304      	adds	r3, #4
 8003558:	8019      	strh	r1, [r3, #0]
 800355a:	e056      	b.n	800360a <TaskMonitor+0x23e>
               }
               else if(!strcmp(ptr2->pcTaskName,"TaskMonit"))
 800355c:	4b42      	ldr	r3, [pc, #264]	; (8003668 <TaskMonitor+0x29c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3334      	adds	r3, #52	; 0x34
 8003562:	4952      	ldr	r1, [pc, #328]	; (80036ac <TaskMonitor+0x2e0>)
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc fe33 	bl	80001d0 <strcmp>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d121      	bne.n	80035b4 <TaskMonitor+0x1e8>
               {
            	   taskmonitor.priority_actual=(int)ptr2->uxPriority;
 8003570:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <TaskMonitor+0x29c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	461a      	mov	r2, r3
 8003578:	4b4d      	ldr	r3, [pc, #308]	; (80036b0 <TaskMonitor+0x2e4>)
 800357a:	605a      	str	r2, [r3, #4]
            	   taskmonitor.priority_base=(int)ptr2->uxBasePriority;
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <TaskMonitor+0x29c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	461a      	mov	r2, r3
 8003584:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <TaskMonitor+0x2e4>)
 8003586:	601a      	str	r2, [r3, #0]
            	   Uint32ConvertHex(ptr2->pxStack,taskmonitor.pstack_m);
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <TaskMonitor+0x29c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4949      	ldr	r1, [pc, #292]	; (80036b4 <TaskMonitor+0x2e8>)
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fea6 	bl	80032e2 <Uint32ConvertHex>
            	              	   Uint32ConvertHex(ptr2->pxTopOfStack,taskmonitor.topofpstack_m);
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <TaskMonitor+0x29c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4946      	ldr	r1, [pc, #280]	; (80036b8 <TaskMonitor+0x2ec>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fe9f 	bl	80032e2 <Uint32ConvertHex>
            	              	   strcpy(taskmonitor.state_m,"ready");
 80035a4:	4b45      	ldr	r3, [pc, #276]	; (80036bc <TaskMonitor+0x2f0>)
 80035a6:	4a36      	ldr	r2, [pc, #216]	; (8003680 <TaskMonitor+0x2b4>)
 80035a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ac:	6018      	str	r0, [r3, #0]
 80035ae:	3304      	adds	r3, #4
 80035b0:	8019      	strh	r1, [r3, #0]
 80035b2:	e02a      	b.n	800360a <TaskMonitor+0x23e>
               }
               else if(!strcmp(ptr2->pcTaskName,"task_dela"))
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <TaskMonitor+0x29c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3334      	adds	r3, #52	; 0x34
 80035ba:	4941      	ldr	r1, [pc, #260]	; (80036c0 <TaskMonitor+0x2f4>)
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc fe07 	bl	80001d0 <strcmp>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d120      	bne.n	800360a <TaskMonitor+0x23e>
               {
            	   taskdelay.priority_actual=(int)ptr2->uxPriority;
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <TaskMonitor+0x29c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <TaskMonitor+0x2f8>)
 80035d2:	605a      	str	r2, [r3, #4]
            	   taskdelay.priority_base=(int)ptr2->uxBasePriority;
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <TaskMonitor+0x29c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	461a      	mov	r2, r3
 80035dc:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <TaskMonitor+0x2f8>)
 80035de:	601a      	str	r2, [r3, #0]
            	   Uint32ConvertHex(ptr2->pxStack,taskdelay.pstack_m);
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <TaskMonitor+0x29c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4938      	ldr	r1, [pc, #224]	; (80036c8 <TaskMonitor+0x2fc>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fe7a 	bl	80032e2 <Uint32ConvertHex>
            	              	   Uint32ConvertHex(ptr2->pxTopOfStack,taskdelay.topofpstack_m);
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <TaskMonitor+0x29c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4935      	ldr	r1, [pc, #212]	; (80036cc <TaskMonitor+0x300>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fe73 	bl	80032e2 <Uint32ConvertHex>
            	              	   strcpy(taskdelay.state_m,"ready");
 80035fc:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <TaskMonitor+0x304>)
 80035fe:	4a20      	ldr	r2, [pc, #128]	; (8003680 <TaskMonitor+0x2b4>)
 8003600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003604:	6018      	str	r0, [r3, #0]
 8003606:	3304      	adds	r3, #4
 8003608:	8019      	strh	r1, [r3, #0]
               }
			   ptr=ptr->pxNext;
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <TaskMonitor+0x298>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <TaskMonitor+0x298>)
 8003612:	6013      	str	r3, [r2, #0]
			for(j=0;j<listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[i]));j++)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	4911      	ldr	r1, [pc, #68]	; (8003660 <TaskMonitor+0x294>)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	f63f af01 	bhi.w	8003434 <TaskMonitor+0x68>
	for(i=0;i<15;i++)  //take the tasks state that is reday
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3301      	adds	r3, #1
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b0e      	cmp	r3, #14
 800363c:	f77f aeec 	ble.w	8003418 <TaskMonitor+0x4c>
			}
		}
	}

	for(i=0;i<listCURRENT_LIST_LENGTH(pxDelayedTaskList);i++)  //take the task state that is in blocked
 8003640:	2300      	movs	r3, #0
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	e12e      	b.n	80038a4 <TaskMonitor+0x4d8>
 8003646:	bf00      	nop
 8003648:	2001318c 	.word	0x2001318c
 800364c:	20012ffc 	.word	0x20012ffc
 8003650:	20013118 	.word	0x20013118
 8003654:	200131d4 	.word	0x200131d4
 8003658:	20012f88 	.word	0x20012f88
 800365c:	20013070 	.word	0x20013070
 8003660:	20000098 	.word	0x20000098
 8003664:	200130b8 	.word	0x200130b8
 8003668:	20013114 	.word	0x20013114
 800366c:	080060a8 	.word	0x080060a8
 8003670:	200130e8 	.word	0x200130e8
 8003674:	200130f0 	.word	0x200130f0
 8003678:	200130fc 	.word	0x200130fc
 800367c:	20013108 	.word	0x20013108
 8003680:	080060b0 	.word	0x080060b0
 8003684:	080060b8 	.word	0x080060b8
 8003688:	20012fd0 	.word	0x20012fd0
 800368c:	20012fd8 	.word	0x20012fd8
 8003690:	20012fe4 	.word	0x20012fe4
 8003694:	20012ff0 	.word	0x20012ff0
 8003698:	080060c4 	.word	0x080060c4
 800369c:	20013044 	.word	0x20013044
 80036a0:	2001304c 	.word	0x2001304c
 80036a4:	20013058 	.word	0x20013058
 80036a8:	20013064 	.word	0x20013064
 80036ac:	080060d0 	.word	0x080060d0
 80036b0:	200130bc 	.word	0x200130bc
 80036b4:	200130c4 	.word	0x200130c4
 80036b8:	200130d0 	.word	0x200130d0
 80036bc:	200130dc 	.word	0x200130dc
 80036c0:	080060dc 	.word	0x080060dc
 80036c4:	20013160 	.word	0x20013160
 80036c8:	20013168 	.word	0x20013168
 80036cc:	20013174 	.word	0x20013174
 80036d0:	20013180 	.word	0x20013180
		{
			ptr = (&( ( pxDelayedTaskList )->xListEnd ))->pxNext;
 80036d4:	4b92      	ldr	r3, [pc, #584]	; (8003920 <TaskMonitor+0x554>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4a92      	ldr	r2, [pc, #584]	; (8003924 <TaskMonitor+0x558>)
 80036dc:	6013      	str	r3, [r2, #0]
	        ptr2=ptr->pvOwner;
 80036de:	4b91      	ldr	r3, [pc, #580]	; (8003924 <TaskMonitor+0x558>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a90      	ldr	r2, [pc, #576]	; (8003928 <TaskMonitor+0x55c>)
 80036e6:	6013      	str	r3, [r2, #0]
	        if(!strcmp(ptr2->pcTaskName,"IDLE"))
 80036e8:	4b8f      	ldr	r3, [pc, #572]	; (8003928 <TaskMonitor+0x55c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3334      	adds	r3, #52	; 0x34
 80036ee:	498f      	ldr	r1, [pc, #572]	; (800392c <TaskMonitor+0x560>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fc fd6d 	bl	80001d0 <strcmp>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d120      	bne.n	800373e <TaskMonitor+0x372>
	                      {
	                   	   idletask.priority_actual=(int)ptr2->uxPriority;
 80036fc:	4b8a      	ldr	r3, [pc, #552]	; (8003928 <TaskMonitor+0x55c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	461a      	mov	r2, r3
 8003704:	4b8a      	ldr	r3, [pc, #552]	; (8003930 <TaskMonitor+0x564>)
 8003706:	605a      	str	r2, [r3, #4]
	                   	   idletask.priority_base=(int)ptr2->uxBasePriority;
 8003708:	4b87      	ldr	r3, [pc, #540]	; (8003928 <TaskMonitor+0x55c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370e:	461a      	mov	r2, r3
 8003710:	4b87      	ldr	r3, [pc, #540]	; (8003930 <TaskMonitor+0x564>)
 8003712:	601a      	str	r2, [r3, #0]
	                   	   Uint32ConvertHex(ptr2->pxStack,idletask.pstack_m);
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <TaskMonitor+0x55c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4986      	ldr	r1, [pc, #536]	; (8003934 <TaskMonitor+0x568>)
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fde0 	bl	80032e2 <Uint32ConvertHex>
	                   	   Uint32ConvertHex(ptr2->pxTopOfStack,idletask.topofpstack_m);
 8003722:	4b81      	ldr	r3, [pc, #516]	; (8003928 <TaskMonitor+0x55c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4983      	ldr	r1, [pc, #524]	; (8003938 <TaskMonitor+0x56c>)
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fdd9 	bl	80032e2 <Uint32ConvertHex>
	                   	   strcpy(idletask.state_m,"blocked");
 8003730:	4b82      	ldr	r3, [pc, #520]	; (800393c <TaskMonitor+0x570>)
 8003732:	4a83      	ldr	r2, [pc, #524]	; (8003940 <TaskMonitor+0x574>)
 8003734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003738:	e883 0003 	stmia.w	r3, {r0, r1}
 800373c:	e0aa      	b.n	8003894 <TaskMonitor+0x4c8>
	                      }
	                      else if(!strcmp(ptr2->pcTaskName,"green_bli"))
 800373e:	4b7a      	ldr	r3, [pc, #488]	; (8003928 <TaskMonitor+0x55c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3334      	adds	r3, #52	; 0x34
 8003744:	497f      	ldr	r1, [pc, #508]	; (8003944 <TaskMonitor+0x578>)
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fd42 	bl	80001d0 <strcmp>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d120      	bne.n	8003794 <TaskMonitor+0x3c8>
	                      {
	                   	   greenblink.priority_actual=(int)ptr2->uxPriority;
 8003752:	4b75      	ldr	r3, [pc, #468]	; (8003928 <TaskMonitor+0x55c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	461a      	mov	r2, r3
 800375a:	4b7b      	ldr	r3, [pc, #492]	; (8003948 <TaskMonitor+0x57c>)
 800375c:	605a      	str	r2, [r3, #4]
	                   	   greenblink.priority_base=(int)ptr2->uxBasePriority;
 800375e:	4b72      	ldr	r3, [pc, #456]	; (8003928 <TaskMonitor+0x55c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	461a      	mov	r2, r3
 8003766:	4b78      	ldr	r3, [pc, #480]	; (8003948 <TaskMonitor+0x57c>)
 8003768:	601a      	str	r2, [r3, #0]
	                   	   Uint32ConvertHex(ptr2->pxStack,greenblink.pstack_m);
 800376a:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <TaskMonitor+0x55c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	4976      	ldr	r1, [pc, #472]	; (800394c <TaskMonitor+0x580>)
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fdb5 	bl	80032e2 <Uint32ConvertHex>
	                   	              	   Uint32ConvertHex(ptr2->pxTopOfStack,greenblink.topofpstack_m);
 8003778:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <TaskMonitor+0x55c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4974      	ldr	r1, [pc, #464]	; (8003950 <TaskMonitor+0x584>)
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fdae 	bl	80032e2 <Uint32ConvertHex>
	                   	              	   strcpy(greenblink.state_m,"blocked");
 8003786:	4b73      	ldr	r3, [pc, #460]	; (8003954 <TaskMonitor+0x588>)
 8003788:	4a6d      	ldr	r2, [pc, #436]	; (8003940 <TaskMonitor+0x574>)
 800378a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800378e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003792:	e07f      	b.n	8003894 <TaskMonitor+0x4c8>
	                      }
	                      else if(!strcmp(ptr2->pcTaskName,"red_blink"))
 8003794:	4b64      	ldr	r3, [pc, #400]	; (8003928 <TaskMonitor+0x55c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3334      	adds	r3, #52	; 0x34
 800379a:	496f      	ldr	r1, [pc, #444]	; (8003958 <TaskMonitor+0x58c>)
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc fd17 	bl	80001d0 <strcmp>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d120      	bne.n	80037ea <TaskMonitor+0x41e>
	                      {
	                   	   redblink.priority_actual=(int)ptr2->uxPriority;
 80037a8:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <TaskMonitor+0x55c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b6a      	ldr	r3, [pc, #424]	; (800395c <TaskMonitor+0x590>)
 80037b2:	605a      	str	r2, [r3, #4]
	                   	   redblink.priority_base=(int)ptr2->uxBasePriority;
 80037b4:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <TaskMonitor+0x55c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b67      	ldr	r3, [pc, #412]	; (800395c <TaskMonitor+0x590>)
 80037be:	601a      	str	r2, [r3, #0]
	                   	   Uint32ConvertHex(ptr2->pxStack,redblink.pstack_m);
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <TaskMonitor+0x55c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4966      	ldr	r1, [pc, #408]	; (8003960 <TaskMonitor+0x594>)
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fd8a 	bl	80032e2 <Uint32ConvertHex>
	                   	              	   Uint32ConvertHex(ptr2->pxTopOfStack,redblink.topofpstack_m);
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <TaskMonitor+0x55c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4963      	ldr	r1, [pc, #396]	; (8003964 <TaskMonitor+0x598>)
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fd83 	bl	80032e2 <Uint32ConvertHex>
	                   	              	   strcpy(redblink.state_m,"blocked");
 80037dc:	4b62      	ldr	r3, [pc, #392]	; (8003968 <TaskMonitor+0x59c>)
 80037de:	4a58      	ldr	r2, [pc, #352]	; (8003940 <TaskMonitor+0x574>)
 80037e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80037e8:	e054      	b.n	8003894 <TaskMonitor+0x4c8>
	                      }
	                      else if(!strcmp(ptr2->pcTaskName,"TaskMonit"))
 80037ea:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <TaskMonitor+0x55c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3334      	adds	r3, #52	; 0x34
 80037f0:	495e      	ldr	r1, [pc, #376]	; (800396c <TaskMonitor+0x5a0>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fcec 	bl	80001d0 <strcmp>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d120      	bne.n	8003840 <TaskMonitor+0x474>
	                      {
	                   	   taskmonitor.priority_actual=(int)ptr2->uxPriority;
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <TaskMonitor+0x55c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	461a      	mov	r2, r3
 8003806:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <TaskMonitor+0x5a4>)
 8003808:	605a      	str	r2, [r3, #4]
	                   	   taskmonitor.priority_base=(int)ptr2->uxBasePriority;
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <TaskMonitor+0x55c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003810:	461a      	mov	r2, r3
 8003812:	4b57      	ldr	r3, [pc, #348]	; (8003970 <TaskMonitor+0x5a4>)
 8003814:	601a      	str	r2, [r3, #0]
	                   	   Uint32ConvertHex(ptr2->pxStack,taskmonitor.pstack_m);
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <TaskMonitor+0x55c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	4955      	ldr	r1, [pc, #340]	; (8003974 <TaskMonitor+0x5a8>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fd5f 	bl	80032e2 <Uint32ConvertHex>
	                   	              	   Uint32ConvertHex(ptr2->pxTopOfStack,taskmonitor.topofpstack_m);
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <TaskMonitor+0x55c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4953      	ldr	r1, [pc, #332]	; (8003978 <TaskMonitor+0x5ac>)
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fd58 	bl	80032e2 <Uint32ConvertHex>
	                   	              	   strcpy(taskmonitor.state_m,"blocked");
 8003832:	4b52      	ldr	r3, [pc, #328]	; (800397c <TaskMonitor+0x5b0>)
 8003834:	4a42      	ldr	r2, [pc, #264]	; (8003940 <TaskMonitor+0x574>)
 8003836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800383a:	e883 0003 	stmia.w	r3, {r0, r1}
 800383e:	e029      	b.n	8003894 <TaskMonitor+0x4c8>
	                      }
	                      else if(!strcmp(ptr2->pcTaskName,"task_dela"))
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <TaskMonitor+0x55c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3334      	adds	r3, #52	; 0x34
 8003846:	494e      	ldr	r1, [pc, #312]	; (8003980 <TaskMonitor+0x5b4>)
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fcc1 	bl	80001d0 <strcmp>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11f      	bne.n	8003894 <TaskMonitor+0x4c8>
	                      {
	                   	   taskdelay.priority_actual=(int)ptr2->uxPriority;
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <TaskMonitor+0x55c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	461a      	mov	r2, r3
 800385c:	4b49      	ldr	r3, [pc, #292]	; (8003984 <TaskMonitor+0x5b8>)
 800385e:	605a      	str	r2, [r3, #4]
	                   	   taskdelay.priority_base=(int)ptr2->uxBasePriority;
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <TaskMonitor+0x55c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	461a      	mov	r2, r3
 8003868:	4b46      	ldr	r3, [pc, #280]	; (8003984 <TaskMonitor+0x5b8>)
 800386a:	601a      	str	r2, [r3, #0]
	                   	   Uint32ConvertHex(ptr2->pxStack,taskdelay.pstack_m);
 800386c:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <TaskMonitor+0x55c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4945      	ldr	r1, [pc, #276]	; (8003988 <TaskMonitor+0x5bc>)
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fd34 	bl	80032e2 <Uint32ConvertHex>
	                   	   Uint32ConvertHex(ptr2->pxTopOfStack,taskdelay.topofpstack_m);
 800387a:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <TaskMonitor+0x55c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4942      	ldr	r1, [pc, #264]	; (800398c <TaskMonitor+0x5c0>)
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fd2d 	bl	80032e2 <Uint32ConvertHex>
	                   	   strcpy(taskdelay.state_m,"blocked");
 8003888:	4b41      	ldr	r3, [pc, #260]	; (8003990 <TaskMonitor+0x5c4>)
 800388a:	4a2d      	ldr	r2, [pc, #180]	; (8003940 <TaskMonitor+0x574>)
 800388c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003890:	e883 0003 	stmia.w	r3, {r0, r1}
	                      }
	        ptr=ptr->pxNext;
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <TaskMonitor+0x558>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a22      	ldr	r2, [pc, #136]	; (8003924 <TaskMonitor+0x558>)
 800389c:	6013      	str	r3, [r2, #0]
	for(i=0;i<listCURRENT_LIST_LENGTH(pxDelayedTaskList);i++)  //take the task state that is in blocked
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3301      	adds	r3, #1
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <TaskMonitor+0x554>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f63f af11 	bhi.w	80036d4 <TaskMonitor+0x308>

		}


	for(i=0;i<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);i++)   //take the state that is in overflow blocked
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	e142      	b.n	8003b3e <TaskMonitor+0x772>
	{

		ptr = (&( ( pxOverflowDelayedTaskList )->xListEnd ))->pxNext;
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <TaskMonitor+0x5c8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4a19      	ldr	r2, [pc, #100]	; (8003924 <TaskMonitor+0x558>)
 80038c0:	6013      	str	r3, [r2, #0]
		        ptr2=ptr->pvOwner;
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <TaskMonitor+0x558>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <TaskMonitor+0x55c>)
 80038ca:	6013      	str	r3, [r2, #0]
		        if(!strcmp(ptr2->pcTaskName,"IDLE"))
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <TaskMonitor+0x55c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3334      	adds	r3, #52	; 0x34
 80038d2:	4916      	ldr	r1, [pc, #88]	; (800392c <TaskMonitor+0x560>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fc7b 	bl	80001d0 <strcmp>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d15d      	bne.n	800399c <TaskMonitor+0x5d0>
		          {
		                   	   idletask.priority_actual=(int)ptr2->uxPriority;
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <TaskMonitor+0x55c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <TaskMonitor+0x564>)
 80038ea:	605a      	str	r2, [r3, #4]
		                   	   idletask.priority_base=(int)ptr2->uxBasePriority;
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <TaskMonitor+0x55c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <TaskMonitor+0x564>)
 80038f6:	601a      	str	r2, [r3, #0]
		                   	   Uint32ConvertHex(ptr2->pxStack,idletask.pstack_m);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <TaskMonitor+0x55c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	490d      	ldr	r1, [pc, #52]	; (8003934 <TaskMonitor+0x568>)
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fcee 	bl	80032e2 <Uint32ConvertHex>
		                   	   Uint32ConvertHex(ptr2->pxTopOfStack,idletask.topofpstack_m);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <TaskMonitor+0x55c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	490a      	ldr	r1, [pc, #40]	; (8003938 <TaskMonitor+0x56c>)
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fce7 	bl	80032e2 <Uint32ConvertHex>
		                   	   strcpy(idletask.state_m,"blocked2");
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <TaskMonitor+0x570>)
 8003916:	4a20      	ldr	r2, [pc, #128]	; (8003998 <TaskMonitor+0x5cc>)
 8003918:	ca07      	ldmia	r2, {r0, r1, r2}
 800391a:	c303      	stmia	r3!, {r0, r1}
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e106      	b.n	8003b2e <TaskMonitor+0x762>
 8003920:	200001ec 	.word	0x200001ec
 8003924:	200130b8 	.word	0x200130b8
 8003928:	20013114 	.word	0x20013114
 800392c:	080060a8 	.word	0x080060a8
 8003930:	200130e8 	.word	0x200130e8
 8003934:	200130f0 	.word	0x200130f0
 8003938:	200130fc 	.word	0x200130fc
 800393c:	20013108 	.word	0x20013108
 8003940:	080060e8 	.word	0x080060e8
 8003944:	080060b8 	.word	0x080060b8
 8003948:	20012fd0 	.word	0x20012fd0
 800394c:	20012fd8 	.word	0x20012fd8
 8003950:	20012fe4 	.word	0x20012fe4
 8003954:	20012ff0 	.word	0x20012ff0
 8003958:	080060c4 	.word	0x080060c4
 800395c:	20013044 	.word	0x20013044
 8003960:	2001304c 	.word	0x2001304c
 8003964:	20013058 	.word	0x20013058
 8003968:	20013064 	.word	0x20013064
 800396c:	080060d0 	.word	0x080060d0
 8003970:	200130bc 	.word	0x200130bc
 8003974:	200130c4 	.word	0x200130c4
 8003978:	200130d0 	.word	0x200130d0
 800397c:	200130dc 	.word	0x200130dc
 8003980:	080060dc 	.word	0x080060dc
 8003984:	20013160 	.word	0x20013160
 8003988:	20013168 	.word	0x20013168
 800398c:	20013174 	.word	0x20013174
 8003990:	20013180 	.word	0x20013180
 8003994:	200001f0 	.word	0x200001f0
 8003998:	080060f0 	.word	0x080060f0
		                      }
		                      else if(!strcmp(ptr2->pcTaskName,"green_bli"))
 800399c:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <TaskMonitor+0x6cc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3334      	adds	r3, #52	; 0x34
 80039a2:	493e      	ldr	r1, [pc, #248]	; (8003a9c <TaskMonitor+0x6d0>)
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fc13 	bl	80001d0 <strcmp>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11f      	bne.n	80039f0 <TaskMonitor+0x624>
		                      {
		                   	   greenblink.priority_actual=(int)ptr2->uxPriority;
 80039b0:	4b39      	ldr	r3, [pc, #228]	; (8003a98 <TaskMonitor+0x6cc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <TaskMonitor+0x6d4>)
 80039ba:	605a      	str	r2, [r3, #4]
		                   	   greenblink.priority_base=(int)ptr2->uxBasePriority;
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <TaskMonitor+0x6cc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <TaskMonitor+0x6d4>)
 80039c6:	601a      	str	r2, [r3, #0]
		                   	   Uint32ConvertHex(ptr2->pxStack,greenblink.pstack_m);
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <TaskMonitor+0x6cc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <TaskMonitor+0x6d8>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fc86 	bl	80032e2 <Uint32ConvertHex>
		                   	    Uint32ConvertHex(ptr2->pxTopOfStack,greenblink.topofpstack_m);
 80039d6:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <TaskMonitor+0x6cc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4932      	ldr	r1, [pc, #200]	; (8003aa8 <TaskMonitor+0x6dc>)
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fc7f 	bl	80032e2 <Uint32ConvertHex>
		                   	              	   strcpy(greenblink.state_m,"blocked2");
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <TaskMonitor+0x6e0>)
 80039e6:	4a32      	ldr	r2, [pc, #200]	; (8003ab0 <TaskMonitor+0x6e4>)
 80039e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ea:	c303      	stmia	r3!, {r0, r1}
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e09e      	b.n	8003b2e <TaskMonitor+0x762>
		                      }
		                      else if(!strcmp(ptr2->pcTaskName,"red_blink"))
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <TaskMonitor+0x6cc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3334      	adds	r3, #52	; 0x34
 80039f6:	492f      	ldr	r1, [pc, #188]	; (8003ab4 <TaskMonitor+0x6e8>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc fbe9 	bl	80001d0 <strcmp>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11f      	bne.n	8003a44 <TaskMonitor+0x678>
		                      {
		                   	   redblink.priority_actual=(int)ptr2->uxPriority;
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <TaskMonitor+0x6ec>)
 8003a0e:	605a      	str	r2, [r3, #4]
		                   	   redblink.priority_base=(int)ptr2->uxBasePriority;
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <TaskMonitor+0x6ec>)
 8003a1a:	601a      	str	r2, [r3, #0]
		                   	   Uint32ConvertHex(ptr2->pxStack,redblink.pstack_m);
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4926      	ldr	r1, [pc, #152]	; (8003abc <TaskMonitor+0x6f0>)
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fc5c 	bl	80032e2 <Uint32ConvertHex>
		                   	   Uint32ConvertHex(ptr2->pxTopOfStack,redblink.topofpstack_m);
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4923      	ldr	r1, [pc, #140]	; (8003ac0 <TaskMonitor+0x6f4>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fc55 	bl	80032e2 <Uint32ConvertHex>
		                   	   strcpy(redblink.state_m,"blocked2");
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <TaskMonitor+0x6f8>)
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <TaskMonitor+0x6e4>)
 8003a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a3e:	c303      	stmia	r3!, {r0, r1}
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e074      	b.n	8003b2e <TaskMonitor+0x762>
		                      }
		                      else if(!strcmp(ptr2->pcTaskName,"TaskMonit"))
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3334      	adds	r3, #52	; 0x34
 8003a4a:	491f      	ldr	r1, [pc, #124]	; (8003ac8 <TaskMonitor+0x6fc>)
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fbbf 	bl	80001d0 <strcmp>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d141      	bne.n	8003adc <TaskMonitor+0x710>
		                      {
		                   	   taskmonitor.priority_actual=(int)ptr2->uxPriority;
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <TaskMonitor+0x700>)
 8003a62:	605a      	str	r2, [r3, #4]
		                   	   taskmonitor.priority_base=(int)ptr2->uxBasePriority;
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <TaskMonitor+0x700>)
 8003a6e:	601a      	str	r2, [r3, #0]
		                   	   Uint32ConvertHex(ptr2->pxStack,taskmonitor.pstack_m);
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <TaskMonitor+0x704>)
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fc32 	bl	80032e2 <Uint32ConvertHex>
		                   	              	   Uint32ConvertHex(ptr2->pxTopOfStack,taskmonitor.topofpstack_m);
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <TaskMonitor+0x6cc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4913      	ldr	r1, [pc, #76]	; (8003ad4 <TaskMonitor+0x708>)
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fc2b 	bl	80032e2 <Uint32ConvertHex>
		                   	              	   strcpy(taskmonitor.state_m,"blocked2");
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <TaskMonitor+0x70c>)
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <TaskMonitor+0x6e4>)
 8003a90:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a92:	c303      	stmia	r3!, {r0, r1}
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e04a      	b.n	8003b2e <TaskMonitor+0x762>
 8003a98:	20013114 	.word	0x20013114
 8003a9c:	080060b8 	.word	0x080060b8
 8003aa0:	20012fd0 	.word	0x20012fd0
 8003aa4:	20012fd8 	.word	0x20012fd8
 8003aa8:	20012fe4 	.word	0x20012fe4
 8003aac:	20012ff0 	.word	0x20012ff0
 8003ab0:	080060f0 	.word	0x080060f0
 8003ab4:	080060c4 	.word	0x080060c4
 8003ab8:	20013044 	.word	0x20013044
 8003abc:	2001304c 	.word	0x2001304c
 8003ac0:	20013058 	.word	0x20013058
 8003ac4:	20013064 	.word	0x20013064
 8003ac8:	080060d0 	.word	0x080060d0
 8003acc:	200130bc 	.word	0x200130bc
 8003ad0:	200130c4 	.word	0x200130c4
 8003ad4:	200130d0 	.word	0x200130d0
 8003ad8:	200130dc 	.word	0x200130dc
		                      }
		                      else if(!strcmp(ptr2->pcTaskName,"task_dela"))
 8003adc:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <TaskMonitor+0x8b4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3334      	adds	r3, #52	; 0x34
 8003ae2:	4968      	ldr	r1, [pc, #416]	; (8003c84 <TaskMonitor+0x8b8>)
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fc fb73 	bl	80001d0 <strcmp>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d11e      	bne.n	8003b2e <TaskMonitor+0x762>
		                      {
		                   	   taskdelay.priority_actual=(int)ptr2->uxPriority;
 8003af0:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <TaskMonitor+0x8b4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <TaskMonitor+0x8bc>)
 8003afa:	605a      	str	r2, [r3, #4]
		                   	   taskdelay.priority_base=(int)ptr2->uxBasePriority;
 8003afc:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <TaskMonitor+0x8b4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <TaskMonitor+0x8bc>)
 8003b06:	601a      	str	r2, [r3, #0]
		                   	   Uint32ConvertHex(ptr2->pxStack,taskdelay.pstack_m);
 8003b08:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <TaskMonitor+0x8b4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	495f      	ldr	r1, [pc, #380]	; (8003c8c <TaskMonitor+0x8c0>)
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fbe6 	bl	80032e2 <Uint32ConvertHex>
		                   	             	   Uint32ConvertHex(ptr2->pxTopOfStack,taskdelay.topofpstack_m);
 8003b16:	4b5a      	ldr	r3, [pc, #360]	; (8003c80 <TaskMonitor+0x8b4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	495c      	ldr	r1, [pc, #368]	; (8003c90 <TaskMonitor+0x8c4>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fbdf 	bl	80032e2 <Uint32ConvertHex>
		                   	         	   strcpy(taskdelay.state_m,"blocked2");
 8003b24:	4b5b      	ldr	r3, [pc, #364]	; (8003c94 <TaskMonitor+0x8c8>)
 8003b26:	4a5c      	ldr	r2, [pc, #368]	; (8003c98 <TaskMonitor+0x8cc>)
 8003b28:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b2a:	c303      	stmia	r3!, {r0, r1}
 8003b2c:	701a      	strb	r2, [r3, #0]
		                      }
		               ptr=ptr->pxNext;
 8003b2e:	4b5b      	ldr	r3, [pc, #364]	; (8003c9c <TaskMonitor+0x8d0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a59      	ldr	r2, [pc, #356]	; (8003c9c <TaskMonitor+0x8d0>)
 8003b36:	6013      	str	r3, [r2, #0]
	for(i=0;i<listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);i++)   //take the state that is in overflow blocked
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <TaskMonitor+0x8d4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	f63f aeb6 	bhi.w	80038b8 <TaskMonitor+0x4ec>
	}

	sprintf(MonitorTset,"Name  |Priority(Base/actual)  |pxStack  |pxtopofstack   |state \n\r");
 8003b4c:	4a55      	ldr	r2, [pc, #340]	; (8003ca4 <TaskMonitor+0x8d8>)
 8003b4e:	4b56      	ldr	r3, [pc, #344]	; (8003ca8 <TaskMonitor+0x8dc>)
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	2342      	movs	r3, #66	; 0x42
 8003b56:	461a      	mov	r2, r3
 8003b58:	f001 fe72 	bl	8005840 <memcpy>
	sprintf(task_monitor,"task_m  %d/%d %s  %s  %s \n\r",taskmonitor.priority_base,taskmonitor.priority_actual,taskmonitor.pstack_m,taskmonitor.topofpstack_m,taskmonitor.state_m);
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <TaskMonitor+0x8e0>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b52      	ldr	r3, [pc, #328]	; (8003cac <TaskMonitor+0x8e0>)
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <TaskMonitor+0x8e4>)
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	4b52      	ldr	r3, [pc, #328]	; (8003cb4 <TaskMonitor+0x8e8>)
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <TaskMonitor+0x8ec>)
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	460b      	mov	r3, r1
 8003b72:	4952      	ldr	r1, [pc, #328]	; (8003cbc <TaskMonitor+0x8f0>)
 8003b74:	4852      	ldr	r0, [pc, #328]	; (8003cc0 <TaskMonitor+0x8f4>)
 8003b76:	f001 fe77 	bl	8005868 <siprintf>
	sprintf(idle_monitor,"idel_m %d/%d %s  %s  %s \n\r",idletask.priority_base,idletask.priority_actual,idletask.pstack_m,idletask.topofpstack_m,idletask.state_m);
 8003b7a:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <TaskMonitor+0x8f8>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b51      	ldr	r3, [pc, #324]	; (8003cc4 <TaskMonitor+0x8f8>)
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <TaskMonitor+0x8fc>)
 8003b84:	9302      	str	r3, [sp, #8]
 8003b86:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <TaskMonitor+0x900>)
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	4b51      	ldr	r3, [pc, #324]	; (8003cd0 <TaskMonitor+0x904>)
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4950      	ldr	r1, [pc, #320]	; (8003cd4 <TaskMonitor+0x908>)
 8003b92:	4851      	ldr	r0, [pc, #324]	; (8003cd8 <TaskMonitor+0x90c>)
 8003b94:	f001 fe68 	bl	8005868 <siprintf>
	sprintf(red_monitor,"red_m %d/%d %s  %s  %s \n\r",redblink.priority_base,redblink.priority_actual,redblink.pstack_m,redblink.topofpstack_m,redblink.state_m);
 8003b98:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <TaskMonitor+0x910>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <TaskMonitor+0x910>)
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <TaskMonitor+0x914>)
 8003ba2:	9302      	str	r3, [sp, #8]
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <TaskMonitor+0x918>)
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <TaskMonitor+0x91c>)
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	460b      	mov	r3, r1
 8003bae:	494f      	ldr	r1, [pc, #316]	; (8003cec <TaskMonitor+0x920>)
 8003bb0:	484f      	ldr	r0, [pc, #316]	; (8003cf0 <TaskMonitor+0x924>)
 8003bb2:	f001 fe59 	bl	8005868 <siprintf>
	sprintf(green_monitor,"green_m %d/%d %s  %s  %s \n\r",greenblink.priority_base,greenblink.priority_actual,greenblink.pstack_m,greenblink.topofpstack_m,greenblink.state_m);
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <TaskMonitor+0x928>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <TaskMonitor+0x928>)
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <TaskMonitor+0x92c>)
 8003bc0:	9302      	str	r3, [sp, #8]
 8003bc2:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <TaskMonitor+0x930>)
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	4b4e      	ldr	r3, [pc, #312]	; (8003d00 <TaskMonitor+0x934>)
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	494d      	ldr	r1, [pc, #308]	; (8003d04 <TaskMonitor+0x938>)
 8003bce:	484e      	ldr	r0, [pc, #312]	; (8003d08 <TaskMonitor+0x93c>)
 8003bd0:	f001 fe4a 	bl	8005868 <siprintf>
	sprintf(delay_monitor,"delay_m %d/%d %s  %s  %s \n\r",taskdelay.priority_base,taskdelay.priority_actual,taskdelay.pstack_m,taskdelay.topofpstack_m,taskdelay.state_m);
 8003bd4:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <TaskMonitor+0x8bc>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <TaskMonitor+0x8bc>)
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <TaskMonitor+0x8c8>)
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <TaskMonitor+0x8c4>)
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <TaskMonitor+0x8c0>)
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	460b      	mov	r3, r1
 8003bea:	4948      	ldr	r1, [pc, #288]	; (8003d0c <TaskMonitor+0x940>)
 8003bec:	4848      	ldr	r0, [pc, #288]	; (8003d10 <TaskMonitor+0x944>)
 8003bee:	f001 fe3b 	bl	8005868 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8003bf2:	482c      	ldr	r0, [pc, #176]	; (8003ca4 <TaskMonitor+0x8d8>)
 8003bf4:	f7fc faf6 	bl	80001e4 <strlen>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c00:	4928      	ldr	r1, [pc, #160]	; (8003ca4 <TaskMonitor+0x8d8>)
 8003c02:	4844      	ldr	r0, [pc, #272]	; (8003d14 <TaskMonitor+0x948>)
 8003c04:	f7fe f97d 	bl	8001f02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)task_monitor,strlen(task_monitor),0xffff);
 8003c08:	482d      	ldr	r0, [pc, #180]	; (8003cc0 <TaskMonitor+0x8f4>)
 8003c0a:	f7fc faeb 	bl	80001e4 <strlen>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c16:	492a      	ldr	r1, [pc, #168]	; (8003cc0 <TaskMonitor+0x8f4>)
 8003c18:	483e      	ldr	r0, [pc, #248]	; (8003d14 <TaskMonitor+0x948>)
 8003c1a:	f7fe f972 	bl	8001f02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)idle_monitor,strlen(idle_monitor),0xffff);
 8003c1e:	482e      	ldr	r0, [pc, #184]	; (8003cd8 <TaskMonitor+0x90c>)
 8003c20:	f7fc fae0 	bl	80001e4 <strlen>
 8003c24:	4603      	mov	r3, r0
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c2c:	492a      	ldr	r1, [pc, #168]	; (8003cd8 <TaskMonitor+0x90c>)
 8003c2e:	4839      	ldr	r0, [pc, #228]	; (8003d14 <TaskMonitor+0x948>)
 8003c30:	f7fe f967 	bl	8001f02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)red_monitor,strlen(red_monitor),0xffff);
 8003c34:	482e      	ldr	r0, [pc, #184]	; (8003cf0 <TaskMonitor+0x924>)
 8003c36:	f7fc fad5 	bl	80001e4 <strlen>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c42:	492b      	ldr	r1, [pc, #172]	; (8003cf0 <TaskMonitor+0x924>)
 8003c44:	4833      	ldr	r0, [pc, #204]	; (8003d14 <TaskMonitor+0x948>)
 8003c46:	f7fe f95c 	bl	8001f02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)green_monitor,strlen(green_monitor),0xffff);
 8003c4a:	482f      	ldr	r0, [pc, #188]	; (8003d08 <TaskMonitor+0x93c>)
 8003c4c:	f7fc faca 	bl	80001e4 <strlen>
 8003c50:	4603      	mov	r3, r0
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c58:	492b      	ldr	r1, [pc, #172]	; (8003d08 <TaskMonitor+0x93c>)
 8003c5a:	482e      	ldr	r0, [pc, #184]	; (8003d14 <TaskMonitor+0x948>)
 8003c5c:	f7fe f951 	bl	8001f02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)delay_monitor,strlen(delay_monitor),0xffff);
 8003c60:	482b      	ldr	r0, [pc, #172]	; (8003d10 <TaskMonitor+0x944>)
 8003c62:	f7fc fabf 	bl	80001e4 <strlen>
 8003c66:	4603      	mov	r3, r0
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6e:	4928      	ldr	r1, [pc, #160]	; (8003d10 <TaskMonitor+0x944>)
 8003c70:	4828      	ldr	r0, [pc, #160]	; (8003d14 <TaskMonitor+0x948>)
 8003c72:	f7fe f946 	bl	8001f02 <HAL_UART_Transmit>

}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20013114 	.word	0x20013114
 8003c84:	080060dc 	.word	0x080060dc
 8003c88:	20013160 	.word	0x20013160
 8003c8c:	20013168 	.word	0x20013168
 8003c90:	20013174 	.word	0x20013174
 8003c94:	20013180 	.word	0x20013180
 8003c98:	080060f0 	.word	0x080060f0
 8003c9c:	200130b8 	.word	0x200130b8
 8003ca0:	200001f0 	.word	0x200001f0
 8003ca4:	2001318c 	.word	0x2001318c
 8003ca8:	080060fc 	.word	0x080060fc
 8003cac:	200130bc 	.word	0x200130bc
 8003cb0:	200130dc 	.word	0x200130dc
 8003cb4:	200130d0 	.word	0x200130d0
 8003cb8:	200130c4 	.word	0x200130c4
 8003cbc:	08006140 	.word	0x08006140
 8003cc0:	20012ffc 	.word	0x20012ffc
 8003cc4:	200130e8 	.word	0x200130e8
 8003cc8:	20013108 	.word	0x20013108
 8003ccc:	200130fc 	.word	0x200130fc
 8003cd0:	200130f0 	.word	0x200130f0
 8003cd4:	0800615c 	.word	0x0800615c
 8003cd8:	20013118 	.word	0x20013118
 8003cdc:	20013044 	.word	0x20013044
 8003ce0:	20013064 	.word	0x20013064
 8003ce4:	20013058 	.word	0x20013058
 8003ce8:	2001304c 	.word	0x2001304c
 8003cec:	08006178 	.word	0x08006178
 8003cf0:	200131d4 	.word	0x200131d4
 8003cf4:	20012fd0 	.word	0x20012fd0
 8003cf8:	20012ff0 	.word	0x20012ff0
 8003cfc:	20012fe4 	.word	0x20012fe4
 8003d00:	20012fd8 	.word	0x20012fd8
 8003d04:	08006194 	.word	0x08006194
 8003d08:	20012f88 	.word	0x20012f88
 8003d0c:	080061b0 	.word	0x080061b0
 8003d10:	20013070 	.word	0x20013070
 8003d14:	20012ec4 	.word	0x20012ec4

08003d18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	21a5      	movs	r1, #165	; 0xa5
 8003d32:	f001 fd90 	bl	8005856 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d40:	3b01      	subs	r3, #1
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f023 0307 	bic.w	r3, r3, #7
 8003d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <prvInitialiseNewTask+0x56>
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e7fe      	b.n	8003d6c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01f      	beq.n	8003db4 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e012      	b.n	8003da0 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	7819      	ldrb	r1, [r3, #0]
 8003d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	3334      	adds	r3, #52	; 0x34
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	d9e9      	bls.n	8003d7a <prvInitialiseNewTask+0x62>
 8003da6:	e000      	b.n	8003daa <prvInitialiseNewTask+0x92>
			{
				break;
 8003da8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003db2:	e003      	b.n	8003dbc <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b0e      	cmp	r3, #14
 8003dc0:	d901      	bls.n	8003dc6 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dc2:	230e      	movs	r3, #14
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fd0f 	bl	8002800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	3318      	adds	r3, #24
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fd0a 	bl	8002800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	f1c3 020f 	rsb	r2, r3, #15
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	2200      	movs	r2, #0
 8003e06:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	69b8      	ldr	r0, [r7, #24]
 8003e16:	f001 f8c3 	bl	8004fa0 <pxPortInitialiseStack>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e2c:	bf00      	nop
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e3c:	f001 f9e6 	bl	800520c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e40:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <prvAddNewTaskToReadyList+0xc0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <prvAddNewTaskToReadyList+0xc0>)
 8003e48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e52:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e58:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <prvAddNewTaskToReadyList+0xc0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d110      	bne.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e60:	f000 fbec 	bl	800463c <prvInitialiseTaskLists>
 8003e64:	e00d      	b.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e66:	4b25      	ldr	r3, [pc, #148]	; (8003efc <prvAddNewTaskToReadyList+0xc8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d802      	bhi.n	8003e82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <prvAddNewTaskToReadyList+0xcc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <prvAddNewTaskToReadyList+0xcc>)
 8003e8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <prvAddNewTaskToReadyList+0xcc>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	2201      	movs	r2, #1
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <prvAddNewTaskToReadyList+0xd0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <prvAddNewTaskToReadyList+0xd0>)
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <prvAddNewTaskToReadyList+0xd4>)
 8003eb4:	441a      	add	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f7fe fcac 	bl	800281a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ec2:	f001 f9d1 	bl	8005268 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <prvAddNewTaskToReadyList+0xc8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00e      	beq.n	8003eec <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <prvAddNewTaskToReadyList+0xc4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d207      	bcs.n	8003eec <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <prvAddNewTaskToReadyList+0xd8>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000234 	.word	0x20000234
 8003ef8:	20000094 	.word	0x20000094
 8003efc:	20000240 	.word	0x20000240
 8003f00:	20000250 	.word	0x20000250
 8003f04:	2000023c 	.word	0x2000023c
 8003f08:	20000098 	.word	0x20000098
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <vTaskDelay+0x60>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <vTaskDelay+0x2e>
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	e7fe      	b.n	8003f3c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f3e:	f000 f867 	bl	8004010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fcb7 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f4a:	f000 f86f 	bl	800402c <xTaskResumeAll>
 8003f4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <vTaskDelay+0x64>)
 8003f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	2000025c 	.word	0x2000025c
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <vTaskStartScheduler+0x80>)
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	2282      	movs	r2, #130	; 0x82
 8003f8a:	491c      	ldr	r1, [pc, #112]	; (8003ffc <vTaskStartScheduler+0x84>)
 8003f8c:	481c      	ldr	r0, [pc, #112]	; (8004000 <vTaskStartScheduler+0x88>)
 8003f8e:	f7ff f967 	bl	8003260 <xTaskCreate>
 8003f92:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d102      	bne.n	8003fa0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003f9a:	f000 fcf3 	bl	8004984 <xTimerCreateTimerTask>
 8003f9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d115      	bne.n	8003fd2 <vTaskStartScheduler+0x5a>
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <vTaskStartScheduler+0x8c>)
 8003fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <vTaskStartScheduler+0x90>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <vTaskStartScheduler+0x94>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fcc:	f001 f870 	bl	80050b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fd0:	e00d      	b.n	8003fee <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd8:	d109      	bne.n	8003fee <vTaskStartScheduler+0x76>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e7fe      	b.n	8003fec <vTaskStartScheduler+0x74>
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000258 	.word	0x20000258
 8003ffc:	080060a8 	.word	0x080060a8
 8004000:	0800460d 	.word	0x0800460d
 8004004:	20000254 	.word	0x20000254
 8004008:	20000240 	.word	0x20000240
 800400c:	20000238 	.word	0x20000238

08004010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <vTaskSuspendAll+0x18>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	4a03      	ldr	r2, [pc, #12]	; (8004028 <vTaskSuspendAll+0x18>)
 800401c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	2000025c 	.word	0x2000025c

0800402c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <xTaskResumeAll+0x114>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <xTaskResumeAll+0x2a>
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	e7fe      	b.n	8004054 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004056:	f001 f8d9 	bl	800520c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800405a:	4b39      	ldr	r3, [pc, #228]	; (8004140 <xTaskResumeAll+0x114>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3b01      	subs	r3, #1
 8004060:	4a37      	ldr	r2, [pc, #220]	; (8004140 <xTaskResumeAll+0x114>)
 8004062:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004064:	4b36      	ldr	r3, [pc, #216]	; (8004140 <xTaskResumeAll+0x114>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d161      	bne.n	8004130 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <xTaskResumeAll+0x118>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d05d      	beq.n	8004130 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004074:	e02e      	b.n	80040d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004076:	4b34      	ldr	r3, [pc, #208]	; (8004148 <xTaskResumeAll+0x11c>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3318      	adds	r3, #24
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fc26 	bl	80028d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3304      	adds	r3, #4
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe fc21 	bl	80028d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2201      	movs	r2, #1
 8004098:	409a      	lsls	r2, r3
 800409a:	4b2c      	ldr	r3, [pc, #176]	; (800414c <xTaskResumeAll+0x120>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4313      	orrs	r3, r2
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <xTaskResumeAll+0x120>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <xTaskResumeAll+0x124>)
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fe fbad 	bl	800281a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <xTaskResumeAll+0x128>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d302      	bcc.n	80040d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80040ce:	4b22      	ldr	r3, [pc, #136]	; (8004158 <xTaskResumeAll+0x12c>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <xTaskResumeAll+0x11c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1cc      	bne.n	8004076 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040e2:	f000 fb27 	bl	8004734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <xTaskResumeAll+0x130>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040f2:	f000 f847 	bl	8004184 <xTaskIncrementTick>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <xTaskResumeAll+0x12c>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3b01      	subs	r3, #1
 8004106:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f1      	bne.n	80040f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <xTaskResumeAll+0x130>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <xTaskResumeAll+0x12c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <xTaskResumeAll+0x134>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004130:	f001 f89a 	bl	8005268 <vPortExitCritical>

	return xAlreadyYielded;
 8004134:	68bb      	ldr	r3, [r7, #8]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000025c 	.word	0x2000025c
 8004144:	20000234 	.word	0x20000234
 8004148:	200001f4 	.word	0x200001f4
 800414c:	2000023c 	.word	0x2000023c
 8004150:	20000098 	.word	0x20000098
 8004154:	20000094 	.word	0x20000094
 8004158:	20000248 	.word	0x20000248
 800415c:	20000244 	.word	0x20000244
 8004160:	e000ed04 	.word	0xe000ed04

08004164 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <xTaskGetTickCount+0x1c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004170:	687b      	ldr	r3, [r7, #4]
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000238 	.word	0x20000238

08004184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800418e:	4b4e      	ldr	r3, [pc, #312]	; (80042c8 <xTaskIncrementTick+0x144>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 8087 	bne.w	80042a6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <xTaskIncrementTick+0x148>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3301      	adds	r3, #1
 800419e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041a0:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <xTaskIncrementTick+0x148>)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d11f      	bne.n	80041ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <xTaskIncrementTick+0x46>
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	e7fe      	b.n	80041c8 <xTaskIncrementTick+0x44>
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <xTaskIncrementTick+0x150>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3e      	ldr	r2, [pc, #248]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4a3e      	ldr	r2, [pc, #248]	; (80042d4 <xTaskIncrementTick+0x150>)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <xTaskIncrementTick+0x154>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <xTaskIncrementTick+0x154>)
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	f000 faa4 	bl	8004734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041ec:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <xTaskIncrementTick+0x158>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d348      	bcc.n	8004288 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004200:	4b36      	ldr	r3, [pc, #216]	; (80042dc <xTaskIncrementTick+0x158>)
 8004202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004206:	601a      	str	r2, [r3, #0]
					break;
 8004208:	e03e      	b.n	8004288 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420a:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <xTaskIncrementTick+0x14c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d203      	bcs.n	800422a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004222:	4a2e      	ldr	r2, [pc, #184]	; (80042dc <xTaskIncrementTick+0x158>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004228:	e02e      	b.n	8004288 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3304      	adds	r3, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fb50 	bl	80028d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	d004      	beq.n	8004246 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	3318      	adds	r3, #24
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fb47 	bl	80028d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	2201      	movs	r2, #1
 800424c:	409a      	lsls	r2, r3
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <xTaskIncrementTick+0x15c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <xTaskIncrementTick+0x15c>)
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <xTaskIncrementTick+0x160>)
 8004266:	441a      	add	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f7fe fad3 	bl	800281a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <xTaskIncrementTick+0x164>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	429a      	cmp	r2, r3
 8004280:	d3b9      	bcc.n	80041f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004282:	2301      	movs	r3, #1
 8004284:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004286:	e7b6      	b.n	80041f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <xTaskIncrementTick+0x164>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	4915      	ldr	r1, [pc, #84]	; (80042e4 <xTaskIncrementTick+0x160>)
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d907      	bls.n	80042b0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e004      	b.n	80042b0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <xTaskIncrementTick+0x168>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3301      	adds	r3, #1
 80042ac:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <xTaskIncrementTick+0x168>)
 80042ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <xTaskIncrementTick+0x16c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80042bc:	697b      	ldr	r3, [r7, #20]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2000025c 	.word	0x2000025c
 80042cc:	20000238 	.word	0x20000238
 80042d0:	200001ec 	.word	0x200001ec
 80042d4:	200001f0 	.word	0x200001f0
 80042d8:	2000024c 	.word	0x2000024c
 80042dc:	20000254 	.word	0x20000254
 80042e0:	2000023c 	.word	0x2000023c
 80042e4:	20000098 	.word	0x20000098
 80042e8:	20000094 	.word	0x20000094
 80042ec:	20000244 	.word	0x20000244
 80042f0:	20000248 	.word	0x20000248

080042f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042fa:	4b26      	ldr	r3, [pc, #152]	; (8004394 <vTaskSwitchContext+0xa0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004302:	4b25      	ldr	r3, [pc, #148]	; (8004398 <vTaskSwitchContext+0xa4>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004308:	e03e      	b.n	8004388 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <vTaskSwitchContext+0xa4>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004310:	4b22      	ldr	r3, [pc, #136]	; (800439c <vTaskSwitchContext+0xa8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	fab3 f383 	clz	r3, r3
 800431c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800431e:	7afb      	ldrb	r3, [r7, #11]
 8004320:	f1c3 031f 	rsb	r3, r3, #31
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	491e      	ldr	r1, [pc, #120]	; (80043a0 <vTaskSwitchContext+0xac>)
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <vTaskSwitchContext+0x5a>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e7fe      	b.n	800434c <vTaskSwitchContext+0x58>
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <vTaskSwitchContext+0xac>)
 800435a:	4413      	add	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3308      	adds	r3, #8
 8004370:	429a      	cmp	r2, r3
 8004372:	d104      	bne.n	800437e <vTaskSwitchContext+0x8a>
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <vTaskSwitchContext+0xb0>)
 8004386:	6013      	str	r3, [r2, #0]
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	2000025c 	.word	0x2000025c
 8004398:	20000248 	.word	0x20000248
 800439c:	2000023c 	.word	0x2000023c
 80043a0:	20000098 	.word	0x20000098
 80043a4:	20000094 	.word	0x20000094

080043a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <vTaskPlaceOnEventList+0x24>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e7fe      	b.n	80043ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <vTaskPlaceOnEventList+0x44>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3318      	adds	r3, #24
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7fe fa44 	bl	8002862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043da:	2101      	movs	r1, #1
 80043dc:	6838      	ldr	r0, [r7, #0]
 80043de:	f000 fa6b 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000094 	.word	0x20000094

080043f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <vTaskPlaceOnEventListRestricted+0x26>
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e7fe      	b.n	8004414 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <vTaskPlaceOnEventListRestricted+0x50>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3318      	adds	r3, #24
 800441c:	4619      	mov	r1, r3
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7fe f9fb 	bl	800281a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800442e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	68b8      	ldr	r0, [r7, #8]
 8004434:	f000 fa40 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
	}
 8004438:	bf00      	nop
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000094 	.word	0x20000094

08004444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <xTaskRemoveFromEventList+0x2a>
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e7fe      	b.n	800446c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3318      	adds	r3, #24
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fa2e 	bl	80028d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <xTaskRemoveFromEventList+0xac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11c      	bne.n	80044ba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fa25 	bl	80028d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	2201      	movs	r2, #1
 8004490:	409a      	lsls	r2, r3
 8004492:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <xTaskRemoveFromEventList+0xb0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <xTaskRemoveFromEventList+0xb0>)
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <xTaskRemoveFromEventList+0xb4>)
 80044aa:	441a      	add	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7fe f9b1 	bl	800281a <vListInsertEnd>
 80044b8:	e005      	b.n	80044c6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3318      	adds	r3, #24
 80044be:	4619      	mov	r1, r3
 80044c0:	480e      	ldr	r0, [pc, #56]	; (80044fc <xTaskRemoveFromEventList+0xb8>)
 80044c2:	f7fe f9aa 	bl	800281a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <xTaskRemoveFromEventList+0xbc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d905      	bls.n	80044e0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <xTaskRemoveFromEventList+0xc0>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e001      	b.n	80044e4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044e4:	697b      	ldr	r3, [r7, #20]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000025c 	.word	0x2000025c
 80044f4:	2000023c 	.word	0x2000023c
 80044f8:	20000098 	.word	0x20000098
 80044fc:	200001f4 	.word	0x200001f4
 8004500:	20000094 	.word	0x20000094
 8004504:	20000248 	.word	0x20000248

08004508 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <vTaskInternalSetTimeOutState+0x24>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <vTaskInternalSetTimeOutState+0x28>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	605a      	str	r2, [r3, #4]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	2000024c 	.word	0x2000024c
 8004530:	20000238 	.word	0x20000238

08004534 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <xTaskCheckForTimeOut+0x24>
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	e7fe      	b.n	8004556 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <xTaskCheckForTimeOut+0x3e>
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e7fe      	b.n	8004570 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004572:	f000 fe4b 	bl	800520c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <xTaskCheckForTimeOut+0xb8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800458e:	d102      	bne.n	8004596 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e023      	b.n	80045de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <xTaskCheckForTimeOut+0xbc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d007      	beq.n	80045b2 <xTaskCheckForTimeOut+0x7e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e015      	b.n	80045de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d20b      	bcs.n	80045d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	1ad2      	subs	r2, r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff9d 	bl	8004508 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e004      	b.n	80045de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045da:	2301      	movs	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045de:	f000 fe43 	bl	8005268 <vPortExitCritical>

	return xReturn;
 80045e2:	69fb      	ldr	r3, [r7, #28]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000238 	.word	0x20000238
 80045f0:	2000024c 	.word	0x2000024c

080045f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <vTaskMissedYield+0x14>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
}
 80045fe:	bf00      	nop
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	20000248 	.word	0x20000248

0800460c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004614:	f000 f852 	bl	80046bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <prvIdleTask+0x28>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d9f9      	bls.n	8004614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <prvIdleTask+0x2c>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004630:	e7f0      	b.n	8004614 <prvIdleTask+0x8>
 8004632:	bf00      	nop
 8004634:	20000098 	.word	0x20000098
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	e00c      	b.n	8004662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <prvInitialiseTaskLists+0x60>)
 8004654:	4413      	add	r3, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe f8b2 	bl	80027c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3301      	adds	r3, #1
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b0e      	cmp	r3, #14
 8004666:	d9ef      	bls.n	8004648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004668:	480d      	ldr	r0, [pc, #52]	; (80046a0 <prvInitialiseTaskLists+0x64>)
 800466a:	f7fe f8a9 	bl	80027c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800466e:	480d      	ldr	r0, [pc, #52]	; (80046a4 <prvInitialiseTaskLists+0x68>)
 8004670:	f7fe f8a6 	bl	80027c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004674:	480c      	ldr	r0, [pc, #48]	; (80046a8 <prvInitialiseTaskLists+0x6c>)
 8004676:	f7fe f8a3 	bl	80027c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800467a:	480c      	ldr	r0, [pc, #48]	; (80046ac <prvInitialiseTaskLists+0x70>)
 800467c:	f7fe f8a0 	bl	80027c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004680:	480b      	ldr	r0, [pc, #44]	; (80046b0 <prvInitialiseTaskLists+0x74>)
 8004682:	f7fe f89d 	bl	80027c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <prvInitialiseTaskLists+0x78>)
 8004688:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <prvInitialiseTaskLists+0x64>)
 800468a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <prvInitialiseTaskLists+0x7c>)
 800468e:	4a05      	ldr	r2, [pc, #20]	; (80046a4 <prvInitialiseTaskLists+0x68>)
 8004690:	601a      	str	r2, [r3, #0]
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000098 	.word	0x20000098
 80046a0:	200001c4 	.word	0x200001c4
 80046a4:	200001d8 	.word	0x200001d8
 80046a8:	200001f4 	.word	0x200001f4
 80046ac:	20000208 	.word	0x20000208
 80046b0:	20000220 	.word	0x20000220
 80046b4:	200001ec 	.word	0x200001ec
 80046b8:	200001f0 	.word	0x200001f0

080046bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046c2:	e019      	b.n	80046f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046c4:	f000 fda2 	bl	800520c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <prvCheckTasksWaitingTermination+0x4c>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe f8fd 	bl	80028d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <prvCheckTasksWaitingTermination+0x50>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3b01      	subs	r3, #1
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <prvCheckTasksWaitingTermination+0x50>)
 80046e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <prvCheckTasksWaitingTermination+0x54>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <prvCheckTasksWaitingTermination+0x54>)
 80046ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046ee:	f000 fdbb 	bl	8005268 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f80e 	bl	8004714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <prvCheckTasksWaitingTermination+0x54>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e1      	bne.n	80046c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000208 	.word	0x20000208
 800470c:	20000234 	.word	0x20000234
 8004710:	2000021c 	.word	0x2000021c

08004714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	4618      	mov	r0, r3
 8004722:	f000 ff4f 	bl	80055c4 <vPortFree>
			vPortFree( pxTCB );
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 ff4c 	bl	80055c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <prvResetNextTaskUnblockTime+0x38>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <prvResetNextTaskUnblockTime+0x3c>)
 8004746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800474a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800474c:	e008      	b.n	8004760 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <prvResetNextTaskUnblockTime+0x38>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <prvResetNextTaskUnblockTime+0x3c>)
 800475e:	6013      	str	r3, [r2, #0]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	200001ec 	.word	0x200001ec
 8004770:	20000254 	.word	0x20000254

08004774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <xTaskGetSchedulerState+0x34>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004782:	2301      	movs	r3, #1
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	e008      	b.n	800479a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <xTaskGetSchedulerState+0x38>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004790:	2302      	movs	r3, #2
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	e001      	b.n	800479a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800479a:	687b      	ldr	r3, [r7, #4]
	}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	20000240 	.word	0x20000240
 80047ac:	2000025c 	.word	0x2000025c

080047b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d06c      	beq.n	80048a0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <xTaskPriorityDisinherit+0xfc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d009      	beq.n	80047e4 <xTaskPriorityDisinherit+0x34>
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e7fe      	b.n	80047e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <xTaskPriorityDisinherit+0x50>
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	e7fe      	b.n	80047fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004804:	1e5a      	subs	r2, r3, #1
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004812:	429a      	cmp	r2, r3
 8004814:	d044      	beq.n	80048a0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d140      	bne.n	80048a0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3304      	adds	r3, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe f856 	bl	80028d4 <uxListRemove>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d115      	bne.n	800485a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004832:	491f      	ldr	r1, [pc, #124]	; (80048b0 <xTaskPriorityDisinherit+0x100>)
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xTaskPriorityDisinherit+0xaa>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	2201      	movs	r2, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43da      	mvns	r2, r3
 8004850:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <xTaskPriorityDisinherit+0x104>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4013      	ands	r3, r2
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <xTaskPriorityDisinherit+0x104>)
 8004858:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	f1c3 020f 	rsb	r2, r3, #15
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	2201      	movs	r2, #1
 8004874:	409a      	lsls	r2, r3
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <xTaskPriorityDisinherit+0x104>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <xTaskPriorityDisinherit+0x104>)
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <xTaskPriorityDisinherit+0x100>)
 800488e:	441a      	add	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3304      	adds	r3, #4
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f7fd ffbf 	bl	800281a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048a0:	697b      	ldr	r3, [r7, #20]
	}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000094 	.word	0x20000094
 80048b0:	20000098 	.word	0x20000098
 80048b4:	2000023c 	.word	0x2000023c

080048b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <prvAddCurrentTaskToDelayedList+0xb0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe f800 	bl	80028d4 <uxListRemove>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10b      	bne.n	80048f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048da:	4b24      	ldr	r3, [pc, #144]	; (800496c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	2201      	movs	r2, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43da      	mvns	r2, r3
 80048e8:	4b21      	ldr	r3, [pc, #132]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	4a20      	ldr	r2, [pc, #128]	; (8004970 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f8:	d10a      	bne.n	8004910 <prvAddCurrentTaskToDelayedList+0x58>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004900:	4b1a      	ldr	r3, [pc, #104]	; (800496c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	481a      	ldr	r0, [pc, #104]	; (8004974 <prvAddCurrentTaskToDelayedList+0xbc>)
 800490a:	f7fd ff86 	bl	800281a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800490e:	e026      	b.n	800495e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004918:	4b14      	ldr	r3, [pc, #80]	; (800496c <prvAddCurrentTaskToDelayedList+0xb4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d209      	bcs.n	800493c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <prvAddCurrentTaskToDelayedList+0xc0>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <prvAddCurrentTaskToDelayedList+0xb4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3304      	adds	r3, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f7fd ff94 	bl	8002862 <vListInsert>
}
 800493a:	e010      	b.n	800495e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <prvAddCurrentTaskToDelayedList+0xc4>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7fd ff8a 	bl	8002862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d202      	bcs.n	800495e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <prvAddCurrentTaskToDelayedList+0xc8>)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6013      	str	r3, [r2, #0]
}
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000238 	.word	0x20000238
 800496c:	20000094 	.word	0x20000094
 8004970:	2000023c 	.word	0x2000023c
 8004974:	20000220 	.word	0x20000220
 8004978:	200001f0 	.word	0x200001f0
 800497c:	200001ec 	.word	0x200001ec
 8004980:	20000254 	.word	0x20000254

08004984 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800498a:	2300      	movs	r3, #0
 800498c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800498e:	f000 fad1 	bl	8004f34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <xTimerCreateTimerTask+0x54>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <xTimerCreateTimerTask+0x58>)
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	2302      	movs	r3, #2
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049a8:	490d      	ldr	r1, [pc, #52]	; (80049e0 <xTimerCreateTimerTask+0x5c>)
 80049aa:	480e      	ldr	r0, [pc, #56]	; (80049e4 <xTimerCreateTimerTask+0x60>)
 80049ac:	f7fe fc58 	bl	8003260 <xTaskCreate>
 80049b0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <xTimerCreateTimerTask+0x48>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	e7fe      	b.n	80049ca <xTimerCreateTimerTask+0x46>
	return xReturn;
 80049cc:	687b      	ldr	r3, [r7, #4]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000290 	.word	0x20000290
 80049dc:	20000294 	.word	0x20000294
 80049e0:	080061cc 	.word	0x080061cc
 80049e4:	08004b19 	.word	0x08004b19

080049e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <xTimerGenericCommand+0x2c>
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	e7fe      	b.n	8004a12 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <xTimerGenericCommand+0x94>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d02a      	beq.n	8004a72 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	dc18      	bgt.n	8004a60 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a2e:	f7ff fea1 	bl	8004774 <xTaskGetSchedulerState>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d109      	bne.n	8004a4c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a38:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <xTimerGenericCommand+0x94>)
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	f107 0114 	add.w	r1, r7, #20
 8004a40:	2300      	movs	r3, #0
 8004a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a44:	f7fe f836 	bl	8002ab4 <xQueueGenericSend>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24
 8004a4a:	e012      	b.n	8004a72 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <xTimerGenericCommand+0x94>)
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	f107 0114 	add.w	r1, r7, #20
 8004a54:	2300      	movs	r3, #0
 8004a56:	2200      	movs	r2, #0
 8004a58:	f7fe f82c 	bl	8002ab4 <xQueueGenericSend>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24
 8004a5e:	e008      	b.n	8004a72 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <xTimerGenericCommand+0x94>)
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	f107 0114 	add.w	r1, r7, #20
 8004a68:	2300      	movs	r3, #0
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	f7fe f91c 	bl	8002ca8 <xQueueGenericSendFromISR>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3728      	adds	r7, #40	; 0x28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000290 	.word	0x20000290

08004a80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <prvProcessExpiredTimer+0x94>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fd ff1b 	bl	80028d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d021      	beq.n	8004af0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	18d1      	adds	r1, r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	6978      	ldr	r0, [r7, #20]
 8004aba:	f000 f8d1 	bl	8004c60 <prvInsertTimerInActiveList>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01e      	beq.n	8004b02 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	2100      	movs	r1, #0
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f7ff ff8a 	bl	80049e8 <xTimerGenericCommand>
 8004ad4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d112      	bne.n	8004b02 <prvProcessExpiredTimer+0x82>
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e7fe      	b.n	8004aee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	6978      	ldr	r0, [r7, #20]
 8004b08:	4798      	blx	r3
}
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000288 	.word	0x20000288

08004b18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f857 	bl	8004bd8 <prvGetNextExpireTime>
 8004b2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f803 	bl	8004b3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b36:	f000 f8d5 	bl	8004ce4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b3a:	e7f1      	b.n	8004b20 <prvTimerTask+0x8>

08004b3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b46:	f7ff fa63 	bl	8004010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f866 	bl	8004c20 <prvSampleTimeNow>
 8004b54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d130      	bne.n	8004bbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <prvProcessTimerOrBlockTask+0x3c>
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d806      	bhi.n	8004b78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b6a:	f7ff fa5f 	bl	800402c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff85 	bl	8004a80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b76:	e024      	b.n	8004bc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <prvProcessTimerOrBlockTask+0x90>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <prvProcessTimerOrBlockTask+0x50>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <prvProcessTimerOrBlockTask+0x52>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <prvProcessTimerOrBlockTask+0x94>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f7fe fb2b 	bl	80031f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ba2:	f7ff fa43 	bl	800402c <xTaskResumeAll>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <prvProcessTimerOrBlockTask+0x98>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
}
 8004bbc:	e001      	b.n	8004bc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bbe:	f7ff fa35 	bl	800402c <xTaskResumeAll>
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	2000028c 	.word	0x2000028c
 8004bd0:	20000290 	.word	0x20000290
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004be0:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <prvGetNextExpireTime+0x44>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <prvGetNextExpireTime+0x16>
 8004bea:	2201      	movs	r2, #1
 8004bec:	e000      	b.n	8004bf0 <prvGetNextExpireTime+0x18>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <prvGetNextExpireTime+0x44>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e001      	b.n	8004c0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000288 	.word	0x20000288

08004c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c28:	f7ff fa9c 	bl	8004164 <xTaskGetTickCount>
 8004c2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <prvSampleTimeNow+0x3c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d205      	bcs.n	8004c44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c38:	f000 f918 	bl	8004e6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e002      	b.n	8004c4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c4a:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <prvSampleTimeNow+0x3c>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c50:	68fb      	ldr	r3, [r7, #12]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000298 	.word	0x20000298

08004c60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d812      	bhi.n	8004cac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	1ad2      	subs	r2, r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e01b      	b.n	8004cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c9a:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <prvInsertTimerInActiveList+0x7c>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7fd fddc 	bl	8002862 <vListInsert>
 8004caa:	e012      	b.n	8004cd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d206      	bcs.n	8004cc2 <prvInsertTimerInActiveList+0x62>
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e007      	b.n	8004cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <prvInsertTimerInActiveList+0x80>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fd fdc8 	bl	8002862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cd2:	697b      	ldr	r3, [r7, #20]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	2000028c 	.word	0x2000028c
 8004ce0:	20000288 	.word	0x20000288

08004ce4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cea:	e0ac      	b.n	8004e46 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f2c0 80a8 	blt.w	8004e44 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fd fde5 	bl	80028d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff ff87 	bl	8004c20 <prvSampleTimeNow>
 8004d12:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b09      	cmp	r3, #9
 8004d18:	f200 8095 	bhi.w	8004e46 <prvProcessReceivedCommands+0x162>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <prvProcessReceivedCommands+0x40>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08004dbf 	.word	0x08004dbf
 8004d34:	08004dd3 	.word	0x08004dd3
 8004d38:	08004e1b 	.word	0x08004e1b
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d4d 	.word	0x08004d4d
 8004d44:	08004dbf 	.word	0x08004dbf
 8004d48:	08004dd3 	.word	0x08004dd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	18d1      	adds	r1, r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d6c:	f7ff ff78 	bl	8004c60 <prvInsertTimerInActiveList>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d067      	beq.n	8004e46 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d05c      	beq.n	8004e46 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	441a      	add	r2, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d9e:	f7ff fe23 	bl	80049e8 <xTimerGenericCommand>
 8004da2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d14d      	bne.n	8004e46 <prvProcessReceivedCommands+0x162>
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e7fe      	b.n	8004dbc <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004dd0:	e039      	b.n	8004e46 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <prvProcessReceivedCommands+0x122>
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e7fe      	b.n	8004e04 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	18d1      	adds	r1, r2, r3
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e14:	f7ff ff24 	bl	8004c60 <prvInsertTimerInActiveList>
					break;
 8004e18:	e015      	b.n	8004e46 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e2a:	f000 fbcb 	bl	80055c4 <vPortFree>
 8004e2e:	e00a      	b.n	8004e46 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e42:	e000      	b.n	8004e46 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <prvProcessReceivedCommands+0x184>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f107 0108 	add.w	r1, r7, #8
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fd ffbd 	bl	8002dd0 <xQueueReceive>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f af47 	bne.w	8004cec <prvProcessReceivedCommands+0x8>
	}
}
 8004e5e:	bf00      	nop
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000290 	.word	0x20000290

08004e6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e72:	e047      	b.n	8004f04 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fd fd21 	bl	80028d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02d      	beq.n	8004f04 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d90e      	bls.n	8004ed8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fd fcc6 	bl	8002862 <vListInsert>
 8004ed6:	e015      	b.n	8004f04 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	2300      	movs	r3, #0
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff fd80 	bl	80049e8 <xTimerGenericCommand>
 8004ee8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <prvSwitchTimerLists+0x98>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	e7fe      	b.n	8004f02 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1b2      	bne.n	8004e74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <prvSwitchTimerLists+0xc4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <prvSwitchTimerLists+0xc0>)
 8004f1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f1c:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <prvSwitchTimerLists+0xc4>)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	6013      	str	r3, [r2, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000288 	.word	0x20000288
 8004f30:	2000028c 	.word	0x2000028c

08004f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f38:	f000 f968 	bl	800520c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11d      	bne.n	8004f80 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f44:	4811      	ldr	r0, [pc, #68]	; (8004f8c <prvCheckForValidListAndQueue+0x58>)
 8004f46:	f7fd fc3b 	bl	80027c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f4a:	4811      	ldr	r0, [pc, #68]	; (8004f90 <prvCheckForValidListAndQueue+0x5c>)
 8004f4c:	f7fd fc38 	bl	80027c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f50:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <prvCheckForValidListAndQueue+0x60>)
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <prvCheckForValidListAndQueue+0x58>)
 8004f54:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <prvCheckForValidListAndQueue+0x64>)
 8004f58:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <prvCheckForValidListAndQueue+0x5c>)
 8004f5a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	210c      	movs	r1, #12
 8004f60:	200a      	movs	r0, #10
 8004f62:	f7fd fd49 	bl	80029f8 <xQueueGenericCreate>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f6a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <prvCheckForValidListAndQueue+0x54>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4908      	ldr	r1, [pc, #32]	; (8004f9c <prvCheckForValidListAndQueue+0x68>)
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe f914 	bl	80031a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f80:	f000 f972 	bl	8005268 <vPortExitCritical>
}
 8004f84:	bf00      	nop
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000290 	.word	0x20000290
 8004f8c:	20000260 	.word	0x20000260
 8004f90:	20000274 	.word	0x20000274
 8004f94:	20000288 	.word	0x20000288
 8004f98:	2000028c 	.word	0x2000028c
 8004f9c:	080061d4 	.word	0x080061d4

08004fa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <pxPortInitialiseStack+0x64>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b14      	subs	r3, #20
 8004fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f06f 0202 	mvn.w	r2, #2
 8004fee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b20      	subs	r3, #32
 8004ff4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	08005009 	.word	0x08005009

08005008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005012:	4b11      	ldr	r3, [pc, #68]	; (8005058 <prvTaskExitError+0x50>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501a:	d009      	beq.n	8005030 <prvTaskExitError+0x28>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e7fe      	b.n	800502e <prvTaskExitError+0x26>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005042:	bf00      	nop
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0fc      	beq.n	8005044 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c
 800505c:	00000000 	.word	0x00000000

08005060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <pxCurrentTCBConst2>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	6808      	ldr	r0, [r1, #0]
 8005066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	f380 8809 	msr	PSP, r0
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	4770      	bx	lr
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst2>:
 8005080:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005088:	4808      	ldr	r0, [pc, #32]	; (80050ac <prvPortStartFirstTask+0x24>)
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f380 8808 	msr	MSP, r0
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8814 	msr	CONTROL, r0
 800509a:	b662      	cpsie	i
 800509c:	b661      	cpsie	f
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	df00      	svc	0
 80050a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050aa:	bf00      	nop
 80050ac:	e000ed08 	.word	0xe000ed08

080050b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050b6:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <xPortStartScheduler+0x138>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4c      	ldr	r2, [pc, #304]	; (80051ec <xPortStartScheduler+0x13c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d109      	bne.n	80050d4 <xPortStartScheduler+0x24>
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e7fe      	b.n	80050d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050d4:	4b44      	ldr	r3, [pc, #272]	; (80051e8 <xPortStartScheduler+0x138>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a45      	ldr	r2, [pc, #276]	; (80051f0 <xPortStartScheduler+0x140>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d109      	bne.n	80050f2 <xPortStartScheduler+0x42>
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e7fe      	b.n	80050f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050f2:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <xPortStartScheduler+0x144>)
 80050f4:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <xPortStartScheduler+0x148>)
 8005118:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <xPortStartScheduler+0x14c>)
 800511c:	2207      	movs	r2, #7
 800511e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005120:	e009      	b.n	8005136 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005122:	4b36      	ldr	r3, [pc, #216]	; (80051fc <xPortStartScheduler+0x14c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3b01      	subs	r3, #1
 8005128:	4a34      	ldr	r2, [pc, #208]	; (80051fc <xPortStartScheduler+0x14c>)
 800512a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	b2db      	uxtb	r3, r3
 8005134:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d0ef      	beq.n	8005122 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8005142:	4b2e      	ldr	r3, [pc, #184]	; (80051fc <xPortStartScheduler+0x14c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1c3 0307 	rsb	r3, r3, #7
 800514a:	2b04      	cmp	r3, #4
 800514c:	d009      	beq.n	8005162 <xPortStartScheduler+0xb2>
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e7fe      	b.n	8005160 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005162:	4b26      	ldr	r3, [pc, #152]	; (80051fc <xPortStartScheduler+0x14c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1c3 0307 	rsb	r3, r3, #7
 800516a:	2b04      	cmp	r3, #4
 800516c:	d009      	beq.n	8005182 <xPortStartScheduler+0xd2>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e7fe      	b.n	8005180 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005182:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <xPortStartScheduler+0x14c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <xPortStartScheduler+0x14c>)
 800518a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <xPortStartScheduler+0x14c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005194:	4a19      	ldr	r2, [pc, #100]	; (80051fc <xPortStartScheduler+0x14c>)
 8005196:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051a0:	4b17      	ldr	r3, [pc, #92]	; (8005200 <xPortStartScheduler+0x150>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a16      	ldr	r2, [pc, #88]	; (8005200 <xPortStartScheduler+0x150>)
 80051a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ac:	4b14      	ldr	r3, [pc, #80]	; (8005200 <xPortStartScheduler+0x150>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <xPortStartScheduler+0x150>)
 80051b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051b8:	f000 f8d6 	bl	8005368 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <xPortStartScheduler+0x154>)
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051c2:	f000 f8f5 	bl	80053b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <xPortStartScheduler+0x158>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0f      	ldr	r2, [pc, #60]	; (8005208 <xPortStartScheduler+0x158>)
 80051cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051d2:	f7ff ff59 	bl	8005088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051d6:	f7ff f88d 	bl	80042f4 <vTaskSwitchContext>
	prvTaskExitError();
 80051da:	f7ff ff15 	bl	8005008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed00 	.word	0xe000ed00
 80051ec:	410fc271 	.word	0x410fc271
 80051f0:	410fc270 	.word	0x410fc270
 80051f4:	e000e400 	.word	0xe000e400
 80051f8:	2000029c 	.word	0x2000029c
 80051fc:	200002a0 	.word	0x200002a0
 8005200:	e000ed20 	.word	0xe000ed20
 8005204:	2000000c 	.word	0x2000000c
 8005208:	e000ef34 	.word	0xe000ef34

0800520c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <vPortEnterCritical+0x54>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	4a0d      	ldr	r2, [pc, #52]	; (8005260 <vPortEnterCritical+0x54>)
 800522c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <vPortEnterCritical+0x54>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10e      	bne.n	8005254 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <vPortEnterCritical+0x58>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <vPortEnterCritical+0x48>
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	e7fe      	b.n	8005252 <vPortEnterCritical+0x46>
	}
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	2000000c 	.word	0x2000000c
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <vPortExitCritical+0x4c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <vPortExitCritical+0x22>
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	e7fe      	b.n	8005288 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <vPortExitCritical+0x4c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3b01      	subs	r3, #1
 8005290:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <vPortExitCritical+0x4c>)
 8005292:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <vPortExitCritical+0x4c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <vPortExitCritical+0x3e>
 800529c:	2300      	movs	r3, #0
 800529e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000000c 	.word	0x2000000c
	...

080052c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052c0:	f3ef 8009 	mrs	r0, PSP
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4b15      	ldr	r3, [pc, #84]	; (8005320 <pxCurrentTCBConst>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	f01e 0f10 	tst.w	lr, #16
 80052d0:	bf08      	it	eq
 80052d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	6010      	str	r0, [r2, #0]
 80052dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052e4:	f380 8811 	msr	BASEPRI, r0
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f7ff f800 	bl	80042f4 <vTaskSwitchContext>
 80052f4:	f04f 0000 	mov.w	r0, #0
 80052f8:	f380 8811 	msr	BASEPRI, r0
 80052fc:	bc09      	pop	{r0, r3}
 80052fe:	6819      	ldr	r1, [r3, #0]
 8005300:	6808      	ldr	r0, [r1, #0]
 8005302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005306:	f01e 0f10 	tst.w	lr, #16
 800530a:	bf08      	it	eq
 800530c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005310:	f380 8809 	msr	PSP, r0
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	f3af 8000 	nop.w

08005320 <pxCurrentTCBConst>:
 8005320:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005340:	f7fe ff20 	bl	8004184 <xTaskIncrementTick>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800534a:	4b06      	ldr	r3, [pc, #24]	; (8005364 <SysTick_Handler+0x3c>)
 800534c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	2300      	movs	r3, #0
 8005354:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <vPortSetupTimerInterrupt+0x34>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <vPortSetupTimerInterrupt+0x38>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <vPortSetupTimerInterrupt+0x3c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <vPortSetupTimerInterrupt+0x40>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	4a09      	ldr	r2, [pc, #36]	; (80053ac <vPortSetupTimerInterrupt+0x44>)
 8005386:	3b01      	subs	r3, #1
 8005388:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800538a:	4b04      	ldr	r3, [pc, #16]	; (800539c <vPortSetupTimerInterrupt+0x34>)
 800538c:	2207      	movs	r2, #7
 800538e:	601a      	str	r2, [r3, #0]
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000e010 	.word	0xe000e010
 80053a0:	e000e018 	.word	0xe000e018
 80053a4:	20000000 	.word	0x20000000
 80053a8:	10624dd3 	.word	0x10624dd3
 80053ac:	e000e014 	.word	0xe000e014

080053b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053c0 <vPortEnableVFP+0x10>
 80053b4:	6801      	ldr	r1, [r0, #0]
 80053b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053ba:	6001      	str	r1, [r0, #0]
 80053bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053be:	bf00      	nop
 80053c0:	e000ed88 	.word	0xe000ed88

080053c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053ca:	f3ef 8305 	mrs	r3, IPSR
 80053ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d913      	bls.n	80053fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053d6:	4a16      	ldr	r2, [pc, #88]	; (8005430 <vPortValidateInterruptPriority+0x6c>)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053e0:	4b14      	ldr	r3, [pc, #80]	; (8005434 <vPortValidateInterruptPriority+0x70>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	7afa      	ldrb	r2, [r7, #11]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d209      	bcs.n	80053fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	e7fe      	b.n	80053fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <vPortValidateInterruptPriority+0x74>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <vPortValidateInterruptPriority+0x78>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d909      	bls.n	8005422 <vPortValidateInterruptPriority+0x5e>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	e7fe      	b.n	8005420 <vPortValidateInterruptPriority+0x5c>
	}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e3f0 	.word	0xe000e3f0
 8005434:	2000029c 	.word	0x2000029c
 8005438:	e000ed0c 	.word	0xe000ed0c
 800543c:	200002a0 	.word	0x200002a0

08005440 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800544c:	f7fe fde0 	bl	8004010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005450:	4b57      	ldr	r3, [pc, #348]	; (80055b0 <pvPortMalloc+0x170>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005458:	f000 f90c 	bl	8005674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800545c:	4b55      	ldr	r3, [pc, #340]	; (80055b4 <pvPortMalloc+0x174>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	f040 808c 	bne.w	8005582 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01c      	beq.n	80054aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005470:	2208      	movs	r2, #8
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f023 0307 	bic.w	r3, r3, #7
 8005488:	3308      	adds	r3, #8
 800548a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <pvPortMalloc+0x6a>
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e7fe      	b.n	80054a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d068      	beq.n	8005582 <pvPortMalloc+0x142>
 80054b0:	4b41      	ldr	r3, [pc, #260]	; (80055b8 <pvPortMalloc+0x178>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d863      	bhi.n	8005582 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054ba:	4b40      	ldr	r3, [pc, #256]	; (80055bc <pvPortMalloc+0x17c>)
 80054bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054be:	4b3f      	ldr	r3, [pc, #252]	; (80055bc <pvPortMalloc+0x17c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054c4:	e004      	b.n	80054d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d903      	bls.n	80054e2 <pvPortMalloc+0xa2>
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f1      	bne.n	80054c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <pvPortMalloc+0x170>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d04a      	beq.n	8005582 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2208      	movs	r2, #8
 80054f2:	4413      	add	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad2      	subs	r2, r2, r3
 8005506:	2308      	movs	r3, #8
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	429a      	cmp	r2, r3
 800550c:	d91e      	bls.n	800554c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <pvPortMalloc+0xf4>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e7fe      	b.n	8005532 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1ad2      	subs	r2, r2, r3
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005546:	69b8      	ldr	r0, [r7, #24]
 8005548:	f000 f8f6 	bl	8005738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <pvPortMalloc+0x178>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <pvPortMalloc+0x178>)
 8005558:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800555a:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <pvPortMalloc+0x178>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <pvPortMalloc+0x180>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d203      	bcs.n	800556e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <pvPortMalloc+0x178>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <pvPortMalloc+0x180>)
 800556c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <pvPortMalloc+0x174>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	431a      	orrs	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005582:	f7fe fd53 	bl	800402c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <pvPortMalloc+0x164>
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e7fe      	b.n	80055a2 <pvPortMalloc+0x162>
	return pvReturn;
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3728      	adds	r7, #40	; 0x28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20012eac 	.word	0x20012eac
 80055b4:	20012eb8 	.word	0x20012eb8
 80055b8:	20012eb0 	.word	0x20012eb0
 80055bc:	20012ea4 	.word	0x20012ea4
 80055c0:	20012eb4 	.word	0x20012eb4

080055c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d046      	beq.n	8005664 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055d6:	2308      	movs	r3, #8
 80055d8:	425b      	negs	r3, r3
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4413      	add	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	4b20      	ldr	r3, [pc, #128]	; (800566c <vPortFree+0xa8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <vPortFree+0x42>
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e7fe      	b.n	8005604 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <vPortFree+0x5e>
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	e7fe      	b.n	8005620 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4b11      	ldr	r3, [pc, #68]	; (800566c <vPortFree+0xa8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d019      	beq.n	8005664 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d115      	bne.n	8005664 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <vPortFree+0xa8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005648:	f7fe fce2 	bl	8004010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <vPortFree+0xac>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4413      	add	r3, r2
 8005656:	4a06      	ldr	r2, [pc, #24]	; (8005670 <vPortFree+0xac>)
 8005658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800565a:	6938      	ldr	r0, [r7, #16]
 800565c:	f000 f86c 	bl	8005738 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005660:	f7fe fce4 	bl	800402c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005664:	bf00      	nop
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20012eb8 	.word	0x20012eb8
 8005670:	20012eb0 	.word	0x20012eb0

08005674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800567a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800567e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005680:	4b27      	ldr	r3, [pc, #156]	; (8005720 <prvHeapInit+0xac>)
 8005682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3307      	adds	r3, #7
 8005692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <prvHeapInit+0xac>)
 80056a4:	4413      	add	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056ac:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <prvHeapInit+0xb0>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <prvHeapInit+0xb0>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	4413      	add	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056c0:	2208      	movs	r2, #8
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0307 	bic.w	r3, r3, #7
 80056ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a15      	ldr	r2, [pc, #84]	; (8005728 <prvHeapInit+0xb4>)
 80056d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <prvHeapInit+0xb4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056de:	4b12      	ldr	r3, [pc, #72]	; (8005728 <prvHeapInit+0xb4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <prvHeapInit+0xb4>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	4a0a      	ldr	r2, [pc, #40]	; (800572c <prvHeapInit+0xb8>)
 8005702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a09      	ldr	r2, [pc, #36]	; (8005730 <prvHeapInit+0xbc>)
 800570a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <prvHeapInit+0xc0>)
 800570e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	200002a4 	.word	0x200002a4
 8005724:	20012ea4 	.word	0x20012ea4
 8005728:	20012eac 	.word	0x20012eac
 800572c:	20012eb4 	.word	0x20012eb4
 8005730:	20012eb0 	.word	0x20012eb0
 8005734:	20012eb8 	.word	0x20012eb8

08005738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005740:	4b28      	ldr	r3, [pc, #160]	; (80057e4 <prvInsertBlockIntoFreeList+0xac>)
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e002      	b.n	800574c <prvInsertBlockIntoFreeList+0x14>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d8f7      	bhi.n	8005746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	4413      	add	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	429a      	cmp	r2, r3
 8005766:	d108      	bne.n	800577a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	441a      	add	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d118      	bne.n	80057c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d00d      	beq.n	80057b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	441a      	add	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e008      	b.n	80057c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <prvInsertBlockIntoFreeList+0xb0>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e003      	b.n	80057c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d002      	beq.n	80057d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20012ea4 	.word	0x20012ea4
 80057e8:	20012eac 	.word	0x20012eac

080057ec <__errno>:
 80057ec:	4b01      	ldr	r3, [pc, #4]	; (80057f4 <__errno+0x8>)
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000010 	.word	0x20000010

080057f8 <__libc_init_array>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4e0d      	ldr	r6, [pc, #52]	; (8005830 <__libc_init_array+0x38>)
 80057fc:	4c0d      	ldr	r4, [pc, #52]	; (8005834 <__libc_init_array+0x3c>)
 80057fe:	1ba4      	subs	r4, r4, r6
 8005800:	10a4      	asrs	r4, r4, #2
 8005802:	2500      	movs	r5, #0
 8005804:	42a5      	cmp	r5, r4
 8005806:	d109      	bne.n	800581c <__libc_init_array+0x24>
 8005808:	4e0b      	ldr	r6, [pc, #44]	; (8005838 <__libc_init_array+0x40>)
 800580a:	4c0c      	ldr	r4, [pc, #48]	; (800583c <__libc_init_array+0x44>)
 800580c:	f000 fc28 	bl	8006060 <_init>
 8005810:	1ba4      	subs	r4, r4, r6
 8005812:	10a4      	asrs	r4, r4, #2
 8005814:	2500      	movs	r5, #0
 8005816:	42a5      	cmp	r5, r4
 8005818:	d105      	bne.n	8005826 <__libc_init_array+0x2e>
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005820:	4798      	blx	r3
 8005822:	3501      	adds	r5, #1
 8005824:	e7ee      	b.n	8005804 <__libc_init_array+0xc>
 8005826:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800582a:	4798      	blx	r3
 800582c:	3501      	adds	r5, #1
 800582e:	e7f2      	b.n	8005816 <__libc_init_array+0x1e>
 8005830:	08006230 	.word	0x08006230
 8005834:	08006230 	.word	0x08006230
 8005838:	08006230 	.word	0x08006230
 800583c:	08006234 	.word	0x08006234

08005840 <memcpy>:
 8005840:	b510      	push	{r4, lr}
 8005842:	1e43      	subs	r3, r0, #1
 8005844:	440a      	add	r2, r1
 8005846:	4291      	cmp	r1, r2
 8005848:	d100      	bne.n	800584c <memcpy+0xc>
 800584a:	bd10      	pop	{r4, pc}
 800584c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005854:	e7f7      	b.n	8005846 <memcpy+0x6>

08005856 <memset>:
 8005856:	4402      	add	r2, r0
 8005858:	4603      	mov	r3, r0
 800585a:	4293      	cmp	r3, r2
 800585c:	d100      	bne.n	8005860 <memset+0xa>
 800585e:	4770      	bx	lr
 8005860:	f803 1b01 	strb.w	r1, [r3], #1
 8005864:	e7f9      	b.n	800585a <memset+0x4>
	...

08005868 <siprintf>:
 8005868:	b40e      	push	{r1, r2, r3}
 800586a:	b500      	push	{lr}
 800586c:	b09c      	sub	sp, #112	; 0x70
 800586e:	ab1d      	add	r3, sp, #116	; 0x74
 8005870:	9002      	str	r0, [sp, #8]
 8005872:	9006      	str	r0, [sp, #24]
 8005874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005878:	4809      	ldr	r0, [pc, #36]	; (80058a0 <siprintf+0x38>)
 800587a:	9107      	str	r1, [sp, #28]
 800587c:	9104      	str	r1, [sp, #16]
 800587e:	4909      	ldr	r1, [pc, #36]	; (80058a4 <siprintf+0x3c>)
 8005880:	f853 2b04 	ldr.w	r2, [r3], #4
 8005884:	9105      	str	r1, [sp, #20]
 8005886:	6800      	ldr	r0, [r0, #0]
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	a902      	add	r1, sp, #8
 800588c:	f000 f866 	bl	800595c <_svfiprintf_r>
 8005890:	9b02      	ldr	r3, [sp, #8]
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	b01c      	add	sp, #112	; 0x70
 8005898:	f85d eb04 	ldr.w	lr, [sp], #4
 800589c:	b003      	add	sp, #12
 800589e:	4770      	bx	lr
 80058a0:	20000010 	.word	0x20000010
 80058a4:	ffff0208 	.word	0xffff0208

080058a8 <__ssputs_r>:
 80058a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	688e      	ldr	r6, [r1, #8]
 80058ae:	429e      	cmp	r6, r3
 80058b0:	4682      	mov	sl, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	4690      	mov	r8, r2
 80058b6:	4699      	mov	r9, r3
 80058b8:	d837      	bhi.n	800592a <__ssputs_r+0x82>
 80058ba:	898a      	ldrh	r2, [r1, #12]
 80058bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058c0:	d031      	beq.n	8005926 <__ssputs_r+0x7e>
 80058c2:	6825      	ldr	r5, [r4, #0]
 80058c4:	6909      	ldr	r1, [r1, #16]
 80058c6:	1a6f      	subs	r7, r5, r1
 80058c8:	6965      	ldr	r5, [r4, #20]
 80058ca:	2302      	movs	r3, #2
 80058cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80058d4:	f109 0301 	add.w	r3, r9, #1
 80058d8:	443b      	add	r3, r7
 80058da:	429d      	cmp	r5, r3
 80058dc:	bf38      	it	cc
 80058de:	461d      	movcc	r5, r3
 80058e0:	0553      	lsls	r3, r2, #21
 80058e2:	d530      	bpl.n	8005946 <__ssputs_r+0x9e>
 80058e4:	4629      	mov	r1, r5
 80058e6:	f000 fb21 	bl	8005f2c <_malloc_r>
 80058ea:	4606      	mov	r6, r0
 80058ec:	b950      	cbnz	r0, 8005904 <__ssputs_r+0x5c>
 80058ee:	230c      	movs	r3, #12
 80058f0:	f8ca 3000 	str.w	r3, [sl]
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005904:	463a      	mov	r2, r7
 8005906:	6921      	ldr	r1, [r4, #16]
 8005908:	f7ff ff9a 	bl	8005840 <memcpy>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	6126      	str	r6, [r4, #16]
 800591a:	6165      	str	r5, [r4, #20]
 800591c:	443e      	add	r6, r7
 800591e:	1bed      	subs	r5, r5, r7
 8005920:	6026      	str	r6, [r4, #0]
 8005922:	60a5      	str	r5, [r4, #8]
 8005924:	464e      	mov	r6, r9
 8005926:	454e      	cmp	r6, r9
 8005928:	d900      	bls.n	800592c <__ssputs_r+0x84>
 800592a:	464e      	mov	r6, r9
 800592c:	4632      	mov	r2, r6
 800592e:	4641      	mov	r1, r8
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	f000 fa93 	bl	8005e5c <memmove>
 8005936:	68a3      	ldr	r3, [r4, #8]
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	60a3      	str	r3, [r4, #8]
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	441e      	add	r6, r3
 8005940:	6026      	str	r6, [r4, #0]
 8005942:	2000      	movs	r0, #0
 8005944:	e7dc      	b.n	8005900 <__ssputs_r+0x58>
 8005946:	462a      	mov	r2, r5
 8005948:	f000 fb4a 	bl	8005fe0 <_realloc_r>
 800594c:	4606      	mov	r6, r0
 800594e:	2800      	cmp	r0, #0
 8005950:	d1e2      	bne.n	8005918 <__ssputs_r+0x70>
 8005952:	6921      	ldr	r1, [r4, #16]
 8005954:	4650      	mov	r0, sl
 8005956:	f000 fa9b 	bl	8005e90 <_free_r>
 800595a:	e7c8      	b.n	80058ee <__ssputs_r+0x46>

0800595c <_svfiprintf_r>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	461d      	mov	r5, r3
 8005962:	898b      	ldrh	r3, [r1, #12]
 8005964:	061f      	lsls	r7, r3, #24
 8005966:	b09d      	sub	sp, #116	; 0x74
 8005968:	4680      	mov	r8, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4616      	mov	r6, r2
 800596e:	d50f      	bpl.n	8005990 <_svfiprintf_r+0x34>
 8005970:	690b      	ldr	r3, [r1, #16]
 8005972:	b96b      	cbnz	r3, 8005990 <_svfiprintf_r+0x34>
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	f000 fad9 	bl	8005f2c <_malloc_r>
 800597a:	6020      	str	r0, [r4, #0]
 800597c:	6120      	str	r0, [r4, #16]
 800597e:	b928      	cbnz	r0, 800598c <_svfiprintf_r+0x30>
 8005980:	230c      	movs	r3, #12
 8005982:	f8c8 3000 	str.w	r3, [r8]
 8005986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800598a:	e0c8      	b.n	8005b1e <_svfiprintf_r+0x1c2>
 800598c:	2340      	movs	r3, #64	; 0x40
 800598e:	6163      	str	r3, [r4, #20]
 8005990:	2300      	movs	r3, #0
 8005992:	9309      	str	r3, [sp, #36]	; 0x24
 8005994:	2320      	movs	r3, #32
 8005996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800599a:	2330      	movs	r3, #48	; 0x30
 800599c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059a0:	9503      	str	r5, [sp, #12]
 80059a2:	f04f 0b01 	mov.w	fp, #1
 80059a6:	4637      	mov	r7, r6
 80059a8:	463d      	mov	r5, r7
 80059aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059ae:	b10b      	cbz	r3, 80059b4 <_svfiprintf_r+0x58>
 80059b0:	2b25      	cmp	r3, #37	; 0x25
 80059b2:	d13e      	bne.n	8005a32 <_svfiprintf_r+0xd6>
 80059b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80059b8:	d00b      	beq.n	80059d2 <_svfiprintf_r+0x76>
 80059ba:	4653      	mov	r3, sl
 80059bc:	4632      	mov	r2, r6
 80059be:	4621      	mov	r1, r4
 80059c0:	4640      	mov	r0, r8
 80059c2:	f7ff ff71 	bl	80058a8 <__ssputs_r>
 80059c6:	3001      	adds	r0, #1
 80059c8:	f000 80a4 	beq.w	8005b14 <_svfiprintf_r+0x1b8>
 80059cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ce:	4453      	add	r3, sl
 80059d0:	9309      	str	r3, [sp, #36]	; 0x24
 80059d2:	783b      	ldrb	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 809d 	beq.w	8005b14 <_svfiprintf_r+0x1b8>
 80059da:	2300      	movs	r3, #0
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ec:	931a      	str	r3, [sp, #104]	; 0x68
 80059ee:	462f      	mov	r7, r5
 80059f0:	2205      	movs	r2, #5
 80059f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80059f6:	4850      	ldr	r0, [pc, #320]	; (8005b38 <_svfiprintf_r+0x1dc>)
 80059f8:	f7fa fc02 	bl	8000200 <memchr>
 80059fc:	9b04      	ldr	r3, [sp, #16]
 80059fe:	b9d0      	cbnz	r0, 8005a36 <_svfiprintf_r+0xda>
 8005a00:	06d9      	lsls	r1, r3, #27
 8005a02:	bf44      	itt	mi
 8005a04:	2220      	movmi	r2, #32
 8005a06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a0a:	071a      	lsls	r2, r3, #28
 8005a0c:	bf44      	itt	mi
 8005a0e:	222b      	movmi	r2, #43	; 0x2b
 8005a10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a14:	782a      	ldrb	r2, [r5, #0]
 8005a16:	2a2a      	cmp	r2, #42	; 0x2a
 8005a18:	d015      	beq.n	8005a46 <_svfiprintf_r+0xea>
 8005a1a:	9a07      	ldr	r2, [sp, #28]
 8005a1c:	462f      	mov	r7, r5
 8005a1e:	2000      	movs	r0, #0
 8005a20:	250a      	movs	r5, #10
 8005a22:	4639      	mov	r1, r7
 8005a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a28:	3b30      	subs	r3, #48	; 0x30
 8005a2a:	2b09      	cmp	r3, #9
 8005a2c:	d94d      	bls.n	8005aca <_svfiprintf_r+0x16e>
 8005a2e:	b1b8      	cbz	r0, 8005a60 <_svfiprintf_r+0x104>
 8005a30:	e00f      	b.n	8005a52 <_svfiprintf_r+0xf6>
 8005a32:	462f      	mov	r7, r5
 8005a34:	e7b8      	b.n	80059a8 <_svfiprintf_r+0x4c>
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <_svfiprintf_r+0x1dc>)
 8005a38:	1a80      	subs	r0, r0, r2
 8005a3a:	fa0b f000 	lsl.w	r0, fp, r0
 8005a3e:	4318      	orrs	r0, r3
 8005a40:	9004      	str	r0, [sp, #16]
 8005a42:	463d      	mov	r5, r7
 8005a44:	e7d3      	b.n	80059ee <_svfiprintf_r+0x92>
 8005a46:	9a03      	ldr	r2, [sp, #12]
 8005a48:	1d11      	adds	r1, r2, #4
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	9103      	str	r1, [sp, #12]
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	db01      	blt.n	8005a56 <_svfiprintf_r+0xfa>
 8005a52:	9207      	str	r2, [sp, #28]
 8005a54:	e004      	b.n	8005a60 <_svfiprintf_r+0x104>
 8005a56:	4252      	negs	r2, r2
 8005a58:	f043 0302 	orr.w	r3, r3, #2
 8005a5c:	9207      	str	r2, [sp, #28]
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	783b      	ldrb	r3, [r7, #0]
 8005a62:	2b2e      	cmp	r3, #46	; 0x2e
 8005a64:	d10c      	bne.n	8005a80 <_svfiprintf_r+0x124>
 8005a66:	787b      	ldrb	r3, [r7, #1]
 8005a68:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6a:	d133      	bne.n	8005ad4 <_svfiprintf_r+0x178>
 8005a6c:	9b03      	ldr	r3, [sp, #12]
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	9203      	str	r2, [sp, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bfb8      	it	lt
 8005a78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a7c:	3702      	adds	r7, #2
 8005a7e:	9305      	str	r3, [sp, #20]
 8005a80:	4d2e      	ldr	r5, [pc, #184]	; (8005b3c <_svfiprintf_r+0x1e0>)
 8005a82:	7839      	ldrb	r1, [r7, #0]
 8005a84:	2203      	movs	r2, #3
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7fa fbba 	bl	8000200 <memchr>
 8005a8c:	b138      	cbz	r0, 8005a9e <_svfiprintf_r+0x142>
 8005a8e:	2340      	movs	r3, #64	; 0x40
 8005a90:	1b40      	subs	r0, r0, r5
 8005a92:	fa03 f000 	lsl.w	r0, r3, r0
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	4303      	orrs	r3, r0
 8005a9a:	3701      	adds	r7, #1
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	7839      	ldrb	r1, [r7, #0]
 8005aa0:	4827      	ldr	r0, [pc, #156]	; (8005b40 <_svfiprintf_r+0x1e4>)
 8005aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aa6:	2206      	movs	r2, #6
 8005aa8:	1c7e      	adds	r6, r7, #1
 8005aaa:	f7fa fba9 	bl	8000200 <memchr>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d038      	beq.n	8005b24 <_svfiprintf_r+0x1c8>
 8005ab2:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <_svfiprintf_r+0x1e8>)
 8005ab4:	bb13      	cbnz	r3, 8005afc <_svfiprintf_r+0x1a0>
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	3307      	adds	r3, #7
 8005aba:	f023 0307 	bic.w	r3, r3, #7
 8005abe:	3308      	adds	r3, #8
 8005ac0:	9303      	str	r3, [sp, #12]
 8005ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac4:	444b      	add	r3, r9
 8005ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac8:	e76d      	b.n	80059a6 <_svfiprintf_r+0x4a>
 8005aca:	fb05 3202 	mla	r2, r5, r2, r3
 8005ace:	2001      	movs	r0, #1
 8005ad0:	460f      	mov	r7, r1
 8005ad2:	e7a6      	b.n	8005a22 <_svfiprintf_r+0xc6>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	3701      	adds	r7, #1
 8005ad8:	9305      	str	r3, [sp, #20]
 8005ada:	4619      	mov	r1, r3
 8005adc:	250a      	movs	r5, #10
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ae4:	3a30      	subs	r2, #48	; 0x30
 8005ae6:	2a09      	cmp	r2, #9
 8005ae8:	d903      	bls.n	8005af2 <_svfiprintf_r+0x196>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0c8      	beq.n	8005a80 <_svfiprintf_r+0x124>
 8005aee:	9105      	str	r1, [sp, #20]
 8005af0:	e7c6      	b.n	8005a80 <_svfiprintf_r+0x124>
 8005af2:	fb05 2101 	mla	r1, r5, r1, r2
 8005af6:	2301      	movs	r3, #1
 8005af8:	4607      	mov	r7, r0
 8005afa:	e7f0      	b.n	8005ade <_svfiprintf_r+0x182>
 8005afc:	ab03      	add	r3, sp, #12
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	4622      	mov	r2, r4
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <_svfiprintf_r+0x1ec>)
 8005b04:	a904      	add	r1, sp, #16
 8005b06:	4640      	mov	r0, r8
 8005b08:	f3af 8000 	nop.w
 8005b0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b10:	4681      	mov	r9, r0
 8005b12:	d1d6      	bne.n	8005ac2 <_svfiprintf_r+0x166>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	065b      	lsls	r3, r3, #25
 8005b18:	f53f af35 	bmi.w	8005986 <_svfiprintf_r+0x2a>
 8005b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b1e:	b01d      	add	sp, #116	; 0x74
 8005b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b24:	ab03      	add	r3, sp, #12
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <_svfiprintf_r+0x1ec>)
 8005b2c:	a904      	add	r1, sp, #16
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f000 f882 	bl	8005c38 <_printf_i>
 8005b34:	e7ea      	b.n	8005b0c <_svfiprintf_r+0x1b0>
 8005b36:	bf00      	nop
 8005b38:	080061f4 	.word	0x080061f4
 8005b3c:	080061fa 	.word	0x080061fa
 8005b40:	080061fe 	.word	0x080061fe
 8005b44:	00000000 	.word	0x00000000
 8005b48:	080058a9 	.word	0x080058a9

08005b4c <_printf_common>:
 8005b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	4691      	mov	r9, r2
 8005b52:	461f      	mov	r7, r3
 8005b54:	688a      	ldr	r2, [r1, #8]
 8005b56:	690b      	ldr	r3, [r1, #16]
 8005b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bfb8      	it	lt
 8005b60:	4613      	movlt	r3, r2
 8005b62:	f8c9 3000 	str.w	r3, [r9]
 8005b66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	b112      	cbz	r2, 8005b76 <_printf_common+0x2a>
 8005b70:	3301      	adds	r3, #1
 8005b72:	f8c9 3000 	str.w	r3, [r9]
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	0699      	lsls	r1, r3, #26
 8005b7a:	bf42      	ittt	mi
 8005b7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b80:	3302      	addmi	r3, #2
 8005b82:	f8c9 3000 	strmi.w	r3, [r9]
 8005b86:	6825      	ldr	r5, [r4, #0]
 8005b88:	f015 0506 	ands.w	r5, r5, #6
 8005b8c:	d107      	bne.n	8005b9e <_printf_common+0x52>
 8005b8e:	f104 0a19 	add.w	sl, r4, #25
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	f8d9 2000 	ldr.w	r2, [r9]
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	42ab      	cmp	r3, r5
 8005b9c:	dc28      	bgt.n	8005bf0 <_printf_common+0xa4>
 8005b9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	3300      	adds	r3, #0
 8005ba6:	bf18      	it	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	0692      	lsls	r2, r2, #26
 8005bac:	d42d      	bmi.n	8005c0a <_printf_common+0xbe>
 8005bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	47c0      	blx	r8
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d020      	beq.n	8005bfe <_printf_common+0xb2>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	68e5      	ldr	r5, [r4, #12]
 8005bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8005bc4:	f003 0306 	and.w	r3, r3, #6
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	bf08      	it	eq
 8005bcc:	1aad      	subeq	r5, r5, r2
 8005bce:	68a3      	ldr	r3, [r4, #8]
 8005bd0:	6922      	ldr	r2, [r4, #16]
 8005bd2:	bf0c      	ite	eq
 8005bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd8:	2500      	movne	r5, #0
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	bfc4      	itt	gt
 8005bde:	1a9b      	subgt	r3, r3, r2
 8005be0:	18ed      	addgt	r5, r5, r3
 8005be2:	f04f 0900 	mov.w	r9, #0
 8005be6:	341a      	adds	r4, #26
 8005be8:	454d      	cmp	r5, r9
 8005bea:	d11a      	bne.n	8005c22 <_printf_common+0xd6>
 8005bec:	2000      	movs	r0, #0
 8005bee:	e008      	b.n	8005c02 <_printf_common+0xb6>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4652      	mov	r2, sl
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d103      	bne.n	8005c06 <_printf_common+0xba>
 8005bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c06:	3501      	adds	r5, #1
 8005c08:	e7c3      	b.n	8005b92 <_printf_common+0x46>
 8005c0a:	18e1      	adds	r1, r4, r3
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	2030      	movs	r0, #48	; 0x30
 8005c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c14:	4422      	add	r2, r4
 8005c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c1e:	3302      	adds	r3, #2
 8005c20:	e7c5      	b.n	8005bae <_printf_common+0x62>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4622      	mov	r2, r4
 8005c26:	4639      	mov	r1, r7
 8005c28:	4630      	mov	r0, r6
 8005c2a:	47c0      	blx	r8
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d0e6      	beq.n	8005bfe <_printf_common+0xb2>
 8005c30:	f109 0901 	add.w	r9, r9, #1
 8005c34:	e7d8      	b.n	8005be8 <_printf_common+0x9c>
	...

08005c38 <_printf_i>:
 8005c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c40:	460c      	mov	r4, r1
 8005c42:	7e09      	ldrb	r1, [r1, #24]
 8005c44:	b085      	sub	sp, #20
 8005c46:	296e      	cmp	r1, #110	; 0x6e
 8005c48:	4617      	mov	r7, r2
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	4698      	mov	r8, r3
 8005c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c50:	f000 80b3 	beq.w	8005dba <_printf_i+0x182>
 8005c54:	d822      	bhi.n	8005c9c <_printf_i+0x64>
 8005c56:	2963      	cmp	r1, #99	; 0x63
 8005c58:	d036      	beq.n	8005cc8 <_printf_i+0x90>
 8005c5a:	d80a      	bhi.n	8005c72 <_printf_i+0x3a>
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	f000 80b9 	beq.w	8005dd4 <_printf_i+0x19c>
 8005c62:	2958      	cmp	r1, #88	; 0x58
 8005c64:	f000 8083 	beq.w	8005d6e <_printf_i+0x136>
 8005c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c70:	e032      	b.n	8005cd8 <_printf_i+0xa0>
 8005c72:	2964      	cmp	r1, #100	; 0x64
 8005c74:	d001      	beq.n	8005c7a <_printf_i+0x42>
 8005c76:	2969      	cmp	r1, #105	; 0x69
 8005c78:	d1f6      	bne.n	8005c68 <_printf_i+0x30>
 8005c7a:	6820      	ldr	r0, [r4, #0]
 8005c7c:	6813      	ldr	r3, [r2, #0]
 8005c7e:	0605      	lsls	r5, r0, #24
 8005c80:	f103 0104 	add.w	r1, r3, #4
 8005c84:	d52a      	bpl.n	8005cdc <_printf_i+0xa4>
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6011      	str	r1, [r2, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	da03      	bge.n	8005c96 <_printf_i+0x5e>
 8005c8e:	222d      	movs	r2, #45	; 0x2d
 8005c90:	425b      	negs	r3, r3
 8005c92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c96:	486f      	ldr	r0, [pc, #444]	; (8005e54 <_printf_i+0x21c>)
 8005c98:	220a      	movs	r2, #10
 8005c9a:	e039      	b.n	8005d10 <_printf_i+0xd8>
 8005c9c:	2973      	cmp	r1, #115	; 0x73
 8005c9e:	f000 809d 	beq.w	8005ddc <_printf_i+0x1a4>
 8005ca2:	d808      	bhi.n	8005cb6 <_printf_i+0x7e>
 8005ca4:	296f      	cmp	r1, #111	; 0x6f
 8005ca6:	d020      	beq.n	8005cea <_printf_i+0xb2>
 8005ca8:	2970      	cmp	r1, #112	; 0x70
 8005caa:	d1dd      	bne.n	8005c68 <_printf_i+0x30>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	f043 0320 	orr.w	r3, r3, #32
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	e003      	b.n	8005cbe <_printf_i+0x86>
 8005cb6:	2975      	cmp	r1, #117	; 0x75
 8005cb8:	d017      	beq.n	8005cea <_printf_i+0xb2>
 8005cba:	2978      	cmp	r1, #120	; 0x78
 8005cbc:	d1d4      	bne.n	8005c68 <_printf_i+0x30>
 8005cbe:	2378      	movs	r3, #120	; 0x78
 8005cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cc4:	4864      	ldr	r0, [pc, #400]	; (8005e58 <_printf_i+0x220>)
 8005cc6:	e055      	b.n	8005d74 <_printf_i+0x13c>
 8005cc8:	6813      	ldr	r3, [r2, #0]
 8005cca:	1d19      	adds	r1, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6011      	str	r1, [r2, #0]
 8005cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e08c      	b.n	8005df6 <_printf_i+0x1be>
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6011      	str	r1, [r2, #0]
 8005ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ce4:	bf18      	it	ne
 8005ce6:	b21b      	sxthne	r3, r3
 8005ce8:	e7cf      	b.n	8005c8a <_printf_i+0x52>
 8005cea:	6813      	ldr	r3, [r2, #0]
 8005cec:	6825      	ldr	r5, [r4, #0]
 8005cee:	1d18      	adds	r0, r3, #4
 8005cf0:	6010      	str	r0, [r2, #0]
 8005cf2:	0628      	lsls	r0, r5, #24
 8005cf4:	d501      	bpl.n	8005cfa <_printf_i+0xc2>
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	e002      	b.n	8005d00 <_printf_i+0xc8>
 8005cfa:	0668      	lsls	r0, r5, #25
 8005cfc:	d5fb      	bpl.n	8005cf6 <_printf_i+0xbe>
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	4854      	ldr	r0, [pc, #336]	; (8005e54 <_printf_i+0x21c>)
 8005d02:	296f      	cmp	r1, #111	; 0x6f
 8005d04:	bf14      	ite	ne
 8005d06:	220a      	movne	r2, #10
 8005d08:	2208      	moveq	r2, #8
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d10:	6865      	ldr	r5, [r4, #4]
 8005d12:	60a5      	str	r5, [r4, #8]
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	f2c0 8095 	blt.w	8005e44 <_printf_i+0x20c>
 8005d1a:	6821      	ldr	r1, [r4, #0]
 8005d1c:	f021 0104 	bic.w	r1, r1, #4
 8005d20:	6021      	str	r1, [r4, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d13d      	bne.n	8005da2 <_printf_i+0x16a>
 8005d26:	2d00      	cmp	r5, #0
 8005d28:	f040 808e 	bne.w	8005e48 <_printf_i+0x210>
 8005d2c:	4665      	mov	r5, ip
 8005d2e:	2a08      	cmp	r2, #8
 8005d30:	d10b      	bne.n	8005d4a <_printf_i+0x112>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	07db      	lsls	r3, r3, #31
 8005d36:	d508      	bpl.n	8005d4a <_printf_i+0x112>
 8005d38:	6923      	ldr	r3, [r4, #16]
 8005d3a:	6862      	ldr	r2, [r4, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	bfde      	ittt	le
 8005d40:	2330      	movle	r3, #48	; 0x30
 8005d42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d46:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d4a:	ebac 0305 	sub.w	r3, ip, r5
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f8cd 8000 	str.w	r8, [sp]
 8005d54:	463b      	mov	r3, r7
 8005d56:	aa03      	add	r2, sp, #12
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f7ff fef6 	bl	8005b4c <_printf_common>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d14d      	bne.n	8005e00 <_printf_i+0x1c8>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d68:	b005      	add	sp, #20
 8005d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d6e:	4839      	ldr	r0, [pc, #228]	; (8005e54 <_printf_i+0x21c>)
 8005d70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d74:	6813      	ldr	r3, [r2, #0]
 8005d76:	6821      	ldr	r1, [r4, #0]
 8005d78:	1d1d      	adds	r5, r3, #4
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6015      	str	r5, [r2, #0]
 8005d7e:	060a      	lsls	r2, r1, #24
 8005d80:	d50b      	bpl.n	8005d9a <_printf_i+0x162>
 8005d82:	07ca      	lsls	r2, r1, #31
 8005d84:	bf44      	itt	mi
 8005d86:	f041 0120 	orrmi.w	r1, r1, #32
 8005d8a:	6021      	strmi	r1, [r4, #0]
 8005d8c:	b91b      	cbnz	r3, 8005d96 <_printf_i+0x15e>
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	f022 0220 	bic.w	r2, r2, #32
 8005d94:	6022      	str	r2, [r4, #0]
 8005d96:	2210      	movs	r2, #16
 8005d98:	e7b7      	b.n	8005d0a <_printf_i+0xd2>
 8005d9a:	064d      	lsls	r5, r1, #25
 8005d9c:	bf48      	it	mi
 8005d9e:	b29b      	uxthmi	r3, r3
 8005da0:	e7ef      	b.n	8005d82 <_printf_i+0x14a>
 8005da2:	4665      	mov	r5, ip
 8005da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005da8:	fb02 3311 	mls	r3, r2, r1, r3
 8005dac:	5cc3      	ldrb	r3, [r0, r3]
 8005dae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005db2:	460b      	mov	r3, r1
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d1f5      	bne.n	8005da4 <_printf_i+0x16c>
 8005db8:	e7b9      	b.n	8005d2e <_printf_i+0xf6>
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	6825      	ldr	r5, [r4, #0]
 8005dbe:	6961      	ldr	r1, [r4, #20]
 8005dc0:	1d18      	adds	r0, r3, #4
 8005dc2:	6010      	str	r0, [r2, #0]
 8005dc4:	0628      	lsls	r0, r5, #24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	d501      	bpl.n	8005dce <_printf_i+0x196>
 8005dca:	6019      	str	r1, [r3, #0]
 8005dcc:	e002      	b.n	8005dd4 <_printf_i+0x19c>
 8005dce:	066a      	lsls	r2, r5, #25
 8005dd0:	d5fb      	bpl.n	8005dca <_printf_i+0x192>
 8005dd2:	8019      	strh	r1, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	4665      	mov	r5, ip
 8005dda:	e7b9      	b.n	8005d50 <_printf_i+0x118>
 8005ddc:	6813      	ldr	r3, [r2, #0]
 8005dde:	1d19      	adds	r1, r3, #4
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	681d      	ldr	r5, [r3, #0]
 8005de4:	6862      	ldr	r2, [r4, #4]
 8005de6:	2100      	movs	r1, #0
 8005de8:	4628      	mov	r0, r5
 8005dea:	f7fa fa09 	bl	8000200 <memchr>
 8005dee:	b108      	cbz	r0, 8005df4 <_printf_i+0x1bc>
 8005df0:	1b40      	subs	r0, r0, r5
 8005df2:	6060      	str	r0, [r4, #4]
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dfe:	e7a7      	b.n	8005d50 <_printf_i+0x118>
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	462a      	mov	r2, r5
 8005e04:	4639      	mov	r1, r7
 8005e06:	4630      	mov	r0, r6
 8005e08:	47c0      	blx	r8
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d0aa      	beq.n	8005d64 <_printf_i+0x12c>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	079b      	lsls	r3, r3, #30
 8005e12:	d413      	bmi.n	8005e3c <_printf_i+0x204>
 8005e14:	68e0      	ldr	r0, [r4, #12]
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	4298      	cmp	r0, r3
 8005e1a:	bfb8      	it	lt
 8005e1c:	4618      	movlt	r0, r3
 8005e1e:	e7a3      	b.n	8005d68 <_printf_i+0x130>
 8005e20:	2301      	movs	r3, #1
 8005e22:	464a      	mov	r2, r9
 8005e24:	4639      	mov	r1, r7
 8005e26:	4630      	mov	r0, r6
 8005e28:	47c0      	blx	r8
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d09a      	beq.n	8005d64 <_printf_i+0x12c>
 8005e2e:	3501      	adds	r5, #1
 8005e30:	68e3      	ldr	r3, [r4, #12]
 8005e32:	9a03      	ldr	r2, [sp, #12]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	42ab      	cmp	r3, r5
 8005e38:	dcf2      	bgt.n	8005e20 <_printf_i+0x1e8>
 8005e3a:	e7eb      	b.n	8005e14 <_printf_i+0x1dc>
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	f104 0919 	add.w	r9, r4, #25
 8005e42:	e7f5      	b.n	8005e30 <_printf_i+0x1f8>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ac      	bne.n	8005da2 <_printf_i+0x16a>
 8005e48:	7803      	ldrb	r3, [r0, #0]
 8005e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e52:	e76c      	b.n	8005d2e <_printf_i+0xf6>
 8005e54:	08006205 	.word	0x08006205
 8005e58:	08006216 	.word	0x08006216

08005e5c <memmove>:
 8005e5c:	4288      	cmp	r0, r1
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	eb01 0302 	add.w	r3, r1, r2
 8005e64:	d807      	bhi.n	8005e76 <memmove+0x1a>
 8005e66:	1e42      	subs	r2, r0, #1
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	d00a      	beq.n	8005e82 <memmove+0x26>
 8005e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e74:	e7f8      	b.n	8005e68 <memmove+0xc>
 8005e76:	4283      	cmp	r3, r0
 8005e78:	d9f5      	bls.n	8005e66 <memmove+0xa>
 8005e7a:	1881      	adds	r1, r0, r2
 8005e7c:	1ad2      	subs	r2, r2, r3
 8005e7e:	42d3      	cmn	r3, r2
 8005e80:	d100      	bne.n	8005e84 <memmove+0x28>
 8005e82:	bd10      	pop	{r4, pc}
 8005e84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e8c:	e7f7      	b.n	8005e7e <memmove+0x22>
	...

08005e90 <_free_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4605      	mov	r5, r0
 8005e94:	2900      	cmp	r1, #0
 8005e96:	d045      	beq.n	8005f24 <_free_r+0x94>
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f0c      	subs	r4, r1, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	18e4      	addlt	r4, r4, r3
 8005ea4:	f000 f8d2 	bl	800604c <__malloc_lock>
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <_free_r+0x98>)
 8005eaa:	6813      	ldr	r3, [r2, #0]
 8005eac:	4610      	mov	r0, r2
 8005eae:	b933      	cbnz	r3, 8005ebe <_free_r+0x2e>
 8005eb0:	6063      	str	r3, [r4, #4]
 8005eb2:	6014      	str	r4, [r2, #0]
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eba:	f000 b8c8 	b.w	800604e <__malloc_unlock>
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	d90c      	bls.n	8005edc <_free_r+0x4c>
 8005ec2:	6821      	ldr	r1, [r4, #0]
 8005ec4:	1862      	adds	r2, r4, r1
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bf04      	itt	eq
 8005eca:	681a      	ldreq	r2, [r3, #0]
 8005ecc:	685b      	ldreq	r3, [r3, #4]
 8005ece:	6063      	str	r3, [r4, #4]
 8005ed0:	bf04      	itt	eq
 8005ed2:	1852      	addeq	r2, r2, r1
 8005ed4:	6022      	streq	r2, [r4, #0]
 8005ed6:	6004      	str	r4, [r0, #0]
 8005ed8:	e7ec      	b.n	8005eb4 <_free_r+0x24>
 8005eda:	4613      	mov	r3, r2
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	b10a      	cbz	r2, 8005ee4 <_free_r+0x54>
 8005ee0:	42a2      	cmp	r2, r4
 8005ee2:	d9fa      	bls.n	8005eda <_free_r+0x4a>
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	1858      	adds	r0, r3, r1
 8005ee8:	42a0      	cmp	r0, r4
 8005eea:	d10b      	bne.n	8005f04 <_free_r+0x74>
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	4401      	add	r1, r0
 8005ef0:	1858      	adds	r0, r3, r1
 8005ef2:	4282      	cmp	r2, r0
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	d1dd      	bne.n	8005eb4 <_free_r+0x24>
 8005ef8:	6810      	ldr	r0, [r2, #0]
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	4401      	add	r1, r0
 8005f00:	6019      	str	r1, [r3, #0]
 8005f02:	e7d7      	b.n	8005eb4 <_free_r+0x24>
 8005f04:	d902      	bls.n	8005f0c <_free_r+0x7c>
 8005f06:	230c      	movs	r3, #12
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	e7d3      	b.n	8005eb4 <_free_r+0x24>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	1821      	adds	r1, r4, r0
 8005f10:	428a      	cmp	r2, r1
 8005f12:	bf04      	itt	eq
 8005f14:	6811      	ldreq	r1, [r2, #0]
 8005f16:	6852      	ldreq	r2, [r2, #4]
 8005f18:	6062      	str	r2, [r4, #4]
 8005f1a:	bf04      	itt	eq
 8005f1c:	1809      	addeq	r1, r1, r0
 8005f1e:	6021      	streq	r1, [r4, #0]
 8005f20:	605c      	str	r4, [r3, #4]
 8005f22:	e7c7      	b.n	8005eb4 <_free_r+0x24>
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
 8005f26:	bf00      	nop
 8005f28:	20012ebc 	.word	0x20012ebc

08005f2c <_malloc_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	1ccd      	adds	r5, r1, #3
 8005f30:	f025 0503 	bic.w	r5, r5, #3
 8005f34:	3508      	adds	r5, #8
 8005f36:	2d0c      	cmp	r5, #12
 8005f38:	bf38      	it	cc
 8005f3a:	250c      	movcc	r5, #12
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	4606      	mov	r6, r0
 8005f40:	db01      	blt.n	8005f46 <_malloc_r+0x1a>
 8005f42:	42a9      	cmp	r1, r5
 8005f44:	d903      	bls.n	8005f4e <_malloc_r+0x22>
 8005f46:	230c      	movs	r3, #12
 8005f48:	6033      	str	r3, [r6, #0]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
 8005f4e:	f000 f87d 	bl	800604c <__malloc_lock>
 8005f52:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <_malloc_r+0xac>)
 8005f54:	6814      	ldr	r4, [r2, #0]
 8005f56:	4621      	mov	r1, r4
 8005f58:	b991      	cbnz	r1, 8005f80 <_malloc_r+0x54>
 8005f5a:	4c20      	ldr	r4, [pc, #128]	; (8005fdc <_malloc_r+0xb0>)
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	b91b      	cbnz	r3, 8005f68 <_malloc_r+0x3c>
 8005f60:	4630      	mov	r0, r6
 8005f62:	f000 f863 	bl	800602c <_sbrk_r>
 8005f66:	6020      	str	r0, [r4, #0]
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f000 f85e 	bl	800602c <_sbrk_r>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d124      	bne.n	8005fbe <_malloc_r+0x92>
 8005f74:	230c      	movs	r3, #12
 8005f76:	6033      	str	r3, [r6, #0]
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 f868 	bl	800604e <__malloc_unlock>
 8005f7e:	e7e4      	b.n	8005f4a <_malloc_r+0x1e>
 8005f80:	680b      	ldr	r3, [r1, #0]
 8005f82:	1b5b      	subs	r3, r3, r5
 8005f84:	d418      	bmi.n	8005fb8 <_malloc_r+0x8c>
 8005f86:	2b0b      	cmp	r3, #11
 8005f88:	d90f      	bls.n	8005faa <_malloc_r+0x7e>
 8005f8a:	600b      	str	r3, [r1, #0]
 8005f8c:	50cd      	str	r5, [r1, r3]
 8005f8e:	18cc      	adds	r4, r1, r3
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 f85c 	bl	800604e <__malloc_unlock>
 8005f96:	f104 000b 	add.w	r0, r4, #11
 8005f9a:	1d23      	adds	r3, r4, #4
 8005f9c:	f020 0007 	bic.w	r0, r0, #7
 8005fa0:	1ac3      	subs	r3, r0, r3
 8005fa2:	d0d3      	beq.n	8005f4c <_malloc_r+0x20>
 8005fa4:	425a      	negs	r2, r3
 8005fa6:	50e2      	str	r2, [r4, r3]
 8005fa8:	e7d0      	b.n	8005f4c <_malloc_r+0x20>
 8005faa:	428c      	cmp	r4, r1
 8005fac:	684b      	ldr	r3, [r1, #4]
 8005fae:	bf16      	itet	ne
 8005fb0:	6063      	strne	r3, [r4, #4]
 8005fb2:	6013      	streq	r3, [r2, #0]
 8005fb4:	460c      	movne	r4, r1
 8005fb6:	e7eb      	b.n	8005f90 <_malloc_r+0x64>
 8005fb8:	460c      	mov	r4, r1
 8005fba:	6849      	ldr	r1, [r1, #4]
 8005fbc:	e7cc      	b.n	8005f58 <_malloc_r+0x2c>
 8005fbe:	1cc4      	adds	r4, r0, #3
 8005fc0:	f024 0403 	bic.w	r4, r4, #3
 8005fc4:	42a0      	cmp	r0, r4
 8005fc6:	d005      	beq.n	8005fd4 <_malloc_r+0xa8>
 8005fc8:	1a21      	subs	r1, r4, r0
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f000 f82e 	bl	800602c <_sbrk_r>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d0cf      	beq.n	8005f74 <_malloc_r+0x48>
 8005fd4:	6025      	str	r5, [r4, #0]
 8005fd6:	e7db      	b.n	8005f90 <_malloc_r+0x64>
 8005fd8:	20012ebc 	.word	0x20012ebc
 8005fdc:	20012ec0 	.word	0x20012ec0

08005fe0 <_realloc_r>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	460e      	mov	r6, r1
 8005fe8:	b921      	cbnz	r1, 8005ff4 <_realloc_r+0x14>
 8005fea:	4611      	mov	r1, r2
 8005fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ff0:	f7ff bf9c 	b.w	8005f2c <_malloc_r>
 8005ff4:	b922      	cbnz	r2, 8006000 <_realloc_r+0x20>
 8005ff6:	f7ff ff4b 	bl	8005e90 <_free_r>
 8005ffa:	4625      	mov	r5, r4
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006000:	f000 f826 	bl	8006050 <_malloc_usable_size_r>
 8006004:	42a0      	cmp	r0, r4
 8006006:	d20f      	bcs.n	8006028 <_realloc_r+0x48>
 8006008:	4621      	mov	r1, r4
 800600a:	4638      	mov	r0, r7
 800600c:	f7ff ff8e 	bl	8005f2c <_malloc_r>
 8006010:	4605      	mov	r5, r0
 8006012:	2800      	cmp	r0, #0
 8006014:	d0f2      	beq.n	8005ffc <_realloc_r+0x1c>
 8006016:	4631      	mov	r1, r6
 8006018:	4622      	mov	r2, r4
 800601a:	f7ff fc11 	bl	8005840 <memcpy>
 800601e:	4631      	mov	r1, r6
 8006020:	4638      	mov	r0, r7
 8006022:	f7ff ff35 	bl	8005e90 <_free_r>
 8006026:	e7e9      	b.n	8005ffc <_realloc_r+0x1c>
 8006028:	4635      	mov	r5, r6
 800602a:	e7e7      	b.n	8005ffc <_realloc_r+0x1c>

0800602c <_sbrk_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4c06      	ldr	r4, [pc, #24]	; (8006048 <_sbrk_r+0x1c>)
 8006030:	2300      	movs	r3, #0
 8006032:	4605      	mov	r5, r0
 8006034:	4608      	mov	r0, r1
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	f7fa fd02 	bl	8000a40 <_sbrk>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_sbrk_r+0x1a>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	b103      	cbz	r3, 8006046 <_sbrk_r+0x1a>
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	2001321c 	.word	0x2001321c

0800604c <__malloc_lock>:
 800604c:	4770      	bx	lr

0800604e <__malloc_unlock>:
 800604e:	4770      	bx	lr

08006050 <_malloc_usable_size_r>:
 8006050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006054:	1f18      	subs	r0, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	bfbc      	itt	lt
 800605a:	580b      	ldrlt	r3, [r1, r0]
 800605c:	18c0      	addlt	r0, r0, r3
 800605e:	4770      	bx	lr

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
